<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SeeingSharp</name>
    </assembly>
    <members>
        <member name="M:SeeingSharp.Bootstrapper.TranslationBootstrapper.Execute(SeeingSharp.Infrastructure.SeeingSharpApplication)">
            <summary>
            Executes the background action behind this item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SeeingSharp.Bootstrapper.TranslationBootstrapper.OrderID">
            <summary>
            Gets a simple order id. The list of bootstrapper items will be sorted by this ID.
            </summary>
        </member>
        <member name="P:SeeingSharp.Bootstrapper.TranslationBootstrapper.Description">
            <summary>
            Gets a short description of this item for the UI (e. g. for splash screens).
            </summary>
        </member>
        <member name="T:SeeingSharp.Checking.Ensure">
            <summary>
            This class contains some helper methods which can be used
            to check method parameters.
            Note: All methods are only executing in DebugBuilds.
            </summary>
        </member>
        <member name="M:SeeingSharp.Checking.SeeingSharpCheckException.#ctor(System.String)">
            <summary>
            Creates a new CommonLibraryException object
            </summary>
        </member>
        <member name="M:SeeingSharp.Checking.SeeingSharpCheckException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new CommonLibraryException object
            </summary>
        </member>
        <member name="M:SeeingSharp.ExceptionAnalyzers.SystemExceptionAnalyzer.ReadExceptionInfo(System.Exception)">
            <summary>
            Reads all exception information from the given exception object.
            </summary>
            <param name="ex">The exception to be analyzed.</param>
        </member>
        <member name="M:SeeingSharp.ExceptionAnalyzers.SystemExceptionAnalyzer.GetInnerExceptions(System.Exception)">
            <summary>
            Gets all inner exceptions provided by the given exception object.
            </summary>
            <param name="ex">The exception to be analyzed.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Infrastructure.SeeingSharpApplication" /> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.InitializeForUnitTests">
            <summary>
            Initializes the SeeingSharpApplication object for UnitTests.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.InitializeAsync(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Initializes the SeeingSharpApplication object.
            </summary>
            <param name="mainAssembly">The main assembly of the application.</param>
            <param name="otherAssemblies">All other assemblies which should be search during TypeQuery.</param>
            <param name="startupArguments">All arguments passed to this application.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.InitializeUIEnvironment">
            <summary>
            Initializes the UI environment.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.RegisterSingleton``1">
            <summary>
            Registers a new singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton to create an object of.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.RegisterSingleton``1(``0)">
            <summary>
            Registers a new singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton to create an object of.</typeparam>
            <param name="singletonObject">The object to register.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.RegisterService``1(``0)">
            <summary>
            Registers the given service.
            </summary>
            <typeparam name="T">The type of the service to register.</typeparam>
            <param name="service">The service object to register.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.TryGetService``1(``0@)">
            <summary>
            Tries to get the service of the given type.
            </summary>
            <typeparam name="T">The type of the service to get.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.TryGetService``1">
            <summary>
            Tries to get the service of the given type.
            </summary>
            <typeparam name="T">The type of the service to get.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.GetService``1(``0@)">
            <summary>
            Gets the service of the given type.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.GetService``1">
            <summary>
            Gets the service of the given type.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpApplication.GetAssemblyEnumerable(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Helper method.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.Current">
            <summary>
            Gets the current instance of this application.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.IsInitialized">
            <summary>
            Is the application initialized?
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.ProductName">
            <summary>
            Gets the name of this product.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.ProductVersion">
            <summary>
            Gets the version of this product.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.StartupArguments">
            <summary>
            Gets a collection containing all startup arguments passed by the caller of this program.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.AppAssemblies">
            <summary>
            A list containing all assemblies given during initialization.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.UIMessenger">
            <summary>
            Gets the messenger of the ui.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.TypeQuery">
            <summary>
            Gets the object which is responsible for type query.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.Translator">
            <summary>
            Gets the current translator object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.Bootstrapper">
            <summary>
            Gets the application's bootstrapper.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpApplication.Singletons">
            <summary>
            Gets a container holding all registered singletons.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.AssemblyQueryableTypeAttribute.TargetType">
            <summary>
            Gets The type which is to be found through assembly query.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.AssemblyQueryableTypeAttribute.ContractType">
            <summary>
            Gets the type of the contract, under which the target type is to be found too.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.UINavigatablePageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.UINavigatablePageAttribute"/> class.
            </summary>
            <param name="pageName">Name of the page.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.Bootstrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.Bootstrapper" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.Bootstrapper.LoadBootstrapperItems">
            <summary>
            Loads all bootstrapper items
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.Bootstrapper.RunAsync(SeeingSharp.Infrastructure.SeeingSharpApplication)">
            <summary>
            Runs all items within this bootstrapper.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.Bootstrapper.Booted">
            <summary>
            Are all items finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.Bootstrapper.CurrentItem">
            <summary>
            Gets the currently executing item.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.IBootstrapperItem.Execute(SeeingSharp.Infrastructure.SeeingSharpApplication)">
            <summary>
            Executes the background action behind this item.
            </summary>
            <param name="app">The current application instance.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.IBootstrapperItem.OrderID">
            <summary>
            Gets a simple order id. The list of bootstrapper items will be sorted by this ID.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.IBootstrapperItem.Description">
            <summary>
            Gets a short description of this item for the UI (e. g. for splash screens).
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.ExceptionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.ExceptionInfo"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.ExceptionInfo.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.ExceptionInfo"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.ExceptionInfo.AnalyzeException(System.Exception,SeeingSharp.Infrastructure.ExceptionInfoNode,System.Collections.Generic.IEnumerable{SeeingSharp.Infrastructure.IExceptionAnalyzer})">
            <summary>
            Analyzes the given exception.
            </summary>
            <param name="ex">The exception to be analyzed.</param>
            <param name="targetNode">The target node where to put all data to.</param>
            <param name="exceptionAnalyzers">All loaded analyzer objects.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.ExceptionInfo.ChildNodes">
            <summary>
            Gets a collection containing all subnodes.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.ExceptionInfo.MainMessage">
            <summary>
            Gets or sets the main message.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.ExceptionInfoNode.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.ExceptionInfoNode"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.ExceptionInfoNode.ChildNodes">
            <summary>
            Gets a collection containing all subnodes.
            </summary>
        </member>
        <member name="T:SeeingSharp.Infrastructure.IExceptionAnalyzer">
            <summary>
            This interface is used by the error-reporting framework.
            It queries for all information provided by an exception which will be presentet to
            the user / developer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.IExceptionAnalyzer.ReadExceptionInfo(System.Exception)">
            <summary>
            Reads all exception information from the given exception object.
            </summary>
            <param name="ex">The exception to be analyzed.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.IExceptionAnalyzer.GetInnerExceptions(System.Exception)">
            <summary>
            Gets all inner exceptions provided by the given exception object.
            </summary>
            <param name="ex">The exception to be analyzed.</param>
        </member>
        <member name="T:SeeingSharp.Infrastructure.PlatformClass">
            <summary>
            Controls the class of the hosting platform.
            </summary>
        </member>
        <member name="F:SeeingSharp.Infrastructure.PlatformClass.Smartphone">
            <summary>
            The application is running on a smartphone.
            </summary>
        </member>
        <member name="F:SeeingSharp.Infrastructure.PlatformClass.Tablet">
            <summary>
            The application is running on a tablet.
            </summary>
        </member>
        <member name="F:SeeingSharp.Infrastructure.PlatformClass.Desktop">
            <summary>
            The application is running on a desktop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.SingletonContainer" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.RegisterSingleton``1">
            <summary>
            Registers a new singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton to create an object of.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.RegisterSingleton``1(``0)">
            <summary>
            Registers a new singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton to create an object of.</typeparam>
            <param name="singletonObject">The object to register.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.RegisterSingleton``1(``0,System.String)">
            <summary>
            Registers a singleton on the given name.
            </summary>
            <typeparam name="T">The type of the singleton.</typeparam>
            <param name="singletonObject">The object to register.</param>
            <param name="name">The name for the singleton</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.ContainsSingleton(System.String)">
            <summary>
            Is there any singleton with the given name?
            </summary>
            <param name="singletonName">The name of the singleton.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.GetSingleton``1">
            <summary>
            Gets the singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.GetSingleton``1(System.String)">
            <summary>
            Gets the singleton of the given type.
            </summary>
            <typeparam name="T">The type of the singleton.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.TryGetSingleton``1">
            <summary>
            Tries to get the singleton of the given type.
            Null is returned when the singleton is not available.
            </summary>
            <typeparam name="T">The type of the singleton.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SingletonContainer.ContainsSingleton(System.Type)">
            <summary>
            Is there any singleton with the given type?
            </summary>
            <param name="type">The type of the singleton.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SingletonContainer.Item(System.Type)">
            <summary>
            Gets the singleton object of the given type.
            </summary>
            <param name="typeOfSingleton">The type of the singleton.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SingletonContainer.Item(System.String)">
            <summary>
            Gets the singleton with the given name.
            </summary>
            <param name="name">The name of the singleton.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpTranslator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.SeeingSharpTranslator" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpTranslator.TranslateString(System.String,System.String)">
            <summary>
            Translates the given string from the given category.
            </summary>
            <param name="category">The category.</param>
            <param name="translatableString">The translatable string.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpTranslator.TranslateAllTranslatableClasses">
            <summary>
            Translates all translatable classes.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpTranslator.QueryTranslationsAsync(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Queries for all translations found in loaded assemblies.
            </summary>
            <param name="currentAssemblies">A collection containing all currently loaded assemblies.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.SeeingSharpTranslator.LoadTranslationFile(System.String,System.IO.Stream)">
            <summary>
            Loads a translation file from the given stream.
            </summary>
            <param name="fileName">The name of the file from which the given stream loads data.</param>
            <param name="inStream">The input stream.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpTranslator.Language">
            <summary>
            Gets the current language this app runs on.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.SeeingSharpTranslator.Culture">
            <summary>
            Gets the culture this app is started with.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TranslatedWord.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TranslationXmlFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.TranslationXmlFile"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TranslationXmlFile.BuildDictionary">
            <summary>
            Builds a dictionary for faster access.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TranslationXmlFile.TryGetTranslation(System.String,System.String@)">
            <summary>
            Gets the translation for the given sentence.
            </summary>
            <param name="original">The original sentence.</param>
            <param name="actTranslated">The translation of the given string.</param>
        </member>
        <member name="P:SeeingSharp.Infrastructure.TranslationXmlFile.LanguageKey">
            <summary>
            Gets the language this file is loaded for.
            </summary>
        </member>
        <member name="P:SeeingSharp.Infrastructure.TranslationXmlFile.Words">
            <summary>
            Gets a collection containing all translated words.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Infrastructure.TypeQueryHandler"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.GetAndInstanciateByContract``1">
            <summary>
            Gets and instanciates all types which are implementing the given contract.
            </summary>
            <typeparam name="ContractType">The implemented contract.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.QueryTypesByAttribute``1">
            <summary>
            Gets a collection containing all types which have the given attribute attached.
            </summary>
            <typeparam name="T1">The type of the attribute.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.GetTypesByContract``1">
            <summary>
            Gets a list containing all types that implement the given contract.
            </summary>
            <typeparam name="ContractType">The implemented contract.</typeparam>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.GetTypesByContract(System.Type)">
            <summary>
            Gets a list containing all types that implement the given contract.
            </summary>
            <param name="contractType">The implemented contract.</param>
        </member>
        <member name="M:SeeingSharp.Infrastructure.TypeQueryHandler.QueryTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Queries for types in the given collection of assemblies.
            </summary>
            <param name="assembliesToQuery">A collection containing all assemblies for the query.</param>
        </member>
        <member name="M:SeeingSharp.SeeingSharpException.#ctor(System.String)">
            <summary>
            Creates a new CommonLibraryException object
            </summary>
        </member>
        <member name="M:SeeingSharp.SeeingSharpException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new CommonLibraryException object
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.GetBackingArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the backing array of the given list.
            </summary>
            <param name="lst">The list from which to get the backing array for faster loop access.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.GetBackingArray``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the backing array of the given queue.
            </summary>
            <param name="queue">The queue from which to get the backing array for faster loop access.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.CallAsync``1(System.Func{``0})">
            <summary>
            Calls the given function asynchronous.
            </summary>
            <param name="funcToExecute">The function to execute.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.CopyMemory(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Copies memory from given source to given target pointer.
            </summary>
            <param name="sourcePointer">The source pointer.</param>
            <param name="targetPointer">The target pointer.</param>
            <param name="byteCount">The total count of bytes to be copied.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.CopyMemory(System.Void*,System.Void*,System.UInt64)">
            <summary>
            Copies memory from given source to given target pointer.
            </summary>
            <param name="sourcePointer">The source pointer.</param>
            <param name="targetPointer">The target pointer.</param>
            <param name="byteCount">The total count of bytes to be copied.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.FormatTimespanCompact(System.TimeSpan)">
            <summary>
            Formats the given timespan to a compact string.
            </summary>
            <param name="timespan">The Tiemspan value to be formated.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.MaximumDelayAsync(System.Double)">
            <summary>
            Performs a real delay (sleeps a shorter time and does a dummy loop after then).
            </summary>
            <param name="delayMilliseconds">Total delay time.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.MaximumDelay(System.Double)">
            <summary>
            Performs a real delay (uses a manual reset event for waiting..).
            </summary>
            <param name="delayMilliseconds">Total time for delay.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.GetCollectionCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the total count of items within the given collection.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.GetLanguageKeyFromFileName(System.String)">
            <summary>
            Gets the language key from the given file name;
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.GetLanguageFileCategory(System.String)">
            <summary>
            Gets the language file category by the given file name.
            This file format is expected: [category].[lang-[Key]].langXml
            </summary>
            <param name="fileName">The file name from which to get the category.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.DeserializeFromXmlFile``1(Windows.Storage.StorageFile)">
            <summary>
            Deserializes an object of the given type from the given storage file.
            </summary>
            <param name="storagefile">The file to deserialize from.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.SerializeToXmlFile``1(Windows.Storage.StorageFile,``0)">
            <summary>
            Serializes the given object to the given storage file.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="storageFile">The target file.</param>
            <param name="objectToSerialize">The object to serialize.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.BinaryInsert``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Inserts the given object using a binary search algorithm.
            </summary>
            <param name="targetList">The list to be modified.</param>
            <param name="newItem">The new item to be inserted.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.BinaryInsert``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Inserts the given object using a binary search algorithm.
            </summary>
            <param name="targetList">The list to be modified.</param>
            <param name="newItem">The new item to be inserted.</param>
            <param name="comparer">The comparer which is used for the binary search method.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.BinaryRemove``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes the given object using binary search algorithm.
            </summary>
            <param name="targetList">The target list to be modified.</param>
            <param name="toRemove">The object to be removed.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.SafeDispose``1(``0@)">
            <summary>
            Disposes the given object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.SafeDisposeLazy``1(System.Lazy{``0}@)">
            <summary>
            Disposes the given object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.DisposeObject``1(``0)">
            <summary>
            Disposes the given object and returns null.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.DisposeObjectLazy``1(System.Lazy{``0})">
            <summary>
            Disposes the given lazy object (if created already).
            </summary>
            <param name="objectToDispose">The object to be disposed.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.DisposeObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Disposes all objects within the given enumeration.
            </summary>
            <param name="enumeration">Enumeration containing all disposable objects.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.RaiseUnhandledException(System.Type,System.Object,System.Exception,System.String,SeeingSharp.Util.ExceptionCategory)">
            <summary>
            Raises an unhandled exception.
            </summary>
            <param name="sourceType">The source class where the exception was catched.</param>
            <param name="sourceObject">The source object where the exception was catched.</param>
            <param name="ex">The exception object itself</param>
            <param name="methodDescription">A short description what the method does exactly.</param>
            <param name="category">The category of the exception.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonTools.InvokeDelayed(System.Action,System.TimeSpan,System.Boolean)">
            <summary>
            Executes the given action after the given amount of time.
            </summary>
            <param name="action">The action to be executed.</param>
            <param name="delayTime">The delay time to be passed before executing the given action.</param>
            <param name="forceValidSyncContext">True to force a valid (UI) SynchronizationContext.</param>
        </member>
        <member name="T:SeeingSharp.Util.CustomLazy`1">
            <summary>
            Provides support for lazy initialization.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:SeeingSharp.Util.CustomLazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the Lazy{T} class.
            </summary>
            <param name="createValue">The delegate that produces the value when it is needed.</param>
            <param name="loadObjectAsyncDirectly">When true, this triggers async loading using ThreadPool directly.</param>
        </member>
        <member name="M:SeeingSharp.Util.CustomLazy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.CustomLazy`1"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CustomLazy`1.op_Implicit(SeeingSharp.Util.CustomLazy{`0})~`0">
            <summary>
            An implicit operator that converts a lazy object to its value.
            </summary>
            <param name="lazyObject">The lazy object.</param>
        </member>
        <member name="M:SeeingSharp.Util.CustomLazy`1.ToString">
            <summary>
            Creates and returns a string representation of the Lazy{T}.Value.
            </summary>
            <returns>The string representation of the Lazy{T}.Value property.</returns>
        </member>
        <member name="M:SeeingSharp.Util.CustomLazy`1.TriggerAsyncLoading">
            <summary>
            Triggers async loading of the object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.CustomLazy`1.Value">
            <summary>
            Gets the lazily initialized value of the current Lazy{T} instance.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.CustomLazy`1.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for this Lazy{T} instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CustomObservable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.CustomObservable`1"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CustomObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes the specified observer.
            </summary>
            <param name="observer">The observer to be subscribed.</param>
        </member>
        <member name="T:SeeingSharp.Util.DummyDisposable">
            <summary>
            Dummy class that implements IDisposable.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.DummyDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.DummyDisposable"/> class.
            </summary>
            <param name="onDisposeAction">The action to call on Dispose.</param>
        </member>
        <member name="M:SeeingSharp.Util.DummyDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SerializerRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.SerializerRepository"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SerializerRepository.GetSerializer``1">
            <summary>
            Gets the xml serializer for the given type.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
        </member>
        <member name="M:SeeingSharp.Util.SerializerRepository.GetSerializer(System.Type)">
            <summary>
            Gets the xml serializer for the given type.
            </summary>
            <param name="serializerType">The requested type.</param>
        </member>
        <member name="P:SeeingSharp.Util.SerializerRepository.Current">
            <summary>
            Gets the current instance of the serializer collection.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.TableData.ITableFile">
            <summary>
            Represents a table file which may contain more tables.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableFile.GetTableNames">
            <summary>
            Gets a collection containing all tables names defined 
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableFile.ReadHeaderRow(System.String)">
            <summary>
            Reads the header row from the given table.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableFile.OpenReader(System.String)">
            <summary>
            Opens a reader which reads all rows within the given table.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="T:SeeingSharp.Util.TableData.ITableHeaderRow">
            <summary>
            Represents the header row within the table.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableHeaderRow.GetFieldIndex(System.String)">
            <summary>
            Gets the index for the given field name.
            </summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableHeaderRow.GetFieldName(System.Int32)">
            <summary>
            Gets the name of the field with the given index.
            </summary>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="P:SeeingSharp.Util.TableData.ITableHeaderRow.FieldCount">
            <summary>
            Gets the total count of fields contained in the datasource.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.TableData.ITableImporter">
            <summary>
            A generic importer interface which can import tables from a given datasource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableImporter.CreateDefaultConfig">
            <summary>
            Creates a default importer configuration object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableImporter.CreateDefaultConfig(SeeingSharp.Util.ResourceLink)">
            <summary>
            Creates a default importer configuration object.
            </summary>
            <param name="sourceFile">The source file for which the default configuration should be created.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableImporter.OpenTableFile(SeeingSharp.Util.ResourceLink,SeeingSharp.Util.TableData.TableImporterConfig)">
            <summary>
            Tries to laod the given table file.
            Null is returned if opening is not possible.
            </summary>
            <param name="tableFile">The file to be loaded.</param>
            <param name="importConfig">The configuration for the importer.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableImporter.GetSupportedFileExtensions">
            <summary>
            Gets a list containing supported file extensions.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.TableData.ITableRow">
            <summary>
            Represents a row within the table.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableRow.ReadField``1(System.Int32)">
            <summary>
            Reads the contents of the field with the given index.
            </summary>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableRow.ReadField``1(System.String)">
            <summary>
            Reads the contents of the field with the given name.
            </summary>
            <param name="fieldName">The name of the field to read.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableRow.ReadFieldAsString(System.Int32)">
            <summary>
            Reads the contents of the field with the given index.
            </summary>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableRow.ReadFieldAsString(System.String)">
            <summary>
            Reads the contents of the field with the given name.
            </summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="T:SeeingSharp.Util.TableData.ITableRowReader">
            <summary>
            This class reads the table's contents row by row.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.ITableRowReader.ReadAllRows">
            <summary>
            Reads all rows from the table.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableFile.#ctor(SeeingSharp.Util.ResourceLink,SeeingSharp.Util.TableData.CsvImporterConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.TableData.CsvTableFile"/> class.
            </summary>
            <param name="tableFileSource">The file from which to load the table data.</param>
            <param name="importerConfig">The configuration for the import process.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableFile.GetTableNames">
            <summary>
            Gets a collection containing all tables names defined
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableFile.ReadHeaderRow(System.String)">
            <summary>
            Reads the header row from the given table.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableFile.OpenReader(System.String)">
            <summary>
            Opens a reader which reads all rows within the given table.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableHeaderRow.GetFieldIndex(System.String)">
            <summary>
            Gets the index for the given field name.
            </summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableHeaderRow.GetFieldName(System.Int32)">
            <summary>
            Gets the name of the field with the given index.
            </summary>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="P:SeeingSharp.Util.TableData.CsvTableHeaderRow.FieldCount">
            <summary>
            Gets the total count of fields contained in the datasource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableImporter.CreateDefaultConfig">
            <summary>
            Creates a default importer configuration object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableImporter.CreateDefaultConfig(SeeingSharp.Util.ResourceLink)">
            <summary>
            Creates a default importer configuration object.
            </summary>
            <param name="sourceFile">The source file for which the default configuration should be created.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableImporter.OpenTableFile(SeeingSharp.Util.ResourceLink,SeeingSharp.Util.TableData.TableImporterConfig)">
            <summary>
            Tries to laod the given table file.
            Null is returned if opening is not possible.
            </summary>
            <param name="tableFileSource">The file to be loaded.</param>
            <param name="importerConfig">Configuration for the import process.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableImporter.GetSupportedFileExtensions">
            <summary>
            Gets a list containing supported file extensions.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableRow.ReadField``1(System.Int32)">
            <summary>
            Reads the contents of the field with the given index.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableRow.ReadField``1(System.String)">
            <summary>
            Reads the contents of the field with the given name.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableRow.ReadFieldAsString(System.Int32)">
            <summary>
            Reads the contents of the field with the given index.
            </summary>
            <param name="fieldIndex">The index of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableRow.ReadFieldAsString(System.String)">
            <summary>
            Reads the contents of the field with the given name.
            </summary>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvTableRowReader.ReadAllRows">
            <summary>
            Reads all rows from the table.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TableData.CsvUtil.OpenReader(SeeingSharp.Util.ResourceLink,SeeingSharp.Util.TableData.CsvImporterConfig)">
            <summary>
            Opens a reader to the given source file.
            </summary>
            <param name="sourceFile">The source file to be loaded.</param>
            <param name="importerConfig">The configuration of the importer.</param>
        </member>
        <member name="M:SeeingSharp.Util.TplBasedLoop.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.TplBasedLoop"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.TplBasedLoop.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Starts running the mainloop.
            </summary>
            <param name="cancelToken"></param>
            <returns></returns>
        </member>
        <member name="T:SeeingSharp.Util.IgnoreGenericCloneAttribute">
            <summary>
            Indicates that a property is not to be cloned by CommonTools.CloneObject method.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.AssignOriginalParentObjectAfterCloneAttribute">
            <summary>
            Inidicates that this field will get a reference to the original parent object after being cloned from it using CommonTools.Clone
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.IndexBasedDynamicCollection`1" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.HasObjectAt(System.Int32)">
            <summary>
            Has this collection an object at the given index?
            </summary>
            <param name="index">The index to check.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.AddObject(`0)">
            <summary>
            Adds an object to this collection and returns the index on which the item was placed.
            </summary>
            <param name="objectToAdd">The object to be added to the collection.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.AddObject(`0,System.Int32)">
            <summary>
            Adds an object to the given index location.
            </summary>
            <param name="objectToAdd">The object to be added.</param>
            <param name="index">The index on which this object should be added.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.AddObject(`0,System.Int32,System.Boolean)">
            <summary>
            Adds an object to the given index location.
            </summary>
            <param name="objectToAdd">The object to be added.</param>
            <param name="index">The index on which this object should be added.</param>
            <param name="throwIfIndexAlreadyUsed">Throw an exception if the item does already exist? If false, the existing value will be overwritten.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.Contains(`0)">
            <summary>
            Is the given item already added to this collection?
            </summary>
            <param name="objectToCheckFor">The object to check for.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.IndexOf(`0)">
            <summary>
            Gets the index of the given object.
            </summary>
            <param name="objectToCheckFor">The object to check for.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.RemoveObject(`0)">
            <summary>
            Removes the item at the given index.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.RemoveObject(System.Int32)">
            <summary>
            Removes the object at the given index.
            </summary>
            <param name="index">The index of the object to remove.</param>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.Clear">
            <summary>
            Clears the complete collection.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.IndexBasedDynamicCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SeeingSharp.Util.IndexBasedDynamicCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the given index.
            </summary>
            <param name="index">The index of the element to get.</param>
        </member>
        <member name="P:SeeingSharp.Util.IndexBasedDynamicCollection`1.FirstOrDefaultItem">
            <summary>
            Gets the first item or null if there is none.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.IndexBasedDynamicCollection`1.Count">
            <summary>
            Gets the total count of items within this collection.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.#ctor(System.Int64)">
            <summary>
            Private constructor - Just to be used for generated keys.
            </summary>
            <param name="keyValue">The key value.</param>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.NamedOrGenericKey" /> struct.
            </summary>
            <param name="nameKey">A key in form of a name.</param>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.NamedOrGenericKey" /> struct.
            </summary>
            <param name="targetType">The type which to bind to the key (FullTypeName is used).</param>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.Equals(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.CompareTo(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Compares this structure with another one of the same type.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.op_Equality(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Util.NamedOrGenericKey.op_Inequality(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SeeingSharp.Util.NamedOrGenericKey.IsEmpty">
            <summary>
            Is this key empty?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.NamedOrGenericKey.Hint">
            <summary>
            Gets or sets a hint for this resource key (a custom description which helps identifying what is behind this key).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.NamedOrGenericKey.Description">
            <summary>
            Gets a short description of this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.NamedOrGenericKey.NameKey">
            <summary>
            Gets the named key.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.NamedOrGenericKey.GenericKey">
            <summary>
            Gets the generic key.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.RingBuffer`1">
            <summary>
            This is a simple RingBuffer implementation for Seeing#, 
            originally created for the Input event system.
            
            More info on cyclic buffers: https://en.wikipedia.org/wiki/Circular_buffer
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.RingBuffer`1"/> class.
            </summary>
            <param name="maxItemCount">The maximum count of items.</param>
        </member>
        <member name="M:SeeingSharp.Util.RingBuffer`1.AddWithOverride(`0)">
            <summary>
            Adds a new item to the buffer and overrides existing items 
            if the count of items reached the maximum.
            </summary>
            <param name="newItem">The new item to be added.</param>
        </member>
        <member name="M:SeeingSharp.Util.RingBuffer`1.AddWithException(`0)">
            <summary>
            Adds a new item to the buffer and throws an exception 
            if the count of items reached the maximum.
            </summary>
            <param name="newItem">The new item to be added.</param>
        </member>
        <member name="M:SeeingSharp.Util.RingBuffer`1.RemoveAndPushItemsTo(SeeingSharp.Util.CustomObservable{`0})">
            <summary>
            Removes all items from the buffer and pushes them to the given observable collection.
            </summary>
            <param name="targetObservable">The target observable.</param>
        </member>
        <member name="M:SeeingSharp.Util.RingBuffer`1.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.RingBuffer`1.Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.RingBuffer`1.Count">
            <summary>
            Gets the total count of items.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.SingleInstanceCollection`1" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SeeingSharp.Util.SingleInstanceCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:SeeingSharp.Util.SingleInstanceCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.Util.SingleInstanceCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:SeeingSharp.Util.ThreadSaveQueue`1">
            <summary>
            A queue object that performs each action using methods of the Interlocked class and therefore does not need any locking mechanism.
            </summary>
            <typeparam name="T">The type of the objects within the list.</typeparam>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ThreadSaveQueue`1"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.Enqueue(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Enqueues all items within the given collection.
            </summary>
            <param name="items">The items to be enqueued.</param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.HasAny">
            <summary>
            Are there any elements in the queue?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.Peek(`0@)">
            <summary>
            Peeks the first item from the queue.
            This method does not remove the item.
            </summary>
            <param name="item">The read item.</param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.PeekWhile(System.Func{`0,System.Boolean})">
            <summary>
            Peeks objects from the queue while checkPeekItem func returns true.
            </summary>
            <param name="checkPeekItem">The checking func.</param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.Dequeue(`0@)">
            <summary>
            Dequeues the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.DequeueWhile(System.Func{`0,System.Boolean})">
            <summary>
            Dequeues items from the queue as long as checkDequeueItem func returns true.
            </summary>
            <param name="checkDequeueItem">The checking function.</param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.DequeueAndPeekWhile(System.Func{`0,System.Boolean},System.Func{`0,System.Boolean})">
            <summary>
            This method first dequeues items as long checkDequeueItem func returns true. After that
            it peeks items as long as checkPeekItem func returns true.
            </summary>
            <param name="checkDequeueItem"></param>
            <param name="checkPeekItem"></param>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.DequeueAll">
            <summary>
            Deques all items within this queue and returns them using a List object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.DequeueAll(System.Collections.Generic.List{`0})">
            <summary>
            Deques all items within this queue and puts the items to the given target list.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ThreadSaveQueue`1.Clear">
            <summary>
            Removes all items from the queue.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ThreadSaveQueue`1.Count">
            <summary>
            Gets the total count of items within the queue.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UniqueGenericKeyGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.UniqueGenericKeyGenerator" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UniqueGenericKeyGenerator.GetNextGeneric">
            <summary>
            Generates the next generic key.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.CommonExtensions">
            <summary>
            Some common extension methods used in most coding of SeeingSharp.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.#cctor">
            <summary>
            Initializes the <see cref="T:SeeingSharp.Util.CommonExtensions" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.GetTrueElapsedMilliseconds(System.Diagnostics.Stopwatch)">
            <summary>
            Gets most exact value of elapsed milliseconds from the given stopwatch.
            </summary>
            <param name="stopwatch">The stopwatch to get elapsed milliseconds from.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.GetTrueElapsedMillisecondsRounded(System.Diagnostics.Stopwatch)">
            <summary>
            Gets most exact value of elapsed milliseconds from the given stopwatch.
            </summary>
            <param name="stopwatch">The stopwatch to get elapsed milliseconds from.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.SetAllValuesTo``1(``0[],``0)">
            <summary>
            Sets all values of the given array to the given value.
            </summary>
            <param name="array">The array.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ContainsString(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
            Determines whether the specified collection contains the given string.
            </summary>
            <param name="collection">The collection to be searched for the gien string.</param>
            <param name="compareString">The string used for comparison.</param>
            <param name="comparison">The comparison mode.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ToCommaSeparatedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the given collection to a comma separated string (e. g. object1, object2, object3, ...).
            The ToString method is used to get the strings for each individual object.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="collection">The collection to format.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ToCommaSeparatedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the given collection to a comma separated string (e. g. object1, object2, object3, ...).
            The ToString method is used to get the strings for each individual object.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="collection">The collection to format.</param>
            <param name="separator">A custom separator string.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ToCommaSeparatedString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Converts the given collection to a comma separated string (e. g. object1, object2, object3, ...).
            The given toStringFunc method is used to get the strings for each individual object.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="collection">The collection to format.</param>
            <param name="toStringFunc">To string function.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ToCommaSeparatedString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the given collection to a comma separated string (e. g. object1, object2, object3, ...).
            The given toStringFunc method is used to get the strings for each individual object.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="collection">The collection to format.</param>
            <param name="toStringFunc">To string function.</param>
            <param name="separator">A custom separator string.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.GetBackingArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets the backing array of the given list.
            </summary>
            <param name="lst">The list from which to get the backing array for faster loop access.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.GetBackingArray``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Gets the backing array of the given queue.
            </summary>
            <param name="queue">The queue from which to get the backing array for faster loop access.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the given event.
            </summary>
            <param name="eventHandler">The event to be raised.</param>
            <param name="sender">The sender parameter.</param>
            <param name="eventArgs">The event args parameter.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the given event.
            </summary>
            <param name="eventHandler">The event to be raised.</param>
            <param name="sender">The sender parameter.</param>
            <param name="eventArgs">The event args parameter.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.GetOrReturnNull(Windows.Storage.StorageFolder,System.String)">
            <summary>
            Gets the file with the given name or returns null if the file does not exist.
            </summary>
            <param name="storageFolder">The folder from which to get the file.</param>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads all bytes from the given stream.
            </summary>
            <param name="inStream">The stream to read all the data from.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ClearAndDisposeAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Clears and disposes all items of the given collection.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <param name="listOfDisposables">A collection containing all items to be disposed and removed.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.ForEachInEnumeration``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the given Action for each element within the enumeration.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="enumeration">Enumeration to loop through.</param>
            <param name="actionPerElement">Action to perform for each element.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts all items from the given source enumeration to the given target enumeration.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.FireAndForget(Windows.Foundation.IAsyncAction)">
            <summary>
            "Forgets" the given task, but still tries to dispatch exception somewhere the user / developer
            can see them.
            </summary>
            <param name="asyncAction">The action to be fired.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.FireAndForget(System.Threading.Tasks.Task)">
            <summary>
            "Forgets" the given task, but still tries to dispatch exception somewhere the user / developer
            can see them.
            </summary>
            <param name="asyncAction">The action to be fired.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.PostAlsoIfNull(System.Threading.SynchronizationContext,System.Action,SeeingSharp.Util.ActionIfSyncContextIsNull)">
            <summary>
            Posts the given action to the given synchronization context also if it is null.
            If it is null, then a new task will be started.
            </summary>
            <param name="syncContext">The context to send the action to.</param>
            <param name="actionToSend">The action to send.</param>
            <param name="actionIfNull">What should we do if weg get no SyncContext?</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.PostAlsoIfNullAsync(System.Threading.SynchronizationContext,System.Action,SeeingSharp.Util.ActionIfSyncContextIsNull)">
            <summary>
            Post the given action in an async manner to the given SynchronizationContext.
            </summary>
            <param name="syncContext">The target SynchronizationContext.</param>
            <param name="postAction">The action to be posted.</param>
            <param name="actionIfNull">What should we do if we get no SyncContext?</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.PostAsync(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Post the given action in an async manner to the given SynchronizationContext.
            </summary>
            <param name="syncContext">The target SynchronizationContext.</param>
            <param name="postAction">The action to be posted.</param>
        </member>
        <member name="M:SeeingSharp.Util.CommonExtensions.PostDelayed(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback,System.Object,System.TimeSpan)">
            <summary>
            Executes a delayd post to the given synchronization context.
            </summary>
            <param name="syncContext">The synchronization context to post to.</param>
            <param name="callBack">The delegate to be called.</param>
            <param name="state">The parameter of the delegate.</param>
            <param name="delayTime">The total time to wait.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadContentAsVector3(System.Xml.XmlReader)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadContentAsVector3(System.Xml.XmlReader,System.IFormatProvider)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> for parsing <see cref="T:System.Single"/> values.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadContentAsVector2(System.Xml.XmlReader)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadContentAsVector2(System.Xml.XmlReader,System.IFormatProvider)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> for parsing <see cref="T:System.Single"/> values.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadElementContentAsVector3(System.Xml.XmlReader)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
        </member>
        <member name="M:SeeingSharp.Util._CommonExtensions.ReadElementContentAsVector3(System.Xml.XmlReader,System.IFormatProvider)">
            <summary>
            Reads a vector from the given xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> for parsing <see cref="T:System.Single"/> values.</param>
        </member>
        <member name="M:SeeingSharp.Util.UIGestureCatcher.#ctor(Windows.UI.Xaml.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.UIGestureCatcher" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UIGestureCatcher.Stop">
            <summary>
            Stops gesture capturing.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UIGestureCatcher.CanRaiseEvent">
            <summary>
            Can we raise an event (=> Checks time interval since last event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ResourceLink"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.ReadCompleteToString">
            <summary>
            Reads the complete resource to a new string.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.ReadCompleteToStringAsync">
            <summary>
            Reads the complete resource to a new string.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.Exists">
            <summary>
            Does the resource behind this link already exist?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets an object pointing to a file at the same location (e. g. the same directory).
            </summary>
            <param name="newFileName">The new file name for which to get the ResourceLink object.</param>
            <param name="subdirectories">The subdirectory path to the file (optional). This parameter may not be supported by all ResourceLink implementations!</param>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.OpenOutputStream">
            <summary>
            Opens an output stream to the current stream source.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.OpenInputStreamAsync">
            <summary>
            Opens the input stream to the described resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.OpenInputStream">
            <summary>
            Opens a stream to the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.GetExtensionFromFileName(System.String)">
            <summary>
            Gets the name of the extension from the given file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.op_Implicit(Windows.Storage.StorageFile)~SeeingSharp.Util.ResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:Windows.Storage.StorageFile"/> to <see cref="T:SeeingSharp.Util.ResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.op_Implicit(SeeingSharp.Util.AssemblyResourceUriBuilder)~SeeingSharp.Util.ResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Util.AssemblyResourceUriBuilder"/> to <see cref="T:SeeingSharp.Util.ResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ResourceLink.op_Implicit(System.Uri)~SeeingSharp.Util.ResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:SeeingSharp.Util.ResourceLink"/>.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ResourceLink.FileExtension">
            <summary>
            Gets the file extension of the resource we target to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ResourceLink.SupportsAsync">
            <summary>
            Are async operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ResourceLink.SupportsSync">
            <summary>
            Are synchronous operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.ReusableMemoryStream">
            <summary>
            This class works almost like the normal System.MemoryStream class. The difference is that objects
            of this class are created to be reused. For a usage example look within the method Common3.GeneralStringSerializer.Serialize.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ReusableMemoryStream.TakeMemoryStream">
            <summary>
            Takes a Stream that was created before (creates one, if there is no one in the cache).
            Note: You have to call ReregisterMemoryStream if you need the returned stream no more.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ReusableMemoryStream.ReregisterMemoryStream(SeeingSharp.Util.ReusableMemoryStream)">
            <summary>
            Reregisters a stream for public use
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceFileAttribute.#ctor(System.String)">
            <summary>
            Links the given resource
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceFileAttribute.#ctor(System.String,System.String)">
            <summary>
            Links the given resource with the given key
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceFileAttribute.ResourcePath">
            <summary>
            Gets the path to the resource
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceFileAttribute.Key">
            <summary>
            Gets the key (may be null)
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Creates a new AssemblyResourceInfo object
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceInfo.OpenRead">
            <summary>
            Opens a reading stream
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceInfo.ResourcePath">
            <summary>
            Gets the path to the resource
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceInfo.TargetAssembly">
            <summary>
            Gets the target assembly
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceInfo.Key">
            <summary>
            Gets the key of this object
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.AssemblyResourceLink">
            <summary>
            A class that helps for locating and loading assembly resource files.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.AssemblyResourceLink"/> class.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
            <param name="resourceNamespace">The namespace of the resource.</param>
            <param name="resourceFile">The resource file.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.AssemblyResourceLink"/> class.
            </summary>
            <param name="type">The type from which to get the assembly and namespace.</param>
            <param name="resourceFile">The resource file.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets the resource link for another file within the same assembly and namespace.
            </summary>
            <param name="fileName">The filename for which to get the link.</param>
            <param name="subdirectories">The subdirectory path to the file (optional).</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.OpenRead">
            <summary>
            Opens the resource for reading.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.IsValid">
            <summary>
            Is this link valid?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLink.GetText">
            <summary>
            Gets the raw resource in text form.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLink.TargetAssembly">
            <summary>
            Gets the target assembly.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLink.ResourceNamespace">
            <summary>
            Gets the namespace of the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLink.ResourceFile">
            <summary>
            Gets the name of the file (without namespace).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLink.ResourcePath">
            <summary>
            Gets the resource path.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.#ctor(System.Type)">
            <summary>
            Creates a new AssemblyResourceReader object
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.OpenRead(System.Int32)">
            <summary>
            Opens the resource at the given index for reading
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.OpenRead(System.String)">
            <summary>
            Opens the resource with the given key for reading
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.GetText(System.String)">
            <summary>
            Gets complete text of the given resource.
            </summary>
            <param name="key">Key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.GetText(System.Int32)">
            <summary>
            Gets complete text of the given resource.
            </summary>
            <param name="index">Index of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.GetBytes(System.String)">
            <summary>
            Gets all bytes of the given resource.
            </summary>
            <param name="key">Key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.GetBytes(System.Int32)">
            <summary>
            Gets all bytes of the given resource.
            </summary>
            <param name="index">Index of the resource.</param>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.TargetType">
            <summary>
            Gets the target type
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.TargetAssembly">
            <summary>
            Gets the target assembly
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.ResourceFiles">
            <summary>
            Gets a collection contaning all resource files
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection">
            <summary>
            Custom collection class for AssemblyResourceReader
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.#ctor(SeeingSharp.Util.AssemblyResourceReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.ContainsResourceFile(System.String)">
            <summary>
            Is the given resource file available?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.GetEnumerator">
            <summary>
            IEnumerable implementation
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable implementation
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.Count">
            <summary>
            Gets total count of resource files
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.Item(System.Int32)">
            <summary>
            Gets the AssemblyResourceInfo object at the given index
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceReader.ResourceInfoCollection.Item(System.String)">
            <summary>
            Gets the AssemblyResourceInfo object with the given key
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceUriBuilder.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.AssemblyResourceUriBuilder"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="isMainAssembly">if set to <c>true</c> [is main assembly].</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceUriBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceUriBuilder.GetUri">
            <summary>
            Builds the Uri object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.#ctor(SeeingSharp.Util.AssemblyResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.AssemblyResourceLinkSource" /> class.
            </summary>
            <param name="resourceLink">The link to the resource.</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.op_Implicit(SeeingSharp.Util.AssemblyResourceLink)~SeeingSharp.Util.AssemblyResourceLinkSource">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Util.AssemblyResourceLink"/> to <see cref="T:SeeingSharp.Util.AssemblyResourceLinkSource"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets an object pointing to a file at the same location (e. g. the same directory).
            </summary>
            <param name="newFileName">The new file name for which to get the ResourceLink object.</param>
            <param name="subdirectories">The subdirectory path to the file (optional). This parameter may not be supported by all ResourceLink implementations!</param>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.OpenOutputStream">
            <summary>
            Opens an output stream to the current stream source.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.OpenInputStreamAsync">
            <summary>
            Opens the input stream to the described resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.AssemblyResourceLinkSource.OpenInputStream">
            <summary>
            Opens a stream to the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLinkSource.FileExtension">
            <summary>
            Gets the file extension of the resource we target to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLinkSource.SupportsAsync">
            <summary>
            Are async operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.AssemblyResourceLinkSource.SupportsSync">
            <summary>
            Are synchronous operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.#ctor(Windows.Storage.StorageFile,Windows.Storage.StorageFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.StorageFileResourceLink"/> class.
            </summary>
            <param name="storageFile">The reference to the WinRT StorageFile object.</param>
            <param name="parentFolder">The parent folder which contains the given file.</param>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.op_Implicit(Windows.Storage.StorageFile)~SeeingSharp.Util.StorageFileResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:Windows.Storage.StorageFile"/> to <see cref="T:SeeingSharp.Util.StorageFileResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets an object pointing to a file at the same location (e. g. the same directory).
            </summary>
            <param name="newFileName">The new file name for which to get the ResourceLink object.</param>
            <param name="subdirectories">The subdirectory path to the file (optional). This parameter may not be supported by all ResourceLink implementations!</param>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.OpenInputStream">
            <summary>
            Opens a stream to the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.OpenInputStreamAsync">
            <summary>
            Opens the input stream to the described resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.StorageFileResourceLink.OpenOutputStream">
            <summary>
            Opens an output stream to the current stream source.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StorageFileResourceLink.FileExtension">
            <summary>
            Gets the file extension of the resource we target to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StorageFileResourceLink.SupportsAsync">
            <summary>
            Are async operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StorageFileResourceLink.SupportsSync">
            <summary>
            Are synchronous operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.#ctor(System.Func{System.IO.Stream},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.StreamFactoryResourceLink" /> class.
            </summary>
            <param name="streamFactory">The factory method which creates the stream object.</param>
            <param name="fileName">The name of the virtual file.</param>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.op_Implicit(System.Func{System.IO.Stream})~SeeingSharp.Util.StreamFactoryResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Func`1"/> to <see cref="T:SeeingSharp.Util.StreamFactoryResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets an object pointing to a file at the same location (e. g. the same directory).
            </summary>
            <param name="newFileName">The new file name for which to get the ResourceLink object.</param>
            <param name="subdirectories">The subdirectory path to the file (optional). This parameter may not be supported by all ResourceLink implementations!</param>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.OpenOutputStream">
            <summary>
            Opens an output stream to the current stream source.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.OpenInputStreamAsync">
            <summary>
            Opens the input stream to the described resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.StreamFactoryResourceLink.OpenInputStream">
            <summary>
            Opens a stream to the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StreamFactoryResourceLink.FileExtension">
            <summary>
            Gets the file extension of the resource we target to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StreamFactoryResourceLink.SupportsAsync">
            <summary>
            Are async operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.StreamFactoryResourceLink.SupportsSync">
            <summary>
            Are synchronous operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.UriResourceLink"/> class.
            </summary>
            <param name="uri">The uri from which to read.</param>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.#ctor(SeeingSharp.Util.AssemblyResourceUriBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.UriResourceLink"/> class.
            </summary>
            <param name="uriBuilder">The URI builder.</param>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.op_Implicit(System.Uri)~SeeingSharp.Util.UriResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:SeeingSharp.Util.UriResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.op_Implicit(SeeingSharp.Util.AssemblyResourceUriBuilder)~SeeingSharp.Util.UriResourceLink">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Util.AssemblyResourceUriBuilder"/> to <see cref="T:SeeingSharp.Util.UriResourceLink"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.GetForAnotherFile(System.String,System.String[])">
            <summary>
            Gets an object pointing to a file at the same location (e. g. the same directory).
            </summary>
            <param name="newFileName">The new file name for which to get the ResourceLink object.</param>
            <param name="subdirectories">The subdirectory path to the file (optional). This parameter may not be supported by all ResourceLink implementations!</param>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.OpenOutputStream">
            <summary>
            Opens an output stream to the current stream source.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.OpenInputStreamAsync">
            <summary>
            Opens the input stream to the described resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.UriResourceLink.OpenInputStream">
            <summary>
            Opens a stream to the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.UriResourceLink.FileExtension">
            <summary>
            Gets the file extension of the resource we target to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.UriResourceLink.SupportsAsync">
            <summary>
            Are async operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.UriResourceLink.SupportsSync">
            <summary>
            Are synchronous operations supported on this ResourceLink?
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.MessagePublishException">
            <summary>
            An exception info holding all information about exceptions occurred during publishing a message.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.MessagePublishException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.MessagePublishException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SeeingSharp.Util.MessagePublishException.#ctor(System.Type,System.Collections.Generic.List{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.MessagePublishException"/> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="publishExceptions">Exceptions raised during publish process.</param>
        </member>
        <member name="P:SeeingSharp.Util.MessagePublishException.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessagePublishException.PublishExceptions">
            <summary>
            Gets a list containing all exceptions.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.MessageSubscription">
            <summary>
            This class holds all information about message subscriptions. It implements IDisposable for unsubscribing
            from the message.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.MessageSubscription.#ctor(SeeingSharp.Util.SeeingSharpMessenger,System.Type,System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.MessageSubscription"/> class.
            </summary>
            <param name="Messenger">The messenger.</param>
            <param name="messageType">Type of the message.</param>
            <param name="targetHandler">The target handler.</param>
        </member>
        <member name="M:SeeingSharp.Util.MessageSubscription.Unsubscribe">
            <summary>
            Unsubscribes this subscription.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.MessageSubscription.Publish``1(``0)">
            <summary>
            Sends the given message to the target.
            </summary>
            <typeparam name="MessageType">Type of the message.</typeparam>
            <param name="message">The message to be published.</param>
        </member>
        <member name="M:SeeingSharp.Util.MessageSubscription.Clear">
            <summary>
            Clears this message.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.MessageSubscription.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessageSubscription.IsDisposed">
            <summary>
            Is this subscription valid?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessageSubscription.Messenger">
            <summary>
            Gets the corresponding Messenger object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessageSubscription.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessageSubscription.MessageTypeName">
            <summary>
            Gets the name of the message type.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.MessageSubscription.TargetObjectName">
            <summary>
            Gets the name of the target object.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.SeeingSharpMessage">
            <summary>
            Base class of all messages sent and received through ApplicationMessenger class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessage.GetAsyncRoutingTargetThreads">
            <summary>
            Gets a list containing all target threads for message routing.
            An empty list means that no routing logic applies.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessage.GetAsyncRoutingTargetThreadsOfMessageType(System.Type)">
            <summary>
            Gets a list containing all target threads for message routing.
            An empty list means that no routing logic applies.
            </summary>
            <param name="messageType">The type of the message.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessage.GetPossibleSourceThreads">
            <summary>
            Gets a list containing all possible source threads of this message.
            An empty list means that every thread can fire this message
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessage.GetPossibleSourceThreadsOfMessageType(System.Type)">
            <summary>
            Gets a list containing all possible source threads of this message.
            An empty list means that every thread can fire this message
            </summary>
            <param name="messageType">The type of the message.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessage.WrapText(System.String,System.Int32,System.String)">
            <summary>
            Helper method which wraps the given text for display within documentation string.
            </summary>
            <param name="text">The text to be wrapped.</param>
            <param name="maxCharactersPerLine">The maximum count of characters in one line.</param>
            <param name="lineHeader">The line header to append on the beginning.</param>
        </member>
        <member name="T:SeeingSharp.Util.SeeingSharpMessenger">
            <summary>
            Main class for sending/receiving messages.
            This class followes the Messenger pattern but modifies it on some parts like 
            thread synchronization.
            What 'messenger' actually is, see here a short explanation: http://stackoverflow.com/questions/22747954/mvvm-light-toolkit-messenger-uses-event-aggregator-or-mediator-pattern
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpMessenger.CustomPublishExceptionHandler">
            <summary>
            Gets or sets a custom exception handler which is used globally.
            Return true to skip default exception behavior (exception is thrown to publisher by default).
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.#cctor">
            <summary>
            Initializes the <see cref="T:SeeingSharp.Util.SeeingSharpMessenger" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.SeeingSharpMessenger"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.GetByName(System.String)">
            <summary>
            Gets the SeeingSharpMessenger by the given name.
            </summary>
            <param name="messengerName">The name of the messenger.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.TryGetByName(System.String)">
            <summary>
            Gets the SeeingSharpMessenger by the given name.
            </summary>
            <param name="messengerName">The name of the messenger.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.ApplyForGlobalSynchronization(SeeingSharp.Util.ObjectThread)">
            <summary>
            Sets all required threading properties based on the given target thread.
            The name of the messenger is directly taken from the given ObjectThread.
            </summary>
            <param name="targetThread">The thread on which this Messanger should work on.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.ApplyForGlobalSynchronization(SeeingSharp.Util.SeeingSharpMessageThreadingBehavior,System.String,System.Threading.SynchronizationContext)">
            <summary>
            Sets all required synchronization properties.
            </summary>
            <param name="checkBehavior">Defines the checking behavior for Publish calls.</param>
            <param name="messengerName">The name by which this messenger should be registered.</param>
            <param name="syncContext">The synchronization context to be used.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.DiscardGlobalSynchronization">
            <summary>
            Clears all synchronization options.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.GetAllSubscriptions">
            <summary>
            Gets a collection containing all active subscriptions.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.WaitForMessageAsync``1">
            <summary>
            Waits for the given message.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.SubscribeAll(System.Object)">
            <summary>
            Subscribes all receiver-methods of the given target object to this Messenger.
            </summary>
            <param name="targetObject">The target object which is to subscribe..</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes to the given MessageType.
            </summary>
            <typeparam name="MessageType">Type of the message.</typeparam>
            <param name="actionOnMessage">Action to perform on incoming message.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.SubscribeWhen``1(System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Subscribes the given MessageType and executes the action only when the condition is true.
            </summary>
            <typeparam name="MessageType">The type of the message type.</typeparam>
            <param name="condition">The condition.</param>
            <param name="actionOnMessage">The messenger.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.Subscribe(System.Delegate,System.Type)">
            <summary>
            Subscribes to the given message type.
            </summary>
            <param name="messageType">The type of the message.</param>
            <param name="actionOnMessage">Action to perform on incoming message.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.Unsubscribe(SeeingSharp.Util.MessageSubscription)">
            <summary>
            Clears the given MessageSubscription.
            </summary>
            <param name="messageSubscription">The subscription to clear.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.CountSubscriptionsForMessage``1">
            <summary>
            Counts all message subscriptions for the given message type.
            </summary>
            <typeparam name="MessageType">The type of the message for which to count all subscriptions.</typeparam>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.BeginPublish``1">
            <summary>
            Sends the given message to all subscribers (asynchonous processing).
            There is no possibility here to wait for the answer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.BeginPublish``1(``0)">
            <summary>
            Sends the given message to all subscribers (asynchonous processing).
            There is no possibility here to wait for the answer.
            </summary>
            <typeparam name="MessageType">The type of the essage type.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.PublishAsync``1">
            <summary>
            Sends the given message to all subscribers (asynchonous processing).
            The returned task waits for all synchronous subscriptions.
            </summary>
            <typeparam name="MessageType">The type of the message.</typeparam>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.PublishAsync``1(``0)">
            <summary>
            Sends the given message to all subscribers (asynchonous processing).
            The returned task waits for all synchronous subscriptions.
            </summary>
            <typeparam name="MessageType">The type of the message.</typeparam>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.Publish``1">
            <summary>
            Sends the given message to all subscribers (synchonous processing).
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.Publish``1(``0)">
            <summary>
            Sends the given message to all subscribers (synchonous processing).
            </summary>
            <typeparam name="MessageType">Type of the message.</typeparam>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.PublishInternal``1(``0,System.Boolean)">
            <summary>
            Sends the given message to all subscribers (synchonous processing).
            </summary>
            <typeparam name="MessageType">Type of the message.</typeparam>
            <param name="message">The message to send.</param>
            <param name="isInitialCall">Is this one the initial call to publish? (false if we are coming from async routing)</param>
        </member>
        <member name="M:SeeingSharp.Util.SeeingSharpMessenger.CompareSynchronizationContexts">
            <summary>
            Compares the SynchronizationContext of the current thread and of this messenger instance.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.SeeingSharpMessenger.SyncContext">
            <summary>
            Gets or sets the synchronization context on which to publish all messages.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.SeeingSharpMessenger.ThreadingBehavior">
            <summary>
            Gets the current threading behavior of this Messenger.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.SeeingSharpMessenger.MainThreadName">
            <summary>
            Gets the name of the associated thread.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.SeeingSharpMessenger.CountSubscriptions">
            <summary>
            Counts all message subscriptions.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.SeeingSharpMessenger.CountGlobalMessengers">
            <summary>
            Gets the total count of globally registered messengers.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.SeeingSharpMessageThreadingBehavior">
            <summary>
            This enum describes the threading behavior of a Messenger.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpMessageThreadingBehavior.Ignore">
            <summary>
            Ignore threading. Just use default lock on registration list.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpMessageThreadingBehavior.EnsureMainSyncContextOnSyncCalls">
            <summary>
            Ensures that the main SynchronizationContext is set when 
            this Messenger is used on synchronous calls.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.ICheckDisposed">
            <summary>
            An interface which can return the disposed state of an object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpLanguageKey.Default">
            <summary>
            Default means that no language is specified.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpLanguageKey.EN">
            <summary>
            A key for all english speaking regions.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.SeeingSharpLanguageKey.DE">
            <summary>
            A key for all german speaking regions.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.DataObjectValidationError.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.DataObjectValidationError"/> class.
            </summary>
            <param name="propertyInternalName">Name of the property internal.</param>
            <param name="propertyPublicName">Name of the property public.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:SeeingSharp.Util.DataObjectValidator.Validate(SeeingSharp.Util.PropertyChangedBase)">
            <summary>
            Validates the given dataobject.
            </summary>
            <param name="dataObject">The object to be validated.</param>
        </member>
        <member name="T:SeeingSharp.Util.DelegateCommand">
            <summary>
            A delegate command without any parameters.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.DelegateCommand`1">
            <summary>
            A delegate command which receives one parameter.
            </summary>
            <typeparam name="T">The expected type of the parameter.</typeparam>
        </member>
        <member name="E:SeeingSharp.Util.PropertyChangedBase.PropertyChanged">
            <summary>
            Raises when one of the public properties have changed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.GetMemberDisplayName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the display name of the property described by the given expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPropertyExpression"></param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.GetMemberDisplayName(System.String)">
            <summary>
            Gets the display name of the given property.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.EnsureNotNull(System.String)">
            <summary>
            Ensures that the given string is not null,
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of the member the given expression points to.
            </summary>
            <typeparam name="T">Type of the mebmer.</typeparam>
            <param name="getMemberExpression">The expression pointing to the member.</param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the PropertyChanged event using the member within the given expression.
            </summary>
            <typeparam name="T">Type of the member.</typeparam>
            <param name="getPropertyExpression">The linq epxression to parse.</param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property the given expression points to.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="getPropertyExpression">The expression that points to the property.</param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the foeöd the given expression points to.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="getPropertyExpression">The expression that points to the field.</param>
        </member>
        <member name="M:SeeingSharp.Util.PropertyChangedBase.RaisePropertyChanged(System.String)">
            <summary>
            Notifies a changed property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ViewModelBase"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.TryGetViewService``1">
            <summary>
            Tries to get the view service that implements the given type.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.HasPropertyError``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Is there an error on the given property?
            </summary>
            <param name="getPropertyExpression">An expression that points to the target property.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.HasPropertyError(System.String)">
            <summary>
            Is there an error on the given property?
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.HasPropertyError">
            <summary>
            Is there any error on one of the properties of this object?
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.GetPropertyErrorCount">
            <summary>
            Gets total count of property errors.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.FormatString(System.String)">
            <summary>
            Formats the given string value.
            </summary>
            <param name="value">The value to format.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.ClearErrors">
            <summary>
            Clears all errors.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.Validate">
            <summary>
            Validates this DataObject.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.Validate(System.Object)">
            <summary>
            Validates this DataObject.
            </summary>
            <param name="dataCore">Corresponding DataCore (may be null).</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.PerformValidation(System.Object)">
            <summary>
            Performs validation (use this[ColumnName] to get/set data errors).
            </summary>
            <param name="dataCore">Corresponding DataCore (may be null).</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.GetPropertyError``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the error string of the given property name.
            </summary>
            <param name="getPropertyFunc">A function that points to the property.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.GetPropertyError(System.String)">
            <summary>
            Gets the error string of the given property name.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.SetDataError(System.String,System.String)">
            <summary>
            Sets the given error string for the given property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="error">The error to set.</param>
        </member>
        <member name="M:SeeingSharp.Util.ViewModelBase.SetDataError``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Sets the given error string for the given property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="getPropertyExpression">An expression describing the property.</param>
            <param name="error">The error to set.</param>
        </member>
        <member name="P:SeeingSharp.Util.ViewModelBase.SuppressChangeReports">
            <summary>
            Suppress all change reports (calls to PropertyChanged event)?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ViewModelBase.ContainsErrors">
            <summary>
            Does this model contain any error?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ViewModelBase.Error">
            <summary>
            Gets a common data error text for this model.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ViewModelBase.ErrorWithoutHtml">
            <summary>
            Gets a common data error without html tags.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ViewModelBase.Messenger">
            <summary>
            Gets the Messenger of the UI thread.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.BooleanToVisibilityConverter">
            <summary>
            Converts a Boolean into a Visibility.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.BooleanToVisibilityConverter.IsReversed">
            <summary>
            If set to True, conversion is reversed: True will become Collapsed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.PerformanceAnalyzer"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.NotifyFlowRateOccurrence(System.String)">
            <summary>
            Notifies one occurrence of the FlowRate measurenemt with the given name.
            </summary>
            <param name="calculatorName">The name of the calculator this occurrence belongs to.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.NotifyActivityDuration(System.String,System.Int64)">
            <summary>
            Notifies that the given activity took the given count of ticks.
            </summary>
            <param name="activity">The Activity to report to.</param>
            <param name="durationTicks">Total count of ticks to be notified.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.ExecuteAndMeasureActivityDuration(System.String,System.Action)">
            <summary>
            Executes the given action and measures the time it took in total.
            </summary>
            <param name="activity">The Activity to report to.</param>
            <param name="actionToExecute">The action to be executed and measured.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.BeginMeasureActivityDuration(System.String)">
            <summary>
            Begins measuring the duration of the given activity (end of the duration is when Dispose gets called on the result).
            </summary>
            <param name="activity">The activity name to be measured.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the main loop of this OnlineKpiContainer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.RefreshUICollectionsAsync">
            <summary>
            Refreshes the gui using the configured SynchronizationContext.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.RefreshUICollections">
            <summary>
            Refreshes the gui in a sync call.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.CalculateValuesAsync(System.DateTime)">
            <summary>
            Triggers calculation of 
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.GetKpiCalculator``1(System.String)">
            <summary>
            Gets the calculator for the given activity.
            </summary>
            <typeparam name="T">The type of the calculator to get.</typeparam>
            <param name="activity">The name of the activity.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.EnsureNotRunning">
            <summary>
            Check method used for setter methods.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.DelayTimeMS">
            <summary>
            Gets or sets the delay time (milliseconds) of the kpi calculate loop.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.SyncContext">
            <summary>
            Gets or sets the current SynchronizationContext object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.IsRunning">
            <summary>
            Is the main loop currently running?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.ValueInterval">
            <summary>
            The interval for which values are produced.
            (Calculating is triggered after value interval).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.CalculationInterval">
            <summary>
            Values collected over this time interval are used for calculation.
            (Calculation uses values of this time interval).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.MaxCountHistoricalEntries">
            <summary>
            The Maximum count of historical entries.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.GenerateHistoricalCollection">
            <summary>
            Should this class fill the collection containing historical entries?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.GenerateCurrentValueCollection">
            <summary>
            Should this class fill the collection containing current entries?
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.UIDurationKpisHistorical">
            <summary>
            Gets historical duration results (if activated).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.UIDurationKpisCurrents">
            <summary>
            Gets current duration results (if activated).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.UIFlowRateKpisHistorical">
            <summary>
            Gets historical flowrate results (if activated).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzer.UIFlowRateKpisCurrents">
            <summary>
            Gets current flowrate results (if activated).
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.PerformanceAnalyzer.CalculatorInfo">
            <summary>
            Helper class for holding relevant information of the value calculators.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.HandleResultForUI(SeeingSharp.Util.PerformanceAnalyzeResultBase)">
            <summary>
            Handles the given result object for the UI layer.
            </summary>
            <param name="actResult">The result to be processed.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzer.HandleResultForUIForFlowRateKpi``1(``0,System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Handles the given result object for the UI layer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceAnalyzeResultBase.#ctor(SeeingSharp.Util.PerformanceCalculatorBase,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.PerformanceAnalyzeResultBase"/> class.
            </summary>
            <param name="calculator">The Calculator this result object belongs to.</param>
            <param name="keyTimestamp">The key of this result object..</param>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzeResultBase.Calculator">
            <summary>
            Gets the calculator this value was generated on.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzeResultBase.CalculatorName">
            <summary>
            Gets the name of the calculator.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceAnalyzeResultBase.KeyTimestamp">
            <summary>
            Gets the key of this kpi.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceCalculatorBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.PerformanceCalculatorBase"/> class.
            </summary>
            <param name="calculatorName">Name of the calculator.</param>
        </member>
        <member name="M:SeeingSharp.Util.PerformanceCalculatorBase.Calculate(System.DateTime,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Calculates a new kpi value based on given timestamp parameters.
            </summary>
            <param name="keyTimeStamp">The timestamp which is used for the result object.</param>
            <param name="minTimeStamp">The timestamp which is the minimum for current calculation step.</param>
            <param name="maxTimeStamp">The maximum timestamp up to which to calculate the next kpi.</param>
            <param name="calculationInterval">The interval from which to take all values from.</param>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceCalculatorBase.Parent">
            <summary>
            Gets the parent kpi container.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.PerformanceCalculatorBase.CalculatorName">
            <summary>
            Gets the name of this calculator.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.DurationPerformanceCalculator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.DurationPerformanceCalculator"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.DurationPerformanceCalculator.NotifyActivityDuration(System.Int64)">
            <summary>
            Notifies the a done activity and it's duration.
            </summary>
            <param name="durationTicks">Total ticks the activity took.</param>
        </member>
        <member name="M:SeeingSharp.Util.DurationPerformanceCalculator.Calculate(System.DateTime,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Calculates a new kpi value.
            </summary>
            <param name="keyTimeStamp">The timestamp which is used for the result object.</param>
            <param name="minTimeStamp">The timestamp which is the minimum for current calculation step.</param>
            <param name="maxTimeStamp">The maximum timestamp up to which to calculate the next kpi.</param>
            <param name="calculationInterval">The interval from which to take all values from.</param>
        </member>
        <member name="M:SeeingSharp.Util.DurationPerformanceResult.#ctor(SeeingSharp.Util.DurationPerformanceCalculator,System.DateTime,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.DurationPerformanceResult"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.DurationPerformanceResult.Fps">
            <summary>
            Gets the FPS value.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.DurationPerformanceResult.SumAverageMSDouble">
            <summary>
            Gets the average millisecond value as a double.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.FlowRatePerformanceCalculator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.FlowRatePerformanceCalculator"/> class.
            </summary>
            <param name="calculatorName">Name of the calculator.</param>
        </member>
        <member name="M:SeeingSharp.Util.FlowRatePerformanceCalculator.NotifyOccurrence">
            <summary>
            Notifies a new occurrence of the activity.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.FlowRatePerformanceCalculator.NotifyOccurrence(System.DateTime)">
            <summary>
            Notifies a new occurrence of the avitivity.
            </summary>
            <param name="timestamp">The timestamp of the occurrence.</param>
        </member>
        <member name="M:SeeingSharp.Util.FlowRatePerformanceCalculator.Calculate(System.DateTime,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Calculates a new kpi value based on given timestamp parameters.
            </summary>
            <param name="keyTimeStamp">The timestamp which is used for the result object.</param>
            <param name="minTimeStamp">The timestamp which is the minimum for current calculation step.</param>
            <param name="maxTimeStamp">The maximum timestamp up to which to calculate the next kpi.</param>
            <param name="calculationInterval">The interval from which to take all values from.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Util.FlowRatePerformanceResult.#ctor(SeeingSharp.Util.FlowRatePerformanceCalculator,System.DateTime,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.FlowRatePerformanceResult"/> class.
            </summary>
            <param name="calculator">The calculator.</param>
            <param name="keyTimestamp">The key timestamp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SeeingSharp.Util.FlowRatePerformanceResult.Value">
            <summary>
            Gets the value that was calculated.
            </summary>
        </member>
        <member name="E:SeeingSharp.Util.ObjectThread.Starting">
            <summary>
            Called when the thread ist starting.
            </summary>
        </member>
        <member name="E:SeeingSharp.Util.ObjectThread.Tick">
            <summary>
            Called on each heartbeat.
            </summary>
        </member>
        <member name="E:SeeingSharp.Util.ObjectThread.Stopping">
            <summary>
            Called when the thread is stopping.
            </summary>
        </member>
        <member name="E:SeeingSharp.Util.ObjectThread.ThreadException">
            <summary>
            Called when an unhandled exception occurred.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThread"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThread"/> class.
            </summary>
            <param name="name">The name of the generated thread.</param>
            <param name="heartBeat">The initial heartbeat of the ObjectThread.</param>
            <param name="createMessenger">Do automatically create a messenger for this thread?</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.Start">
            <summary>
            Starts the thread.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.StartAsync">
            <summary>
            Starts this thread. The returned task is completed when starting is finished.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.StopAsync(System.Int32)">
            <summary>
            Stops the asynchronous.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.Trigger">
            <summary>
            Triggers a new heartbeat.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.InvokeAsync(System.Action)">
            <summary>
            Invokes the given delegate within the thread of this object.
            </summary>
            <param name="actionToInvoke">The delegate to invoke.</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.OnStarting(System.EventArgs)">
            <summary>
            Thread is starting.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.OnTick(System.EventArgs)">
            <summary>
            Called on each tick.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.OnThreadException(SeeingSharp.Util.ObjectThreadExceptionEventArgs)">
            <summary>
            Called on each occurred exception.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.OnStopping(System.EventArgs)">
            <summary>
            Thread is stopping.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.ObjectThreadMainMethod">
            <summary>
            The thread's main method.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.ThreadTime">
            <summary>
            Gets current thread time.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.Timer">
            <summary>
            Gets current timer of the thread.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.SyncContext">
            <summary>
            Gets the current SynchronizationContext object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.Messenger">
            <summary>
            Gets the Messenger which belongs to this thread.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.Name">
            <summary>
            Gets the name of this thread.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThread.HeartBeat">
            <summary>
            Gets or sets the thread's heartbeat.
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.ObjectThread.ObjectThreadSynchronizationContext">
            <summary>
            Synchronization object for threads within ObjectThread class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.ObjectThreadSynchronizationContext.#ctor(SeeingSharp.Util.ObjectThread)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThread.ObjectThreadSynchronizationContext"/> class.
            </summary>
            <param name="owner">The owner of this context.</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.ObjectThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThread.ObjectThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            When overridden in a derived class, dispatches a synchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThreadTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThreadTimer"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThreadTimer.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThreadTimer"/> class.
            </summary>
            <param name="startTimeStamp">The start time stamp.</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThreadTimer.#ctor(System.DateTime,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThreadTimer"/> class.
            </summary>
            <param name="startTimeStamp">The start time stamp.</param>
            <param name="speedFactor">Speed factor (standard: 1.0).</param>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThreadTimer.Add(System.TimeSpan)">
            <summary>
            Adds the given timespan to the timer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThreadTimer.Now">
            <summary>
            Gets current time (thread-time, not pc-time!).
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThreadTimer.SpeedFactor">
            <summary>
            Gets or sets current speed factor of the timer (default: 1.0).
            </summary>
        </member>
        <member name="T:SeeingSharp.Util.ObjectThreadState">
            <summary>
            Enumeration containing all possible states of a ObjectThread object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.ObjectThreadState.None">
            <summary>
            Threre is no thread created at the moment.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.ObjectThreadState.Starting">
            <summary>
            The thread is starting.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.ObjectThreadState.Running">
            <summary>
            The thread is running.
            </summary>
        </member>
        <member name="F:SeeingSharp.Util.ObjectThreadState.Stopping">
            <summary>
            The thread is stopping.
            </summary>
        </member>
        <member name="M:SeeingSharp.Util.ObjectThreadExceptionEventArgs.#ctor(SeeingSharp.Util.ObjectThreadState,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Util.ObjectThreadExceptionEventArgs"/> class.
            </summary>
            <param name="threadState">The current state of the <see cref="T:SeeingSharp.Util.ObjectThread"/>.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThreadExceptionEventArgs.Exception">
            <summary>
            Gets the occurred exception.
            </summary>
        </member>
        <member name="P:SeeingSharp.Util.ObjectThreadExceptionEventArgs.State">
            <summary>
            Gets current state of the thread.
            </summary>
        </member>
        <member name="M:SeeingSharp.View.IViewService.SetViewServiceHost(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Tells the ViewService which FrameworkElement it is hosted by.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="M:SeeingSharp.View.ViewServiceNode.#ctor(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.View.ViewServiceNode"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.View.ViewServiceNode.OnViewModel_ViewServiceRequest(System.Object,SeeingSharp.Util.ViewServiceRequestEventArgs)">
            <summary>
            Called when the viewmodel request a view service.
            </summary>
        </member>
        <member name="M:SeeingSharp.MathExtensions.GetAllPoints(System.Collections.Generic.IEnumerable{SeeingSharp.Line})">
            <summary>
            Gets all points contained in given line collection.
            </summary>
            <param name="lines">A list containing all lines.</param>
        </member>
        <member name="T:SeeingSharp.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Redefine(System.Numerics.Vector3[])">
            <summary>
            Redefines this bounding box based on given points.
            </summary>
            <param name="points">All points to apply.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox.MergeWith(System.Numerics.Vector3)">
            <summary>
            Expands this AxisAlignedBox so that it contains the given location.
            </summary>
            <param name="newLocation">New location to be merged to this AxisAlignedBox.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox.MergeWith(SeeingSharp.BoundingBox)">
            <summary>
            Merges this box with the given one
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBottomLeftMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of bottom-left border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBottomRightMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of bottom-right border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBottomFrontMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of bottom-front border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBottomBackMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of bottom-back border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetMiddleCoordinate">
            <summary>
            Gets the coordinate of the middle of the box.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetTopMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of top rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetTopLeftMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of top-left border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetTopRightMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of top-right border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetTopFrontMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of top-front border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetTopBackMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of top-back border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetFrontMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of front rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBackMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of back rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetLeftMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of left rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetLeftFrontMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of left-front border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetLeftBackMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of left-back border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetRightMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of right rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetRightFrontMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of right-front border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetRightBackMiddleCoordinate">
            <summary>
            Gets the coordinate of middle of right-back border.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetMiddleCenter">
            <summary>
            Gets the middle center of the box.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetBottomCenter">
            <summary>
            Gets the bottom center of the box.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.BuildLineListForBorders">
            <summary>
            Builds a line list containing lines for all borders of this box.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.IsEmpty">
            <summary>
            Is this box empty?
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetSize">
            <summary>
            Gets the size of this box.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerA">
            <summary>
            Gets the corner A (lower left front).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerB">
            <summary>
            Gets the corner B (lower right front).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerC">
            <summary>
            Gets the corner C (lower right back).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerD">
            <summary>
            Gets the corner D (lower left back).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerE">
            <summary>
            Gets the corner E (upper left front).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerF">
            <summary>
            Gets the corner F (upper right front).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerG">
            <summary>
            Gets the corner G (upper right back).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.CornerH">
            <summary>
            Gets the corner H (upper left back).
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.LowerA">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.LowerB">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.LowerC">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.LowerD">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.UpperA">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.UpperB">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.UpperC">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.BoundingBox.UpperD">
             <summary>
            
             </summary>
        </member>
        <member name="F:SeeingSharp.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:SeeingSharp.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetCorners(System.Numerics.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or Zero if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Intersects(SeeingSharp.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(SeeingSharp.BoundingBox)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Contains(SeeingSharp.BoundingSphere)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.FromPoints(System.Numerics.Vector3[],SeeingSharp.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SeeingSharp.BoundingBox.FromPoints(System.Numerics.Vector3[])">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SeeingSharp.BoundingBox.FromSphere(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox.FromSphere(SeeingSharp.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Merge(SeeingSharp.BoundingBox@,SeeingSharp.BoundingBox@,SeeingSharp.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Merge(SeeingSharp.BoundingBox,SeeingSharp.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.op_Equality(SeeingSharp.BoundingBox,SeeingSharp.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.op_Inequality(SeeingSharp.BoundingBox,SeeingSharp.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Equals(SeeingSharp.BoundingBox)">
            <summary>
            Determines whether the specified Vector is equal to this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.BoundingBox2D" /> struct.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SeeingSharp.BoundingBox2D.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingBox2D.IsContainedBy(SeeingSharp.BoundingBox2D)">
            <summary>
            Is this box contained by the given one?
            </summary>
            <param name="otherOne"></param>
        </member>
        <member name="M:SeeingSharp.BoundingBox2D.IsContainedBy(SeeingSharp.BoundingBox2D,SeeingSharp.BoundingBox2D)">
            <summary>
            Is the given smaller box contained by the given bigger one?
            </summary>
            <param name="smallerBox"></param>
            <param name="biggerBox"></param>
        </member>
        <member name="P:SeeingSharp.BoundingBox2D.IsEmpty">
            <summary>
            Is this box empty?
            </summary>
        </member>
        <member name="T:SeeingSharp.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SeeingSharp.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:SeeingSharp.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Intersects(SeeingSharp.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Contains(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Contains(SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Contains(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.FromPoints(System.Numerics.Vector3[],System.Int32,System.Int32,SeeingSharp.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            start
            or
            count
            </exception>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.FromPoints(System.Numerics.Vector3[],SeeingSharp.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.FromPoints(System.Numerics.Vector3[])">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.FromBox(SeeingSharp.BoundingBox@,SeeingSharp.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.FromBox(SeeingSharp.BoundingBox)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Merge(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Merge(SeeingSharp.BoundingSphere,SeeingSharp.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:SeeingSharp.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.op_Equality(SeeingSharp.BoundingSphere,SeeingSharp.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.op_Inequality(SeeingSharp.BoundingSphere,SeeingSharp.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Equals(SeeingSharp.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.Color">
            <summary>
            Represents a 32-bit color (4 bytes) in the form of RGBA (in byte order: R, G, B, A).
            </summary>
            <summary>
            List of predefined <see cref="T:SeeingSharp.Color"/>.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.  Alpha is set to 255.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.  Alpha is set to 255.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct. Alpha is set to 255.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SeeingSharp.Color.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the alpha, red, green, and blue components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Color.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Color.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToColor3">
            <summary>
            Converts the color into a three component color.
            </summary>
            <returns>A three component color containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color in RGBA order.</returns>
        </member>
        <member name="M:SeeingSharp.Color.GetBrightness">
            <summary>
            Gets the brightness.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.Color.GetHue">
            <summary>
            Gets the hue.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.Color.GetSaturation">
            <summary>
            Gets the saturation.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.Color.Add(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color.Add(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Subtract(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color.Subtract(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Modulate(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SeeingSharp.Color.Modulate(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Scale(SeeingSharp.Color@,System.Single,SeeingSharp.Color@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SeeingSharp.Color.Scale(SeeingSharp.Color,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Negate(SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SeeingSharp.Color.Negate(SeeingSharp.Color)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Clamp(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.Color.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.FromRgba(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.FromRgba(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Clamp(SeeingSharp.Color,SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Lerp(SeeingSharp.Color@,SeeingSharp.Color@,System.Single,SeeingSharp.Color@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color.Lerp(SeeingSharp.Color,SeeingSharp.Color,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color.SmoothStep(SeeingSharp.Color@,SeeingSharp.Color@,System.Single,SeeingSharp.Color@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color.SmoothStep(SeeingSharp.Color,SeeingSharp.Color,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Max(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SeeingSharp.Color.Max(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.Min(SeeingSharp.Color@,SeeingSharp.Color@,SeeingSharp.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SeeingSharp.Color.Min(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.AdjustContrast(SeeingSharp.Color@,System.Single,SeeingSharp.Color@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color.AdjustContrast(SeeingSharp.Color,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.AdjustSaturation(SeeingSharp.Color@,System.Single,SeeingSharp.Color@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color.AdjustSaturation(SeeingSharp.Color,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Addition(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_UnaryPlus(SeeingSharp.Color)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Subtraction(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_UnaryNegation(SeeingSharp.Color)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Multiply(System.Single,SeeingSharp.Color)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Multiply(SeeingSharp.Color,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Multiply(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Equality(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Inequality(SeeingSharp.Color,SeeingSharp.Color)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color)~SeeingSharp.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color"/> to <see cref="T:SeeingSharp.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.ToColor4">
            <summary>
            Convert this instance to a <see cref="T:SeeingSharp.Color4"/>
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Implicit(SeeingSharp.Color)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(System.Numerics.Vector3)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color3)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color3"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(System.Numerics.Vector4)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color4)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(SeeingSharp.Color)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.op_Explicit(System.Int32)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.Equals(SeeingSharp.Color)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Color"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Color"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Color"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:SeeingSharp.Color.Zero">
            <summary>
            Zero color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="T:SeeingSharp.Color4">
            <summary>
            Represents a color in the form of rgba.
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Transparent">
            <summary>
            Transparent color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.AliceBlue">
            <summary>
            AliceBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.AntiqueWhite">
            <summary>
            AntiqueWhite color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Aqua">
            <summary>
            Aqua color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Aquamarine">
            <summary>
            Aquamarine color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Azure">
            <summary>
            Azure color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Beige">
            <summary>
            Beige color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Bisque">
            <summary>
            Bisque color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.BlanchedAlmond">
            <summary>
            BlanchedAlmond color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.BlueColor">
            <summary>
            Blue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.BlueViolet">
            <summary>
            BlueViolet color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Brown">
            <summary>
            Brown color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.BurlyWood">
            <summary>
            BurlyWood color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.CadetBlue">
            <summary>
            CadetBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Chartreuse">
            <summary>
            Chartreuse color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Chocolate">
            <summary>
            Chocolate color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Coral">
            <summary>
            Coral color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.CornflowerBlue">
            <summary>
            CornflowerBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Cornsilk">
            <summary>
            Cornsilk color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Crimson">
            <summary>
            Crimson color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Cyan">
            <summary>
            Cyan color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkBlue">
            <summary>
            DarkBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkCyan">
            <summary>
            DarkCyan color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkGoldenrod">
            <summary>
            DarkGoldenrod color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkGray">
            <summary>
            DarkGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkGreen">
            <summary>
            DarkGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkKhaki">
            <summary>
            DarkKhaki color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkMagenta">
            <summary>
            DarkMagenta color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkOliveGreen">
            <summary>
            DarkOliveGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkOrange">
            <summary>
            DarkOrange color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkOrchid">
            <summary>
            DarkOrchid color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkRed">
            <summary>
            DarkRed color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkSalmon">
            <summary>
            DarkSalmon color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkSeaGreen">
            <summary>
            DarkSeaGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkSlateBlue">
            <summary>
            DarkSlateBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkSlateGray">
            <summary>
            DarkSlateGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkTurquoise">
            <summary>
            DarkTurquoise color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DarkViolet">
            <summary>
            DarkViolet color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DeepPink">
            <summary>
            DeepPink color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DeepSkyBlue">
            <summary>
            DeepSkyBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DimGray">
            <summary>
            DimGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.DodgerBlue">
            <summary>
            DodgerBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Firebrick">
            <summary>
            Firebrick color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.FloralWhite">
            <summary>
            FloralWhite color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.ForestGreen">
            <summary>
            ForestGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Fuchsia">
            <summary>
            Fuchsia color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Gainsboro">
            <summary>
            Gainsboro color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.GhostWhite">
            <summary>
            GhostWhite color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Gold">
            <summary>
            Gold color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Goldenrod">
            <summary>
            Goldenrod color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Gray">
            <summary>
            Gray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.GreenColor">
            <summary>
            Green color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.GreenYellow">
            <summary>
            GreenYellow color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Honeydew">
            <summary>
            Honeydew color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.HotPink">
            <summary>
            HotPink color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.IndianRed">
            <summary>
            IndianRed color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Indigo">
            <summary>
            Indigo color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Ivory">
            <summary>
            Ivory color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Khaki">
            <summary>
            Khaki color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Lavender">
            <summary>
            Lavender color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LavenderBlush">
            <summary>
            LavenderBlush color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LawnGreen">
            <summary>
            LawnGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LemonChiffon">
            <summary>
            LemonChiffon color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightBlue">
            <summary>
            LightBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightCoral">
            <summary>
            LightCoral color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightCyan">
            <summary>
            LightCyan color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightGray">
            <summary>
            LightGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightGreen">
            <summary>
            LightGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightPink">
            <summary>
            LightPink color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightSalmon">
            <summary>
            LightSalmon color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightSeaGreen">
            <summary>
            LightSeaGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightSkyBlue">
            <summary>
            LightSkyBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightSlateGray">
            <summary>
            LightSlateGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightSteelBlue">
            <summary>
            LightSteelBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LightYellow">
            <summary>
            LightYellow color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Lime">
            <summary>
            Lime color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.LimeGreen">
            <summary>
            LimeGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Linen">
            <summary>
            Linen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Magenta">
            <summary>
            Magenta color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Maroon">
            <summary>
            Maroon color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumAquamarine">
            <summary>
            MediumAquamarine color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumBlue">
            <summary>
            MediumBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumOrchid">
            <summary>
            MediumOrchid color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumPurple">
            <summary>
            MediumPurple color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumSeaGreen">
            <summary>
            MediumSeaGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumSlateBlue">
            <summary>
            MediumSlateBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumSpringGreen">
            <summary>
            MediumSpringGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumTurquoise">
            <summary>
            MediumTurquoise color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MediumVioletRed">
            <summary>
            MediumVioletRed color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MidnightBlue">
            <summary>
            MidnightBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MintCream">
            <summary>
            MintCream color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.MistyRose">
            <summary>
            MistyRose color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Moccasin">
            <summary>
            Moccasin color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.NavajoWhite">
            <summary>
            NavajoWhite color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Navy">
            <summary>
            Navy color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.OldLace">
            <summary>
            OldLace color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Olive">
            <summary>
            Olive color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.OliveDrab">
            <summary>
            OliveDrab color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Orange">
            <summary>
            Orange color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.OrangeRed">
            <summary>
            OrangeRed color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Orchid">
            <summary>
            Orchid color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PaleGoldenrod">
            <summary>
            PaleGoldenrod color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PaleGreen">
            <summary>
            PaleGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PaleTurquoise">
            <summary>
            PaleTurquoise color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PaleVioletRed">
            <summary>
            PaleVioletRed color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PapayaWhip">
            <summary>
            PapayaWhip color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PeachPuff">
            <summary>
            PeachPuff color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Peru">
            <summary>
            Peru color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Pink">
            <summary>
            Pink color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Plum">
            <summary>
            Plum color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.PowderBlue">
            <summary>
            PowderBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Purple">
            <summary>
            Purple color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.RedColor">
            <summary>
            Red color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.RosyBrown">
            <summary>
            RosyBrown color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.RoyalBlue">
            <summary>
            RoyalBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SaddleBrown">
            <summary>
            SaddleBrown color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Salmon">
            <summary>
            Salmon color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SandyBrown">
            <summary>
            SandyBrown color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SeaGreen">
            <summary>
            SeaGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SeaShell">
            <summary>
            SeaShell color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Sienna">
            <summary>
            Sienna color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Silver">
            <summary>
            Silver color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SkyBlue">
            <summary>
            SkyBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SlateBlue">
            <summary>
            SlateBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SlateGray">
            <summary>
            SlateGray color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Snow">
            <summary>
            Snow color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SpringGreen">
            <summary>
            SpringGreen color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.SteelBlue">
            <summary>
            SteelBlue color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Tan">
            <summary>
            Tan color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Teal">
            <summary>
            Teal color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Thistle">
            <summary>
            Thistle color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Tomato">
            <summary>
            Tomato color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Turquoise">
            <summary>
            Turquoise color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Violet">
            <summary>
            Violet color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Wheat">
            <summary>
            Wheat color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.WhiteSmoke">
            <summary>
            WhiteSmoke color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.Yellow">
            <summary>
            Yellow color
            </summary>
        </member>
        <member name="P:SeeingSharp.Color4.YellowGreen">
            <summary>
            YellowGreen color
            </summary>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> class.
            </summary>
            <param name="red">The red.</param>
            <param name="green">The green.</param>
            <param name="blue">The blue.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color"/> class.
            </summary>
            <param name="red">The red.</param>
            <param name="green">The green.</param>
            <param name="blue">The blue.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(Windows.UI.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="winColor">The Windows.UI.Color structure from which to create a Color4.</param>
        </member>
        <member name="M:SeeingSharp.Color4.ToArgb">
            <summary>
            Converts this value to a argb value
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.Black">
            <summary>
            The Black color (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.White">
            <summary>
            The White color (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color4.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="rgba">A packed integer containing all four color components in RGBA order.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(SeeingSharp.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="color">The color this structures will be based on.</param>
        </member>
        <member name="M:SeeingSharp.Color4.#ctor(SeeingSharp.Color3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color4"/> struct.
            </summary>
            <param name="color"><see cref="T:SeeingSharp.Color3"/> used to initialize the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="P:SeeingSharp.Color4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Color4.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Add(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Add(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Subtract(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Subtract(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Modulate(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Modulate(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Scale(SeeingSharp.Color4@,System.Single,SeeingSharp.Color4@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Scale(SeeingSharp.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Negate(SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Negate(SeeingSharp.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Clamp(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Clamp(SeeingSharp.Color4,SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Lerp(SeeingSharp.Color4@,SeeingSharp.Color4@,System.Single,SeeingSharp.Color4@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color4.Lerp(SeeingSharp.Color4,SeeingSharp.Color4,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color4.SmoothStep(SeeingSharp.Color4@,SeeingSharp.Color4@,System.Single,SeeingSharp.Color4@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color4.SmoothStep(SeeingSharp.Color4,SeeingSharp.Color4,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Max(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Max(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.Min(SeeingSharp.Color4@,SeeingSharp.Color4@,SeeingSharp.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SeeingSharp.Color4.Min(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.AdjustContrast(SeeingSharp.Color4@,System.Single,SeeingSharp.Color4@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.AdjustContrast(SeeingSharp.Color4,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.AdjustSaturation(SeeingSharp.Color4@,System.Single,SeeingSharp.Color4@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color4.AdjustSaturation(SeeingSharp.Color4,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Addition(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_UnaryPlus(SeeingSharp.Color4)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Subtraction(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_UnaryNegation(SeeingSharp.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Multiply(System.Single,SeeingSharp.Color4)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Multiply(SeeingSharp.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Multiply(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Equality(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Inequality(SeeingSharp.Color4,SeeingSharp.Color4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(SeeingSharp.Color4)~SeeingSharp.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:SeeingSharp.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(SeeingSharp.Color4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Implicit(SeeingSharp.Color4)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(System.Numerics.Vector3)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(System.Numerics.Vector4)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(SeeingSharp.ColorBGRA)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(SeeingSharp.Color4)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(SeeingSharp.Color4)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.op_Explicit(System.Int32)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.Equals(SeeingSharp.Color4)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Color4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Color4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Color4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.CuttingEarsTriangulator">
            <summary>
            A cutting ears triangulator for simple polygons with no holes. O(n^2)
            This algorithm is based on the implementation of the Helix Toolkit (http://helixtoolkit.codeplex.com/)
            </summary>
            <remarks>
            Regarding the Helix Toolkit:
            Based on http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
            References
            http://en.wikipedia.org/wiki/Polygon_triangulation
            http://computacion.cs.cinvestav.mx/~anzures/geom/triangulation.php
            http://www.codeproject.com/KB/recipes/cspolygontriangulation.aspx
            </remarks>
        </member>
        <member name="F:SeeingSharp.CuttingEarsTriangulator.Epsilon">
            <summary>
            The epsilon.
            </summary>
        </member>
        <member name="M:SeeingSharp.CuttingEarsTriangulator.Triangulate(System.Collections.Generic.IList{System.Numerics.Vector2})">
            <summary>
            Triangulate a polygon using the cutting ears algorithm.
            </summary>
            <remarks>
            The algorithm does not support holes.
            </remarks>
            <param name="contour">
            the polygon contour
            </param>
            <returns>
            collection of triangle Vector2s
            </returns>
        </member>
        <member name="M:SeeingSharp.CuttingEarsTriangulator.Area(System.Collections.Generic.IList{System.Numerics.Vector2})">
            <summary>
            Calculates the area.
            </summary>
            <param name="contour">The contour.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:SeeingSharp.CuttingEarsTriangulator.InsideTriangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Decide if Vector2 (Px,Py) is inside triangle defined by (Ax,Ay) (Bx,By) (Cx,Cy).
            </summary>
            <param name="Ax">
            The ax.
            </param>
            <param name="Ay">
            The ay.
            </param>
            <param name="Bx">
            The bx.
            </param>
            <param name="By">
            The by.
            </param>
            <param name="Cx">
            The cx.
            </param>
            <param name="Cy">
            The cy.
            </param>
            <param name="Px">
            The px.
            </param>
            <param name="Py">
            The py.
            </param>
            <returns>
            The inside triangle.
            </returns>
        </member>
        <member name="M:SeeingSharp.CuttingEarsTriangulator.Snip(System.Collections.Generic.IList{System.Numerics.Vector2},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            The snip.
            </summary>
            <param name="contour">The contour.</param>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <param name="w">The w.</param>
            <param name="n">The n.</param>
            <param name="V">The v.</param>
            <returns>The snip.</returns>
        </member>
        <member name="M:SeeingSharp.EngineMath.Factorial(System.Int32)">
            <summary>
            Calculates the factorial of the given value.
            </summary>
            <param name="value">The value to calculate the factorial of.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.BinomialCoefficient(System.Decimal,System.Decimal)">
            <summary>
            Calculates the binomial coefficient out of the given two values.
            </summary>
            <param name="n">The upper vlaue normally mentioned as 'n'.</param>
            <param name="k">The lower vlaue normally mentioned as 'k'.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.GetAbsoluteAngleRadian(System.Single)">
            <summary>
            Converts the given angle value to an absolute value (e. g. -10° to 350°).
            </summary>
            <param name="angle">The angle to convert.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.GetAboluteAngleDegree(System.Single)">
            <summary>
            Converts the given angle value to an absolute value (e. g. -10° to 350°).
            </summary>
            <param name="angle">The angle to convert.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.DegreeToRadian(System.Single)">
            <summary>
            Converts the given degree value to radian.
            </summary>
            <param name="degreeValue">A angle in degree.</param>
            <returns>The radian value of the angle.</returns>
        </member>
        <member name="M:SeeingSharp.EngineMath.DegreeToRadian(System.Int32)">
            <summary>
            Converts the given degree value to radian.
            </summary>
            <param name="degreeValue">A angle in degree.</param>
            <returns>The radian value of the angle.</returns>
        </member>
        <member name="M:SeeingSharp.EngineMath.RadianToDegree(System.Single)">
            <summary>
            Converts the given radian vlaue to degree.
            </summary>
            <param name="radianValue">A angle in radian.</param>
            <returns>The degree value of the angle.</returns>
        </member>
        <member name="M:SeeingSharp.EngineMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Ensures that the given value is between given min and max value.
            </summary>
            <param name="valueToClamp">The value that should be in range between min and max value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures that the given value is between given min and max value.
            </summary>
            <param name="valueToClamp">The value that should be in range between min and max value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Ensures that the given value is between given min and max value.
            </summary>
            <param name="valueToClamp">The value that should be in range between min and max value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.EqualsWithTolerance(System.Double,System.Double,System.Double)">
            <summary>
            Check for equality between given value with a given tolerance.
            </summary>
            <param name="left">One of the value to be compared.</param>
            <param name="right">One of the value to be compared.</param>
            <param name="tolerance">The tolerance for the comparision.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.EqualsWithTolerance(System.Single,System.Single,System.Single)">
            <summary>
            Check for equality between given value with a given tolerance.
            </summary>
            <param name="left">One of the value to be compared.</param>
            <param name="right">One of the value to be compared.</param>
            <param name="tolerance">The tolerance for the comparision.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.EqualsWithTolerance(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Check for equality between given value with a given tolerance.
            </summary>
            <param name="left">One of the value to be compared.</param>
            <param name="right">One of the value to be compared.</param>
            <param name="tolerance">The tolerance for the comparision.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.ForceNegative(System.Single)">
            <summary>
            Force the given value to be negative.
            </summary>
            <param name="floatValue">The value to be changed.</param>
        </member>
        <member name="M:SeeingSharp.EngineMath.ForcePositive(System.Single)">
            <summary>
            Force the given value to be positive.
            </summary>
            <param name="floatValue">The value to be changed.</param>
        </member>
        <member name="M:SeeingSharp.Line.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Line.EqualsWithTolerance(SeeingSharp.Line)">
            <summary>
            Equality test with a small tolerance.
            </summary>
            <param name="otherLine">The other line to check.</param>
        </member>
        <member name="M:SeeingSharp.Line.SetAllXLocations(System.Single)">
            <summary>
            Overrides the x location of all coordinates.
            </summary>
            <param name="xLocation">The location to set.</param>
        </member>
        <member name="M:SeeingSharp.Line.SetAllYLocations(System.Single)">
            <summary>
            Overrides the y location of all coordinates.
            </summary>
            <param name="yLocation">The location to set.</param>
        </member>
        <member name="M:SeeingSharp.Line.SetAllZLocations(System.Single)">
            <summary>
            Overrides the z location of all coordinates.
            </summary>
            <param name="zLocation">The location to set.</param>
        </member>
        <member name="M:SeeingSharp.Line2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Line2D" /> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:SeeingSharp.Line2D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Line2D" /> struct.
            </summary>
            <param name="x1">X coordinate of the start point.</param>
            <param name="y1">Y coordinate of the start point.</param>
            <param name="x2">X coordinate of the end point.</param>
            <param name="y2">Y coordinate of the end point.</param>
        </member>
        <member name="M:SeeingSharp.Line2D.ToRay">
            <summary>
            Gets a ray out of this line.
            </summary>
        </member>
        <member name="M:SeeingSharp.Line2D.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Line2D.Intersect(SeeingSharp.Line2D)">
            <summary>
            Calculates the intersection point and distance to the intersection seen from local start position.
            </summary>
            <param name="other">The line to calculate intersection with</param>
        </member>
        <member name="M:SeeingSharp.Line2D.Intersect(SeeingSharp.Ray2D)">
            <summary>
            Calculates the intersection point and distance to the intersection seen from local start position.
            </summary>
            <param name="other">The ray to calculate intersection with</param>
        </member>
        <member name="P:SeeingSharp.Line2D.Length">
            <summary>
            Gets the length of this line.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.#ctor">
            <summary>
            Cretaes a new matrix stack using 3x2 matrices
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.#ctor(System.Numerics.Matrix3x2)">
            <summary>
            Creates a new matrix stack usin 3x2 matrices
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.ResetStackToIdentity">
            <summary>
            Resets this object to single identity matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.TranslateLocal(System.Single,System.Single)">
            <summary>
            Performs translation on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.TranslateLocal(System.Numerics.Vector2)">
            <summary>
            Performs translation on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.RotateYawPitchRollLocal(System.Single)">
            <summary>
            Performs a rotation on top matrix.
            </summary>
            <param name="radians">The angle in radians.</param>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.RotateYawPitchRollLocal(System.Single,System.Numerics.Vector2)">
            <summary>
            Performs a rotation on top matrix.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="centerPoint">The center point of the rotation.</param>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.ScaleLocal(System.Single,System.Single)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.ScaleLocal(System.Numerics.Vector2)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.ScaleLocal(System.Single)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.TransformLocal(System.Numerics.Matrix3x2)">
            <summary>
            Performs a local transformation with the given matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.Clone">
            <summary>
            Clones the object
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.Push">
            <summary>
            Inserts a new matrix on top of the collection
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.Push(System.Numerics.Matrix3x2)">
            <summary>
            Inserts a new matrix on top of the collection
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix3x2Stack.Pop">
            <summary>
            Removes the lastly created matrix
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix3x2Stack.Top">
            <summary>
            Gets the top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.#ctor">
            <summary>
            Cretaes a new matrix stack using 4x4 matrices
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.#ctor(System.Numerics.Matrix4x4)">
            <summary>
            Creates a new matrix stack usin 4x4 matrices
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.ResetStackToIdentity">
            <summary>
            Resets this object to single identity matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.TranslateLocal(System.Single,System.Single,System.Single)">
            <summary>
            Performs translation on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.TranslateLocal(System.Numerics.Vector3)">
            <summary>
            Performs translation on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateYawPitchRollLocal(System.Single,System.Single,System.Single)">
            <summary>
            Performs a rotation on top matrix.
            </summary>
            <param name="yaw">Yaw around y-axis.</param>
            <param name="pitch">Pitch around x-axis.</param>
            <param name="roll">Roll around z-axis.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateHVLocal(System.Single,System.Single)">
            <summary>
            Performs a rotation on top matrix using horizontal and vertical rotation angles.
            </summary>
            <param name="hRotation">The horizontal rotation angle.</param>
            <param name="vRotation">The vertical rotation angle.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateHVLocal(System.Numerics.Vector2)">
            <summary>
            Performs a rotation on top matrix using horizontal and vertical rotation angles.
            </summary>
            <param name="rotation">Vector containing horizontal and vertical rotations.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.ScaleLocal(System.Single,System.Single,System.Single)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.ScaleLocal(System.Numerics.Vector3)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.ScaleLocal(System.Single)">
            <summary>
            Performs scaling on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateXLocal(System.Single)">
            <summary>
            performs rotation around x-axis on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateYLocal(System.Single)">
            <summary>
            performs rotation around y-axis on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.RotateZLocal(System.Single)">
            <summary>
            performs rotation around z-axis on top matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.TransformLocal(System.Numerics.Matrix4x4)">
            <summary>
            Performs a local transformation with the given matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.Clone">
            <summary>
            Clones the object
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.Push">
            <summary>
            Inserts a new matrix on top of the collection
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.Push(System.Numerics.Matrix4x4)">
            <summary>
            Inserts a new matrix on top of the collection
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4Stack.Pop">
            <summary>
            Removes the lastly created matrix
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix4Stack.Top">
            <summary>
            Gets the top matrix
            </summary>
        </member>
        <member name="T:SeeingSharp.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="M:SeeingSharp.Plane.Distance(System.Numerics.Vector3@)">
            <summary>
            Calculates the distance from this plane to the given point.
            </summary>
            <param name="point">The point to calculate the distance to.</param>
        </member>
        <member name="F:SeeingSharp.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:SeeingSharp.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane" /> class.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:SeeingSharp.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.Plane@,SeeingSharp.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SeeingSharp.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Intersects(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Multiply(SeeingSharp.Plane@,System.Single,SeeingSharp.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.Multiply(SeeingSharp.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Dot(SeeingSharp.Plane@,System.Numerics.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:SeeingSharp.Plane.Dot(SeeingSharp.Plane,System.Numerics.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.DotCoordinate(SeeingSharp.Plane@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.DotCoordinate(SeeingSharp.Plane,System.Numerics.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.DotNormal(SeeingSharp.Plane@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.DotNormal(SeeingSharp.Plane,System.Numerics.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Normalize(SeeingSharp.Plane@,SeeingSharp.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.Normalize(SeeingSharp.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane@,System.Numerics.Quaternion@,SeeingSharp.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane,System.Numerics.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane[],System.Numerics.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane@,System.Numerics.Matrix4x4@,SeeingSharp.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane,System.Numerics.Matrix4x4)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.Transform(SeeingSharp.Plane[],System.Numerics.Matrix4x4@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:SeeingSharp.Plane.op_Multiply(System.Single,SeeingSharp.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.op_Multiply(SeeingSharp.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.op_Equality(SeeingSharp.Plane,SeeingSharp.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.op_Inequality(SeeingSharp.Plane,SeeingSharp.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.Equals(SeeingSharp.Plane)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.Point">
            <summary>
            Structure using the same layout than Point from System.Drawing namespace.
            </summary>
        </member>
        <member name="M:SeeingSharp.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="F:SeeingSharp.Point.X">
            <summary>
            Left coordinate.
            </summary>
        </member>
        <member name="F:SeeingSharp.Point.Y">
            <summary>
            Top coordinate.
            </summary>
        </member>
        <member name="M:SeeingSharp.Point.Equals(SeeingSharp.Point)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Point.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Point.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Point.op_Equality(SeeingSharp.Point,SeeingSharp.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.Point.op_Inequality(SeeingSharp.Point,SeeingSharp.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.Point.op_Explicit(System.Numerics.Vector2)~SeeingSharp.Point">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:SeeingSharp.Point"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Point.op_Implicit(SeeingSharp.Point)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Point"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Polygon.#ctor(System.Numerics.Vector3[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Polygon" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon.Flattern">
            <summary>
            Flatterns this polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon.TriangulateUsingCuttingEars">
            <summary>
            Triangulates this surface using the cutting ears algorithm.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon.Vertices">
            <summary>
            Gets a collection containing all vertices.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon.Normal">
            <summary>
            Gets the normal of this polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.#ctor(System.Numerics.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Polygon2D" /> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Polygon2D.Clone">
            <summary>
            Clones this polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.MergeWithHole(SeeingSharp.Polygon2D,SeeingSharp.Polygon2DMergeOptions)">
            <summary>
            Merges this polygon with the given one defining a hole. The result is a new polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.MergeWithHole(SeeingSharp.Polygon2D,SeeingSharp.Polygon2DMergeOptions,System.Collections.Generic.List{System.Numerics.Vector2})">
            <summary>
            Merges the with hole.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.CalculateBoundingBox">
            <summary>
            Calculates the bounding box of this polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.CalculateEdgeOrder">
            <summary>
            Calculates the edge order of this polygon.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon2D.Lines">
            <summary>
            Returns all lines defined by this polygon.
            </summary>
        </member>
        <member name="M:SeeingSharp.Polygon2D.TriangulateUsingCuttingEars">
            <summary>
            Triangulates this polygon using the cutting ears triangulator.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon2D.Vertices">
            <summary>
            Gets all vertices defined by this polygon.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon2D.BoundingBox">
            <summary>
            Gets the bounding box of this polygon.
            </summary>
        </member>
        <member name="P:SeeingSharp.Polygon2D.EdgeOrder">
            <summary>
            Gets the current edge order.
            </summary>
        </member>
        <member name="T:SeeingSharp.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="M:SeeingSharp.Ray.Transform(System.Numerics.Matrix4x4)">
            <summary>
            Transforms the ray
            </summary>
        </member>
        <member name="F:SeeingSharp.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:SeeingSharp.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:SeeingSharp.Ray.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.Intersects(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.GetPickRay(System.Int32,System.Int32,SeeingSharp.ViewportF,System.Numerics.Matrix4x4)">
            <summary>
            Calculates a world space <see cref="T:SeeingSharp.Ray"/> from 2d screen coordinates.
            </summary>
            <param name="x">X coordinate on 2d screen.</param>
            <param name="y">Y coordinate on 2d screen.</param>
            <param name="viewport"><see cref="T:SeeingSharp.ViewportF"/>.</param>
            <param name="worldViewProjection">Transformation <see cref="T:System.Numerics.Matrix4x4"/>.</param>
            <returns>Resulting <see cref="T:SeeingSharp.Ray"/>.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.op_Equality(SeeingSharp.Ray,SeeingSharp.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.op_Inequality(SeeingSharp.Ray,SeeingSharp.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.Equals(SeeingSharp.Ray)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Ray2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Ray2D" /> struct.
            </summary>
        </member>
        <member name="M:SeeingSharp.Ray2D.Intersect(SeeingSharp.Ray2D)">
            <summary>
            Calculates the intersection point to the intersection seen from local origin position.
            </summary>
            <param name="other">The ray to calculate intersection with</param>
        </member>
        <member name="M:SeeingSharp.Ray2D.EqualsWithTolerance(SeeingSharp.Ray2D)">
            <summary>
            Performs a equality check with a slight tolerance.
            </summary>
            <param name="otherRay">The other ray to check.</param>
        </member>
        <member name="T:SeeingSharp.RectangleF">
            <summary>
            Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as It is 
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            Although automatic casting from a to System.Drawing.Rectangle is provided by this class.
            </summary>
        </member>
        <member name="M:SeeingSharp.RectangleF.Inflate(System.Single,System.Single)">
            <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="F:SeeingSharp.RectangleF.Empty">
            <summary>
            An empty rectangle
            </summary>
        </member>
        <member name="M:SeeingSharp.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.RectangleF"/> struct.
            </summary>
            <param name="x">The left.</param>
            <param name="y">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(System.Int32,System.Int32)">
            <summary>
            Checks, if specified point is inside <see cref="T:SeeingSharp.RectangleF"/>.
            </summary>
            <param name="x">X point coordinate.</param>
            <param name="y">Y point coordinate.</param>
            <returns><c>true</c> if point is inside <see cref="T:SeeingSharp.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Checks, if specified point is inside <see cref="T:SeeingSharp.RectangleF"/>.
            </summary>
            <param name="x">X point coordinate.</param>
            <param name="y">Y point coordinate.</param>
            <returns><c>true</c> if point is inside <see cref="T:SeeingSharp.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(System.Numerics.Vector2)">
            <summary>
            Checks, if specified <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:SeeingSharp.RectangleF"/>. 
            </summary> 
            <param name="vector2D">Coordinate <see cref="T:System.Numerics.Vector2"/>.</param>
            <returns><c>true</c> if <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:SeeingSharp.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(SeeingSharp.Point)">
            <summary>
            Checks, if specified <see cref="T:SeeingSharp.Point"/> is inside <see cref="T:SeeingSharp.RectangleF"/>. 
            </summary>
            <param name="point">Coordinate <see cref="T:SeeingSharp.Point"/>.</param> 
            <returns><c>true</c> if <see cref="T:SeeingSharp.Point"/> is inside <see cref="T:SeeingSharp.RectangleF"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:SeeingSharp.RectangleF.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.X">
            <summary>
            Gets the left position.
            </summary>
            <value>The left position.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Y">
            <summary>
            Gets the top position.
            </summary>
            <value>The top position.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SeeingSharp.RectangleF.Location">
            <summary>Gets or sets the upper-left value of the Rectangle.</summary>
        </member>
        <member name="P:SeeingSharp.RectangleF.Center">
            <summary>Gets the Point that specifies the center of the rectangle.</summary>
        </member>
        <member name="P:SeeingSharp.RectangleF.IsEmpty">
            <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
        </member>
        <member name="M:SeeingSharp.RectangleF.Offset(SeeingSharp.Point)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="amount">The values to adjust the position of the Rectangle by.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Offset(System.Int32,System.Int32)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Inflate(System.Int32,System.Int32)">
            <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(System.Numerics.Vector2@,System.Boolean@)">
            <summary>Determines whether this Rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
            <param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(SeeingSharp.Rectangle)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Contains(SeeingSharp.RectangleF@,System.Boolean@)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
            <param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Intersects(SeeingSharp.RectangleF)">
            <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Intersects(SeeingSharp.RectangleF@,System.Boolean@)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate</param>
            <param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Intersect(SeeingSharp.RectangleF,SeeingSharp.RectangleF)">
            <summary>
            Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Intersect(SeeingSharp.RectangleF@,SeeingSharp.RectangleF@,SeeingSharp.RectangleF@)">
            <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Union(SeeingSharp.RectangleF,SeeingSharp.RectangleF)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Union(SeeingSharp.RectangleF@,SeeingSharp.RectangleF@,SeeingSharp.RectangleF@)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
            <param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:SeeingSharp.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.Equals(SeeingSharp.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.RectangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.op_Equality(SeeingSharp.RectangleF,SeeingSharp.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.RectangleF.op_Inequality(SeeingSharp.RectangleF,SeeingSharp.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:SeeingSharp.Size2">
            <summary>
            Structure using the same layout than Size2 from System.Drawing namespace.
            </summary>
        </member>
        <member name="M:SeeingSharp.Size2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Size2"/> struct.
            </summary>
            <param name="width">The x.</param>
            <param name="height">The y.</param>
        </member>
        <member name="F:SeeingSharp.Size2.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:SeeingSharp.Size2.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="M:SeeingSharp.Size2.Equals(SeeingSharp.Size2)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Size2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Size2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Size2.op_Equality(SeeingSharp.Size2,SeeingSharp.Size2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.Size2.op_Inequality(SeeingSharp.Size2,SeeingSharp.Size2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SeeingSharp.MovementAnimationHelper">
            <summary>
            This class is responsible for standard movement calculation depending by
            maximum speed, acceleration and deceleration.
            
            see: http://www.frustfrei-lernen.de/mechanik/gleichfoermige-bewegung-physik.html
            see: http://www.frustfrei-lernen.de/mechanik/gleichmaessig-beschleunigte-bewegung-physik.html
            </summary>
        </member>
        <member name="M:SeeingSharp.MovementAnimationHelper.#ctor(SeeingSharp.MovementSpeed,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.MovementAnimationHelper" /> class.
            </summary>
            <param name="speed">The speed data.</param>
            <param name="movementDistance">The full distance for the movement.</param>
        </member>
        <member name="M:SeeingSharp.MovementAnimationHelper.GetPartialMoveDistance(System.TimeSpan)">
            <summary>
            Gets the move distance by the given timespan.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="P:SeeingSharp.MovementAnimationHelper.MovementTime">
            <summary>
            Gets the full movement time.
            </summary>
        </member>
        <member name="P:SeeingSharp.MovementAnimationHelper.AccelerationTime">
            <summary>
            Gets the time which is needed for acceleration phase.
            </summary>
        </member>
        <member name="P:SeeingSharp.MovementAnimationHelper.FullSpeedTime">
            <summary>
            Gets the time which is needed for full-speed phase.
            </summary>
        </member>
        <member name="P:SeeingSharp.MovementAnimationHelper.DecelerationTime">
            <summary>
            Gets the time which is needed for deceleration phase.
            </summary>
        </member>
        <member name="P:SeeingSharp.MovementAnimationHelper.MovementVector">
            <summary>
            Gets the full movement vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.MovementSpeed.MaximumSpeed">
            <summary>
            The maximum speed in m/s.
            </summary>
        </member>
        <member name="F:SeeingSharp.MovementSpeed.Acceleration">
            <summary>
            The acceleration in m/s².
            </summary>
        </member>
        <member name="F:SeeingSharp.MovementSpeed.Decelration">
            <summary>
            The deceleration in m/s².
            </summary>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.#ctor(System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.MovementSpeed"/> struct.
            </summary>
            <param name="movementVector">The total movement vector.</param>
            <param name="timeSpan">The total timespan the movement should take.</param>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.MovementSpeed"/> struct.
            </summary>
            <param name="maxSpeed">The maximum speed in m/s.</param>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.MovementSpeed"/> struct.
            </summary>
            <param name="maxSpeed">The maximum speed in m/s.</param>
            <param name="acceleration">The acceleration in m/s².</param>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.MovementSpeed"/> struct.
            </summary>
            <param name="maxSpeed">The maximum speed in m/s.</param>
            <param name="acceleration">The acceleration in m/s².</param>
            <param name="deceleration">The deceleration in m/s².</param>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.Equals(SeeingSharp.MovementSpeed)">
            <summary>
            Gibt an, ob das aktuelle Objekt einem anderen Objekt des gleichen Typs entspricht.
            </summary>
            <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
            <returns>
            true, wenn das aktuelle Objekt gleich dem <paramref name="other" />-Parameter ist, andernfalls false.
            </returns>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.ValidateWithException">
            <summary>
            Validates the contents of this class.
            Throws an InvalidOperationException if something is not correct.
            </summary>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.op_Equality(SeeingSharp.MovementSpeed,SeeingSharp.MovementSpeed)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.MovementSpeed.op_Inequality(SeeingSharp.MovementSpeed,SeeingSharp.MovementSpeed)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SeeingSharp.AngleSingle">
            <summary>
            Represents a unit independant angle using a single-precision floating-point
            internal representation.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Degree">
            <summary>
            A value that specifies the size of a single degree.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Minute">
            <summary>
            A value that specifies the size of a single minute.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Second">
            <summary>
            A value that specifies the size of a single second.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Radian">
            <summary>
            A value that specifies the size of a single radian.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Milliradian">
            <summary>
            A value that specifies the size of a single milliradian.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.Gradian">
            <summary>
            A value that specifies the size of a single gradian.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleSingle.radians">
            <summary>
            The internal representation of the angle.
            </summary>
        </member>
        <member name="M:SeeingSharp.AngleSingle.#ctor(System.Single,SeeingSharp.AngleType)">
            <summary>
            Initializes a new instance of the SeeingSharp.AngleSingle structure with the
            given unit dependant angle and unit type.
            </summary>
            <param name="angle">A unit dependant measure of the angle.</param>
            <param name="type">The type of unit the angle argument is.</param>
        </member>
        <member name="M:SeeingSharp.AngleSingle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the SeeingSharp.AngleSingle structure using the
            arc length formula (θ = s/r).
            </summary>
            <param name="arcLength">The measure of the arc.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Wrap">
            <summary>
            Wraps this SeeingSharp.AngleSingle to be in the range [π, -π].
            </summary>
        </member>
        <member name="M:SeeingSharp.AngleSingle.WrapPositive">
            <summary>
            Wraps this SeeingSharp.AngleSingle to be in the range [0, 2π).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Revolutions">
            <summary>
            Gets or sets the total number of revolutions this SeeingSharp.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Degrees">
            <summary>
            Gets or sets the total number of degrees this SeeingSharp.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Minutes">
            <summary>
            Gets or sets the minutes component of the degrees this SeeingSharp.AngleSingle represents.
            When setting the minutes, if the value is in the range (-60, 60) the whole degrees are
            not changed; otherwise, the whole degrees may be changed. Fractional values may set
            the seconds component.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Seconds">
            <summary>
            Gets or sets the seconds of the degrees this SeeingSharp.AngleSingle represents.
            When setting te seconds, if the value is in the range (-60, 60) the whole minutes
            or whole degrees are not changed; otherwise, the whole minutes or whole degrees
            may be changed.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Radians">
            <summary>
            Gets or sets the total number of radians this SeeingSharp.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Milliradians">
            <summary>
            Gets or sets the total number of milliradians this SeeingSharp.AngleSingle represents.
            One milliradian is equal to 1/(2000π).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Gradians">
            <summary>
            Gets or sets the total number of gradians this SeeingSharp.AngleSingle represents.
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsRight">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is a right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsStraight">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is a straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsFullRotation">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is a full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsOblique">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is an oblique angle (i.e. is not 90° or a multiple of 90°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsAcute">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is an acute angle (i.e. less than 90° but greater than 0°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsObtuse">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is an obtuse angle (i.e. greater than 90° but less than 180°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.IsReflex">
            <summary>
            Gets a System.Boolean that determines whether this SeeingSharp.Angle
            is a reflex angle (i.e. greater than 180° but less than 360°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Complement">
            <summary>
            Gets a SeeingSharp.AngleSingle instance that complements this angle (i.e. the two angles add to 90°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.Supplement">
            <summary>
            Gets a SeeingSharp.AngleSingle instance that supplements this angle (i.e. the two angles add to 180°).
            </summary>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Wrap(SeeingSharp.AngleSingle)">
            <summary>
            Wraps the SeeingSharp.AngleSingle given in the value argument to be in the range [π, -π].
            </summary>
            <param name="value">A SeeingSharp.AngleSingle to wrap.</param>
            <returns>The SeeingSharp.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.WrapPositive(SeeingSharp.AngleSingle)">
            <summary>
            Wraps the SeeingSharp.AngleSingle given in the value argument to be in the range [0, 2π).
            </summary>
            <param name="value">A SeeingSharp.AngleSingle to wrap.</param>
            <returns>The SeeingSharp.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Min(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Compares two SeeingSharp.AngleSingle instances and returns the smaller angle.
            </summary>
            <param name="left">The first SeeingSharp.AngleSingle instance to compare.</param>
            <param name="right">The second SeeingSharp.AngleSingle instance to compare.</param>
            <returns>The smaller of the two given SeeingSharp.AngleSingle instances.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Max(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Compares two SeeingSharp.AngleSingle instances and returns the greater angle.
            </summary>
            <param name="left">The first SeeingSharp.AngleSingle instance to compare.</param>
            <param name="right">The second SeeingSharp.AngleSingle instance to compare.</param>
            <returns>The greater of the two given SeeingSharp.AngleSingle instances.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Add(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Adds two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Subtract(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Subtracts two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract.</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Multiply(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Multiplies two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Divide(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Divides two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="P:SeeingSharp.AngleSingle.ZeroAngle">
            <summary>
            Gets a new SeeingSharp.AngleSingle instance that represents the zero angle (i.e. 0°).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.RightAngle">
            <summary>
            Gets a new SeeingSharp.AngleSingle instance that represents the right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.StraightAngle">
            <summary>
            Gets a new SeeingSharp.AngleSingle instance that represents the straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:SeeingSharp.AngleSingle.FullRotationAngle">
            <summary>
            Gets a new SeeingSharp.AngleSingle instance that represents the full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Equality(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SeeingSharp.Angle
            objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Inequality(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two SeeingSharp.Angle
            objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_LessThan(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SeeingSharp.Angle
            object is less than another SeeingSharp.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than right; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_GreaterThan(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SeeingSharp.Angle
            object is greater than another SeeingSharp.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than right; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_LessThanOrEqual(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SeeingSharp.Angle
            object is less than or equal to another SeeingSharp.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_GreaterThanOrEqual(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a SeeingSharp.Angle
            object is greater than or equal to another SeeingSharp.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_UnaryPlus(SeeingSharp.AngleSingle)">
            <summary>
            Returns the value of the SeeingSharp.AngleSingle operand. (The sign of
            the operand is unchanged.)
            </summary>
            <param name="value">A SeeingSharp.AngleSingle object.</param>
            <returns>The value of the value parameter.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_UnaryNegation(SeeingSharp.AngleSingle)">
            <summary>
            Returns the the negated value of the SeeingSharp.AngleSingle operand.
            </summary>
            <param name="value">A SeeingSharp.AngleSingle object.</param>
            <returns>The negated value of the value parameter.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Addition(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Adds two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Subtraction(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Subtracts two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Multiply(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Multiplies two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.op_Division(SeeingSharp.AngleSingle,SeeingSharp.AngleSingle)">
            <summary>
            Divides two SeeingSharp.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that
            indicates whether the value of this instance is less than, equal to, or greater
            than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.CompareTo(SeeingSharp.AngleSingle)">
            <summary>
            Compares this instance to a second SeeingSharp.AngleSingle and returns
            an integer that indicates whether the value of this instance is less than,
            equal to, or greater than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Equals(SeeingSharp.AngleSingle)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            SeeingSharp.AngleSingle object have the same value.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            Returns true if this SeeingSharp.AngleSingle object and another have the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.GetHashCode">
            <summary>
            Returns a hash code for this SeeingSharp.AngleSingle instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SeeingSharp.AngleSingle.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            Returns true if the obj parameter is a SeeingSharp.AngleSingle object or a type
            capable of implicit conversion to a SeeingSharp.AngleSingle value, and
            its value is equal to the value of the current SeeingSharp.Angle
            object; otherwise, false.
            </returns>
        </member>
        <member name="T:SeeingSharp.Bool">
            <summary>
            A boolean value stored on 4 bytes (instead of 1 in .NET).
            </summary>
        </member>
        <member name="M:SeeingSharp.Bool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Bool" /> class.
            </summary>
            <param name="boolValue">if set to <c>true</c> [bool value].</param>
        </member>
        <member name="M:SeeingSharp.Bool.Equals(SeeingSharp.Bool)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">The other.</param>
            <returns>true if <paramref name="other" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:SeeingSharp.Bool.op_Equality(SeeingSharp.Bool,SeeingSharp.Bool)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.Bool.op_Inequality(SeeingSharp.Bool,SeeingSharp.Bool)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.Bool.op_Implicit(SeeingSharp.Bool)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Bool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="booleanValue">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Bool.op_Implicit(System.Boolean)~SeeingSharp.Bool">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:SeeingSharp.Bool"/>.
            </summary>
            <param name="boolValue">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SeeingSharp.Bool4">
            <summary>
            Represents a four dimensional mathematical vector of bool (32 bits per bool value).
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.SizeInBytes">
            <summary>
            The size of the <see cref = "T:SeeingSharp.Bool4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.False">
            <summary>
            A <see cref = "T:SeeingSharp.Bool4" /> with all of its components set to false.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.UnitX">
            <summary>
            The X unit <see cref = "T:SeeingSharp.Bool4" /> (true, 0, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.UnitY">
            <summary>
            The Y unit <see cref = "T:SeeingSharp.Bool4" /> (0, true, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.UnitZ">
            <summary>
            The Z unit <see cref = "T:SeeingSharp.Bool4" /> (0, 0, true, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.UnitW">
            <summary>
            The W unit <see cref = "T:SeeingSharp.Bool4" /> (0, 0, 0, true).
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.One">
            <summary>
            A <see cref = "T:SeeingSharp.Bool4" /> with all of its components set to true.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.iX">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.iY">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.iZ">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Bool4.iW">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Bool4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Bool4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Bool4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Bool4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Bool4.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Bool4" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Bool4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Bool4" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
            <param name = "w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SeeingSharp.Bool4.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Bool4" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Bool4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Bool4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SeeingSharp.Bool4.op_Equality(SeeingSharp.Bool4,SeeingSharp.Bool4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Bool4.op_Inequality(SeeingSharp.Bool4,SeeingSharp.Bool4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Bool4.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Bool4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Bool4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Bool4.Equals(SeeingSharp.Bool4)">
            <summary>
            Determines whether the specified <see cref = "T:SeeingSharp.Bool4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:SeeingSharp.Bool4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:SeeingSharp.Bool4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Bool4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "value">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Bool4.op_Implicit(System.Boolean[])~SeeingSharp.Bool4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:SeeingSharp.Bool4"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Bool4.op_Implicit(SeeingSharp.Bool4)~System.Boolean[]">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Bool4"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SeeingSharp.BoundingFrustum">
            <summary>
            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, 
            (matrix, frustum, camera) interchange, and many kind of intersection testing.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.#ctor(System.Numerics.Matrix4x4)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="matrix">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Equals(SeeingSharp.BoundingFrustum)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.BoundingFrustum"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.BoundingFrustum"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SeeingSharp.BoundingFrustum"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.op_Equality(SeeingSharp.BoundingFrustum,SeeingSharp.BoundingFrustum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.op_Inequality(SeeingSharp.BoundingFrustum,SeeingSharp.BoundingFrustum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetPlane(System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="index">Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.FromCamera(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bouding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.FromCamera(SeeingSharp.FrustumCameraParams)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraParams">The camera params.</param>
            <returns>The bouding frustum from camera params</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetCorners">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetCorners(System.Numerics.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetCameraParams">
            <summary>
            Extracts perspective camera parameters from the frustum, dosn't work with orthographic frustums.
            </summary>
            <returns>Perspective camera parameters from the frustum</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(System.Numerics.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(System.Numerics.Vector3)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(System.Numerics.Vector3[])">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(System.Numerics.Vector3[],SeeingSharp.ContainmentType@)">
            <summary>
            Checks whether a group of points lay totally inside the frsutrum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingBox)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingBox@,SeeingSharp.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingSphere)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingSphere@,SeeingSharp.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingFrustum@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingFrustum)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Contains(SeeingSharp.BoundingFrustum@,System.Boolean@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <param name="result"><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.Plane@,SeeingSharp.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">Plane intersection type.</param>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetWidthAtDepth(System.Single)">
            <summary>
            Get the width of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum width.</param>
            <returns>With of the frustum at the specified depth</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetHeightAtDepth(System.Single)">
            <summary>
            Get the height of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum height.</param>
            <returns>Height of the frustum at the specified depth</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.Ray@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.Intersects(SeeingSharp.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">The distance at which the ray enters the frustum if there is an intersection and the ray starts outside the frustum.</param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetZoomToExtentsShiftDistance(System.Numerics.Vector3[])">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is poistive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the revers direction of the lookat direction (ZoomOut).
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetZoomToExtentsShiftDistance(SeeingSharp.BoundingBox@)">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is poistive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the revers direction of the lookat direction (ZoomOut).
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetZoomToExtentsShiftVector(System.Numerics.Vector3[])">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="M:SeeingSharp.BoundingFrustum.GetZoomToExtentsShiftVector(SeeingSharp.BoundingBox@)">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit) operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="P:SeeingSharp.BoundingFrustum.IsOrthographic">
            <summary>
            Indicate whether the current BoundingFrustrum is Orthographic.
            </summary>
            <value>
            	<c>true</c> if the current BoundingFrustrum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SeeingSharp.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:SeeingSharp.Collision.ClosestPointPointTriangle(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SeeingSharp.Collision.ClosestPointPlanePoint(SeeingSharp.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SeeingSharp.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SeeingSharp.Collision.ClosestPointBoxPoint(SeeingSharp.BoundingBox@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SeeingSharp.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:SeeingSharp.Collision.ClosestPointSpherePoint(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SeeingSharp.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="P:System.Numerics.Vector3.Zero"/>.</param>
        </member>
        <member name="M:SeeingSharp.Collision.ClosestPointSphereSphere(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:SeeingSharp.BoundingSphere"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="P:System.Numerics.Vector3.Zero"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Collision.DistancePlanePoint(SeeingSharp.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SeeingSharp.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.DistanceBoxPoint(SeeingSharp.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SeeingSharp.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.DistanceBoxBox(SeeingSharp.BoundingBox@,SeeingSharp.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:SeeingSharp.BoundingBox"/> and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.DistanceSpherePoint(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:SeeingSharp.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.DistanceSphereSphere(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:SeeingSharp.BoundingSphere"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsPoint(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsRay(SeeingSharp.Ray@,SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsPlane(SeeingSharp.Ray@,SeeingSharp.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsPlane(SeeingSharp.Ray@,SeeingSharp.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsTriangle(SeeingSharp.Ray@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsTriangle(SeeingSharp.Ray@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsBox(SeeingSharp.Ray@,SeeingSharp.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsBox(SeeingSharp.Ray@,SeeingSharp.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsSphere(SeeingSharp.Ray@,SeeingSharp.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.RayIntersectsSphere(SeeingSharp.Ray@,SeeingSharp.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsPoint(SeeingSharp.Plane@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsPlane(SeeingSharp.Plane@,SeeingSharp.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsPlane(SeeingSharp.Plane@,SeeingSharp.Plane@,SeeingSharp.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a <see cref="T:SeeingSharp.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:SeeingSharp.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsTriangle(SeeingSharp.Plane@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsBox(SeeingSharp.Plane@,SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.PlaneIntersectsSphere(SeeingSharp.Plane@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Plane"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.BoxIntersectsBox(SeeingSharp.BoundingBox@,SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.BoundingBox"/> and a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.BoxIntersectsSphere(SeeingSharp.BoundingBox@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.BoundingBox"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereIntersectsTriangle(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereIntersectsSphere(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.BoundingSphere"/> and a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.BoxContainsPoint(SeeingSharp.BoundingBox@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.BoxContainsBox(SeeingSharp.BoundingBox@,SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingBox"/> contains a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.BoxContainsSphere(SeeingSharp.BoundingBox@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingBox"/> contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereContainsPoint(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereContainsTriangle(SeeingSharp.BoundingSphere@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereContainsBox(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingSphere"/> contains a <see cref="T:SeeingSharp.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.Collision.SphereContainsSphere(SeeingSharp.BoundingSphere@,SeeingSharp.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.BoundingSphere"/> contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:SeeingSharp.Color3">
            <summary>
            Represents a color in the form of rgb.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color3.Black">
            <summary>
            The Black color (0, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Color3.White">
            <summary>
            The White color (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:SeeingSharp.Color3.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color3.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Color3.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="M:SeeingSharp.Color3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Color3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color3"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color3"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color3"/> struct.
            </summary>
            <param name="rgb">A packed integer containing all three color components in RGB order.
            The alpha component is ignored.</param>
        </member>
        <member name="M:SeeingSharp.Color3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Color3"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue components of the color. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Color3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:SeeingSharp.Color3.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A three-element array containing the components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Add(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Add(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Subtract(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Subtract(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Modulate(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Modulate(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Scale(SeeingSharp.Color3@,System.Single,SeeingSharp.Color3@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Scale(SeeingSharp.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Negate(SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Negate(SeeingSharp.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Clamp(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Clamp(SeeingSharp.Color3,SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Lerp(SeeingSharp.Color3@,SeeingSharp.Color3@,System.Single,SeeingSharp.Color3@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color3.Lerp(SeeingSharp.Color3,SeeingSharp.Color3,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Color3.SmoothStep(SeeingSharp.Color3@,SeeingSharp.Color3@,System.Single,SeeingSharp.Color3@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.Color3.SmoothStep(SeeingSharp.Color3,SeeingSharp.Color3,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Max(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Max(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.Min(SeeingSharp.Color3@,SeeingSharp.Color3@,SeeingSharp.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SeeingSharp.Color3.Min(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.AdjustContrast(SeeingSharp.Color3@,System.Single,SeeingSharp.Color3@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.AdjustContrast(SeeingSharp.Color3,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.AdjustSaturation(SeeingSharp.Color3@,System.Single,SeeingSharp.Color3@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.Color3.AdjustSaturation(SeeingSharp.Color3,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Addition(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_UnaryPlus(SeeingSharp.Color3)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Subtraction(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_UnaryNegation(SeeingSharp.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Multiply(System.Single,SeeingSharp.Color3)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Multiply(SeeingSharp.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Multiply(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Equality(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Inequality(SeeingSharp.Color3,SeeingSharp.Color3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Explicit(SeeingSharp.Color3)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color3"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Implicit(SeeingSharp.Color3)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color3"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Implicit(System.Numerics.Vector3)~SeeingSharp.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.op_Explicit(System.Int32)~SeeingSharp.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SeeingSharp.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.Equals(SeeingSharp.Color3)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Color3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Color3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Color3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Color3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.ColorBGRA">
            <summary>
            Represents a 32-bit color (4 bytes) in the form of BGRA (in byte order: B, G, B, A).
            </summary>
        </member>
        <member name="F:SeeingSharp.ColorBGRA.B">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.ColorBGRA.G">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.ColorBGRA.R">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.ColorBGRA.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="bgra">A packed integer containing all four color components in BGRA order.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="bgra">A packed integer containing all four color components in BGRA.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ColorBGRA"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue, alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.ColorBGRA.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToColor3">
            <summary>
            Converts the color into a three component color.
            </summary>
            <returns>A three component color containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color in BGRA order.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.GetBrightness">
            <summary>
            Gets the brightness.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.GetHue">
            <summary>
            Gets the hue.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.GetSaturation">
            <summary>
            Gets the saturation.
            </summary>
            <returns>The Hue-Saturation-Brightness (HSB) saturation for this <see cref="T:SeeingSharp.Color"/></returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.FromRgba(System.Int32)">
            <summary>
            Converts the color from a packed RGBA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.FromRgba(System.UInt32)">
            <summary>
            Converts the color from a packed RGBA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in RGBA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Add(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Add(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Subtract(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Subtract(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Modulate(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Modulate(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Scale(SeeingSharp.ColorBGRA@,System.Single,SeeingSharp.ColorBGRA@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Scale(SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Negate(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Negate(SeeingSharp.ColorBGRA)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Clamp(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Clamp(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Lerp(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,System.Single,SeeingSharp.ColorBGRA@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Lerp(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.SmoothStep(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,System.Single,SeeingSharp.ColorBGRA@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.SmoothStep(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Max(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Max(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Min(SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@,SeeingSharp.ColorBGRA@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Min(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.AdjustContrast(SeeingSharp.ColorBGRA@,System.Single,SeeingSharp.ColorBGRA@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.AdjustContrast(SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.AdjustSaturation(SeeingSharp.ColorBGRA@,System.Single,SeeingSharp.ColorBGRA@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.AdjustSaturation(SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Addition(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_UnaryPlus(SeeingSharp.ColorBGRA)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Subtraction(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_UnaryNegation(SeeingSharp.ColorBGRA)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Multiply(System.Single,SeeingSharp.ColorBGRA)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Multiply(SeeingSharp.ColorBGRA,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Multiply(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Equality(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Inequality(SeeingSharp.ColorBGRA,SeeingSharp.ColorBGRA)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.ColorBGRA)~SeeingSharp.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:SeeingSharp.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.ColorBGRA)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.ColorBGRA)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.ColorBGRA)~SeeingSharp.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:SeeingSharp.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(System.Numerics.Vector3)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.Color3)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color3"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(System.Numerics.Vector4)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.Color4)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color4"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Implicit(SeeingSharp.Color)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Color"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Implicit(SeeingSharp.ColorBGRA)~SeeingSharp.Color">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(SeeingSharp.ColorBGRA)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.ColorBGRA"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.op_Explicit(System.Int32)~SeeingSharp.ColorBGRA">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SeeingSharp.ColorBGRA"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Equals(SeeingSharp.ColorBGRA)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.ColorBGRA"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.ColorBGRA"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.ColorBGRA"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.ColorBGRA.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.AngleType">
            <summary>
            Describes the type of angle.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleType.Revolution">
            <summary>
            Specifies an angle measurement in revolutions.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleType.Degree">
            <summary>
            Specifies an angle measurement in degrees.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleType.Radian">
            <summary>
            Specifies an angle measurement in radians.
            </summary>
        </member>
        <member name="F:SeeingSharp.AngleType.Gradian">
            <summary>
            Specifies an angle measurement in gradians.
            </summary>
        </member>
        <member name="T:SeeingSharp.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:SeeingSharp.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:SeeingSharp.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:SeeingSharp.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:SeeingSharp.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:SeeingSharp.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:SeeingSharp.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:SeeingSharp.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:SeeingSharp.FrustumCameraParams">
            <summary>
            Frustum camera parameters.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.Position">
            <summary>
            Position of the camera.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.LookAtDir">
            <summary>
            Looking at direction of the camera.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.UpDir">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.FOV">
            <summary>
            Field of view.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.ZNear">
            <summary>
            Z near distance.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.ZFar">
            <summary>
            Z far distance.
            </summary>
        </member>
        <member name="F:SeeingSharp.FrustumCameraParams.AspectRatio">
            <summary>
            Aspect ratio.
            </summary>
        </member>
        <member name="T:SeeingSharp.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.PrecisionDigits">
            <summary>
            Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MantissaBits">
            <summary>
            Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MaximumDecimalExponent">
            <summary>
            Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MaximumBinaryExponent">
            <summary>
            Maximum binary exponent.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MinimumDecimalExponent">
            <summary>
            Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MinimumBinaryExponent">
            <summary>
            Minimum binary exponent.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.ExponentRadix">
            <summary>
            Exponent radix.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.AdditionRounding">
            <summary>
            Additional rounding.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.Epsilon">
            <summary>
            Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MaxValue">
            <summary>
            Maximum value of the number.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half.MinValue">
            <summary>
            Minimum value of the number.
            </summary>
        </member>
        <member name="M:SeeingSharp.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:SeeingSharp.Half.RawValue">
            <summary>
            Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:SeeingSharp.Half.ConvertToFloat(SeeingSharp.Half[])">
            <summary>
            Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SeeingSharp.Half.ConvertToHalf(System.Single[])">
            <summary>
            Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:SeeingSharp.Half.op_Implicit(System.Single)~SeeingSharp.Half">
            <summary>
            Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:SeeingSharp.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.Half.op_Implicit(SeeingSharp.Half)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref = "T:SeeingSharp.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.Half.op_Equality(SeeingSharp.Half,SeeingSharp.Half)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half.op_Inequality(SeeingSharp.Half,SeeingSharp.Half)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:SeeingSharp.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SeeingSharp.Half.Equals(SeeingSharp.Half@,SeeingSharp.Half@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns>
            <c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half.Equals(SeeingSharp.Half)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SeeingSharp.Half.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SeeingSharp.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:SeeingSharp.Half2.#ctor(SeeingSharp.Half,SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:SeeingSharp.Half2.#ctor(SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:SeeingSharp.Half2.op_Implicit(System.Numerics.Vector2)~SeeingSharp.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:SeeingSharp.Half2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.op_Implicit(SeeingSharp.Half2)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Half2"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.op_Equality(SeeingSharp.Half2,SeeingSharp.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.op_Inequality(SeeingSharp.Half2,SeeingSharp.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.Equals(SeeingSharp.Half2@,SeeingSharp.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.Equals(SeeingSharp.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SeeingSharp.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SeeingSharp.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:SeeingSharp.Half3.#ctor(SeeingSharp.Half,SeeingSharp.Half,SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:SeeingSharp.Half3.#ctor(SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:SeeingSharp.Half3.op_Implicit(System.Numerics.Vector3)~SeeingSharp.Half3">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.op_Implicit(SeeingSharp.Half3)~System.Numerics.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Half3"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.op_Explicit(System.Numerics.Vector2)~SeeingSharp.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:SeeingSharp.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.op_Explicit(SeeingSharp.Half3)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Half3"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.op_Equality(SeeingSharp.Half3,SeeingSharp.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.op_Inequality(SeeingSharp.Half3,SeeingSharp.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.Equals(SeeingSharp.Half3@,SeeingSharp.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.Equals(SeeingSharp.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SeeingSharp.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SeeingSharp.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:SeeingSharp.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:SeeingSharp.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:SeeingSharp.Half4.#ctor(SeeingSharp.Half,SeeingSharp.Half,SeeingSharp.Half,SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:SeeingSharp.Half4.#ctor(SeeingSharp.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:SeeingSharp.Half4.op_Implicit(System.Numerics.Vector4)~SeeingSharp.Half4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Numerics.Vector4"/> to <see cref="T:SeeingSharp.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Implicit(SeeingSharp.Half4)~System.Numerics.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Half4"/> to <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Explicit(System.Numerics.Vector3)~SeeingSharp.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector3"/> to <see cref="T:SeeingSharp.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Explicit(SeeingSharp.Half4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Half4"/> to <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Explicit(System.Numerics.Vector2)~SeeingSharp.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Vector2"/> to <see cref="T:SeeingSharp.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Explicit(SeeingSharp.Half4)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Half4"/> to <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Equality(SeeingSharp.Half4,SeeingSharp.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.op_Inequality(SeeingSharp.Half4,SeeingSharp.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.Equals(SeeingSharp.Half4@,SeeingSharp.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.Equals(SeeingSharp.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SeeingSharp.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:SeeingSharp.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:SeeingSharp.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified h.
            </summary>
            <param name="h">The h.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified f.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="T:SeeingSharp.Int3">
            <summary>
            Represents a three dimensional mathematical int vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.SizeInBytes">
            <summary>
            The size of the <see cref = "T:SeeingSharp.Int3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.Zero">
            <summary>
            A <see cref = "T:SeeingSharp.Int3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.UnitX">
            <summary>
            The X unit <see cref = "T:SeeingSharp.Int3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.UnitY">
            <summary>
            The Y unit <see cref = "T:SeeingSharp.Int3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.UnitZ">
            <summary>
            The Z unit <see cref = "T:SeeingSharp.Int3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.One">
            <summary>
            A <see cref = "T:SeeingSharp.Int3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Int3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int3" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int3" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:SeeingSharp.Int3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int3" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Int3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Int3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Add(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <param name = "result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Add(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Subtract(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <param name = "result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Subtract(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Multiply(SeeingSharp.Int3@,System.Int32,SeeingSharp.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Multiply(SeeingSharp.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Modulate(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <param name = "result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Modulate(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Divide(SeeingSharp.Int3@,System.Int32,SeeingSharp.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Divide(SeeingSharp.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Negate(SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <param name = "result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Negate(SeeingSharp.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Clamp(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <param name = "result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Clamp(SeeingSharp.Int3,SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Max(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Max(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.Min(SeeingSharp.Int3@,SeeingSharp.Int3@,SeeingSharp.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int3.Min(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Addition(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_UnaryPlus(SeeingSharp.Int3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name = "value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Subtraction(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_UnaryNegation(SeeingSharp.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Multiply(System.Int32,SeeingSharp.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Multiply(SeeingSharp.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Division(SeeingSharp.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Equality(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Inequality(SeeingSharp.Int3,SeeingSharp.Int3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Explicit(SeeingSharp.Int3)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref = "T:SeeingSharp.Int3" /> to <see cref = "T:System.Numerics.Vector2" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Explicit(SeeingSharp.Int3)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref = "T:SeeingSharp.Int3" /> to <see cref = "T:System.Numerics.Vector3" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.ToString(System.String)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.Equals(SeeingSharp.Int3)">
            <summary>
            Determines whether the specified <see cref = "T:SeeingSharp.Int3" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:SeeingSharp.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:SeeingSharp.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "value">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Implicit(System.Int32[])~SeeingSharp.Int3">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:SeeingSharp.Int3"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int3.op_Implicit(SeeingSharp.Int3)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Int3"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SeeingSharp.Int4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.SizeInBytes">
            <summary>
            The size of the <see cref = "T:SeeingSharp.Int4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.Zero">
            <summary>
            A <see cref = "T:SeeingSharp.Int4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.UnitX">
            <summary>
            The X unit <see cref = "T:SeeingSharp.Int4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.UnitY">
            <summary>
            The Y unit <see cref = "T:SeeingSharp.Int4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.UnitZ">
            <summary>
            The Z unit <see cref = "T:SeeingSharp.Int4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.UnitW">
            <summary>
            The W unit <see cref = "T:SeeingSharp.Int4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.One">
            <summary>
            A <see cref = "T:SeeingSharp.Int4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:SeeingSharp.Int4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Int4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int4" /> struct.
            </summary>
            <param name = "value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int4" /> struct.
            </summary>
            <param name = "x">Initial value for the X component of the vector.</param>
            <param name = "y">Initial value for the Y component of the vector.</param>
            <param name = "z">Initial value for the Z component of the vector.</param>
            <param name = "w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:SeeingSharp.Int4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref = "T:SeeingSharp.Int4" /> struct.
            </summary>
            <param name = "values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "values" /> is <c>null</c>.</exception>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:SeeingSharp.Int4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name = "index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the <paramref name = "index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Int4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Add(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <param name = "result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Add(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Subtract(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <param name = "result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Subtract(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Multiply(SeeingSharp.Int4@,System.Int32,SeeingSharp.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Multiply(SeeingSharp.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Modulate(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <param name = "result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Modulate(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name = "left">The first vector to modulate.</param>
            <param name = "right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Divide(SeeingSharp.Int4@,System.Int32,SeeingSharp.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <param name = "result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Divide(SeeingSharp.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Negate(SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <param name = "result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Negate(SeeingSharp.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Clamp(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <param name = "result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Clamp(SeeingSharp.Int4,SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name = "value">The value to clamp.</param>
            <param name = "min">The minimum value.</param>
            <param name = "max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Max(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Max(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.Min(SeeingSharp.Int4@,SeeingSharp.Int4@,SeeingSharp.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <param name = "result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:SeeingSharp.Int4.Min(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name = "left">The first source vector.</param>
            <param name = "right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Addition(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name = "left">The first vector to add.</param>
            <param name = "right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_UnaryPlus(SeeingSharp.Int4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name = "value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Subtraction(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name = "left">The first vector to subtract.</param>
            <param name = "right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_UnaryNegation(SeeingSharp.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name = "value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Multiply(System.Int32,SeeingSharp.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Multiply(SeeingSharp.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Division(SeeingSharp.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name = "value">The vector to scale.</param>
            <param name = "scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Equality(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Inequality(SeeingSharp.Int4,SeeingSharp.Int4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Explicit(SeeingSharp.Int4)~System.Numerics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref = "T:SeeingSharp.Int4" /> to <see cref = "T:System.Numerics.Vector2" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Explicit(SeeingSharp.Int4)~System.Numerics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref = "T:SeeingSharp.Int4" /> to <see cref = "T:System.Numerics.Vector3" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Explicit(SeeingSharp.Int4)~System.Numerics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref = "T:SeeingSharp.Int4" /> to <see cref = "T:System.Numerics.Vector4" />.
            </summary>
            <param name = "value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.ToString">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.ToString(System.String)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref = "T:System.String" /> that represents this instance.
            </summary>
            <param name = "format">The format.</param>
            <param name = "formatProvider">The format provider.</param>
            <returns>
            A <see cref = "T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.Equals(SeeingSharp.Int4)">
            <summary>
            Determines whether the specified <see cref = "T:SeeingSharp.Int4" /> is equal to this instance.
            </summary>
            <param name = "other">The <see cref = "T:SeeingSharp.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:SeeingSharp.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref = "T:System.Object" /> is equal to this instance.
            </summary>
            <param name = "value">The <see cref = "T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref = "T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Implicit(System.Int32[])~SeeingSharp.Int4">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> array to <see cref="T:SeeingSharp.Int4"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Int4.op_Implicit(SeeingSharp.Int4)~System.Int32[]">
            <summary>
            Performs an implicit conversion from <see cref="T:SeeingSharp.Int4"/> to <see cref="T:System.Int32"/> array.
            </summary>
            <param name="input">The input.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="F:SeeingSharp.MathUtil.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:SeeingSharp.MathUtil.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:SeeingSharp.MathUtil.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:SeeingSharp.MathUtil.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:SeeingSharp.MathUtil.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:SeeingSharp.MathUtil.WithinEpsilon(System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float <see cref="F:System.Single.Epsilon"/>.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Array``1(``0,System.Int32)">
            <summary>
            Does something with arrays.
            </summary>
            <typeparam name="T">Most likely the type of elements in the array.</typeparam>
            <param name="value">Who knows what this is for.</param>
            <param name="count">Probably the length of the array.</param>
            <returns>An array of who knows what.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RevolutionsToDegrees(System.Single)">
            <summary>
            Converts revolutions to degrees.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RevolutionsToRadians(System.Single)">
            <summary>
            Converts revolutions to radians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RevolutionsToGradians(System.Single)">
            <summary>
            Converts revolutions to gradians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.DegreesToRevolutions(System.Single)">
            <summary>
            Converts degrees to revolutions.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RadiansToRevolutions(System.Single)">
            <summary>
            Converts radians to revolutions.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RadiansToGradians(System.Single)">
            <summary>
            Converts radians to gradians.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.GradiansToRevolutions(System.Single)">
            <summary>
            Converts gradians to revolutions.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.GradiansToDegrees(System.Single)">
            <summary>
            Converts gradians to degrees.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.GradiansToRadians(System.Single)">
            <summary>
            Converts gradians to radians.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamiping a value between min and max</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamiping a value between min and max</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="radX">Radius X.</param>
            <param name="radY">Radius Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of gaussian function.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="radX">Radius X.</param>
            <param name="radY">Radius Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of gaussian function.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Gets random <c>float</c> number within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>float</c> number.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets random <c>double</c> number within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>double</c> number.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextLong(System.Random)">
            <summary>
            Gets random <c>long</c> number.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Gets random <c>long</c> number within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <c>long</c> number.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextVector2(System.Random,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector2"/> within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextVector3(System.Random,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector3"/> within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextVector4(System.Random,System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector4"/> within range.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector4"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextColor(System.Random)">
            <summary>
            Gets random opaque <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <returns>Random <see cref="T:SeeingSharp.Color"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextColor(System.Random,System.Single,System.Single)">
            <summary>
            Gets random opaque <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <returns>Random <see cref="T:SeeingSharp.Color"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextColor(System.Random,System.Single,System.Single,System.Single)">
            <summary>
            Gets random <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <param name="alpha">Alpha value.</param>
            <returns>Random <see cref="T:SeeingSharp.Color"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextColor(System.Random,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets random <see cref="T:SeeingSharp.Color"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="minBrightness">Minimum brightness.</param>
            <param name="maxBrightness">Maximum brightness</param>
            <param name="minAlpha">Minimum alpha.</param>
            <param name="maxAlpha">Maximum alpha.</param>
            <returns>Random <see cref="T:SeeingSharp.Color"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextDPoint(System.Random,SeeingSharp.Point,SeeingSharp.Point)">
            <summary>
            Gets random <see cref="T:SeeingSharp.Point"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:SeeingSharp.Point"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextDPointF(System.Random,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Gets random <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:SeeingSharp.MathUtil.NextTime(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets random <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="random">A <see cref="T:System.Random"/> instance.</param>
            <param name="min">Minimum.</param>
            <param name="max">Maximum.</param>
            <returns>Random <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="T:SeeingSharp.Matrix5x4">
            <summary>
            Represents a 4x4 mathematical Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.SizeInBytes">
            <summary>
            The size of the <see cref="T:SeeingSharp.Matrix5x4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.Zero">
            <summary>
            A <see cref="T:SeeingSharp.Matrix5x4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.Identity">
            <summary>
            The identity <see cref="T:SeeingSharp.Matrix5x4"/>.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M11">
            <summary>
            Value at row 1 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M12">
            <summary>
            Value at row 1 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M13">
            <summary>
            Value at row 1 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M14">
            <summary>
            Value at row 1 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M21">
            <summary>
            Value at row 2 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M22">
            <summary>
            Value at row 2 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M23">
            <summary>
            Value at row 2 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M24">
            <summary>
            Value at row 2 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M31">
            <summary>
            Value at row 3 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M32">
            <summary>
            Value at row 3 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M33">
            <summary>
            Value at row 3 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M34">
            <summary>
            Value at row 3 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M41">
            <summary>
            Value at row 4 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M42">
            <summary>
            Value at row 4 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M43">
            <summary>
            Value at row 4 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M44">
            <summary>
            Value at row 4 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M51">
            <summary>
            Value at row 5 column 1 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M52">
            <summary>
            Value at row 5 column 2 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M53">
            <summary>
            Value at row 5 column 3 of the Matrix5x4.
            </summary>
        </member>
        <member name="F:SeeingSharp.Matrix5x4.M54">
            <summary>
            Value at row 5 column 4 of the Matrix5x4.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Matrix5x4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Matrix5x4"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the Matrix5x4.</param>
            <param name="M12">The value to assign at row 1 column 2 of the Matrix5x4.</param>
            <param name="M13">The value to assign at row 1 column 3 of the Matrix5x4.</param>
            <param name="M14">The value to assign at row 1 column 4 of the Matrix5x4.</param>
            <param name="M21">The value to assign at row 2 column 1 of the Matrix5x4.</param>
            <param name="M22">The value to assign at row 2 column 2 of the Matrix5x4.</param>
            <param name="M23">The value to assign at row 2 column 3 of the Matrix5x4.</param>
            <param name="M24">The value to assign at row 2 column 4 of the Matrix5x4.</param>
            <param name="M31">The value to assign at row 3 column 1 of the Matrix5x4.</param>
            <param name="M32">The value to assign at row 3 column 2 of the Matrix5x4.</param>
            <param name="M33">The value to assign at row 3 column 3 of the Matrix5x4.</param>
            <param name="M34">The value to assign at row 3 column 4 of the Matrix5x4.</param>
            <param name="M41">The value to assign at row 4 column 1 of the Matrix5x4.</param>
            <param name="M42">The value to assign at row 4 column 2 of the Matrix5x4.</param>
            <param name="M43">The value to assign at row 4 column 3 of the Matrix5x4.</param>
            <param name="M44">The value to assign at row 4 column 4 of the Matrix5x4.</param>
            <param name="M51">The value to assign at row 5 column 1 of the Matrix5x4.</param>
            <param name="M52">The value to assign at row 5 column 2 of the Matrix5x4.</param>
            <param name="M53">The value to assign at row 5 column 3 of the Matrix5x4.</param>
            <param name="M54">The value to assign at row 5 column 4 of the Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Matrix5x4"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix5x4. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Row1">
            <summary>
            Gets or sets the first row in the Matrix5x4; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Row2">
            <summary>
            Gets or sets the second row in the Matrix5x4; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Row3">
            <summary>
            Gets or sets the third row in the Matrix5x4; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Row4">
            <summary>
            Gets or sets the fourth row in the Matrix5x4; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Row5">
            <summary>
            Gets or sets the fifth row in the Matrix5x4; that is M51, M52, M53, and M54.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.TranslationVector">
            <summary>
            Gets or sets the translation of the Matrix5x4; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix5x4; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix5x4.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix5x4; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix5x4 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:SeeingSharp.Matrix5x4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix5x4 component, depending on the index.</value>
            <param name="row">The row of the Matrix5x4 to access.</param>
            <param name="column">The column of the Matrix5x4 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Add(SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Add(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Subtract(SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Subtract(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Multiply(SeeingSharp.Matrix5x4@,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Scales a Matrix5x4 by the given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Divide(SeeingSharp.Matrix5x4@,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Scales a Matrix5x4 by the given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Negate(SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Negate(SeeingSharp.Matrix5x4)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to be negated.</param>
            <returns>The negated Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Lerp(SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start Matrix5x4.</param>
            <param name="end">End Matrix5x4.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Lerp(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4,System.Single)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start Matrix5x4.</param>
            <param name="end">End Matrix5x4.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.SmoothStep(SeeingSharp.Matrix5x4@,SeeingSharp.Matrix5x4@,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Performs a cubic interpolation between two matricies.
            </summary>
            <param name="start">Start Matrix5x4.</param>
            <param name="end">End Matrix5x4.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.SmoothStep(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix5x4.</param>
            <param name="end">End Matrix5x4.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Numerics.Vector4@,SeeingSharp.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, y-axis and w-axis
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Numerics.Vector4)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Single,System.Single,System.Single,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="w"></param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix5x4 that scales along the x-axis, y-axis, z-axis and w-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="w">Scaling factor that is applied along the w-axis.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Creates a Matrix5x4 that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Scaling(System.Single)">
            <summary>
            Creates a Matrix5x4 that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Translation(System.Numerics.Vector4@,SeeingSharp.Matrix5x4@)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Translation(System.Numerics.Vector4)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Translation(System.Single,System.Single,System.Single,System.Single,SeeingSharp.Matrix5x4@)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="w"></param>
            <param name="result">When the method completes, contains the created translation Matrix5x4.</param>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Translation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation Matrix5x4 using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="w">W-coordinate offset.</param>
            <returns>The created translation Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Addition(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first Matrix5x4 to add.</param>
            <param name="right">The second Matrix5x4 to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_UnaryPlus(SeeingSharp.Matrix5x4)">
            <summary>
            Assert a Matrix5x4 (return it unchanged).
            </summary>
            <param name="value">The Matrix5x4 to assert (unchange).</param>
            <returns>The asserted (unchanged) Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Subtraction(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first Matrix5x4 to subtract.</param>
            <param name="right">The second Matrix5x4 to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_UnaryNegation(SeeingSharp.Matrix5x4)">
            <summary>
            Negates a Matrix5x4.
            </summary>
            <param name="value">The Matrix5x4 to negate.</param>
            <returns>The negated Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Multiply(System.Single,SeeingSharp.Matrix5x4)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="right">The Matrix5x4 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Multiply(SeeingSharp.Matrix5x4,System.Single)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Division(SeeingSharp.Matrix5x4,System.Single)">
            <summary>
            Scales a Matrix5x4 by a given value.
            </summary>
            <param name="left">The Matrix5x4 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix5x4.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Equality(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.op_Inequality(SeeingSharp.Matrix5x4,SeeingSharp.Matrix5x4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Equals(SeeingSharp.Matrix5x4)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Matrix5x4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Matrix5x4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Matrix5x4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Matrix5x4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SeeingSharp.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:SeeingSharp.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along eaxh axis.
            </summary>
        </member>
        <member name="F:SeeingSharp.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its tarnslation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.#ctor(SeeingSharp.BoundingBox)">
            <summary>
            Creates an <see cref="T:SeeingSharp.OrientedBoundingBox"/> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>
            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates an <see cref="T:SeeingSharp.OrientedBoundingBox"/> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>
            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.#ctor(System.Numerics.Vector3[])">
            <summary>
            Creates an <see cref="T:SeeingSharp.OrientedBoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>
            This method is not for computing the best tight-fitting OrientedBoundingBox.
            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Transform(System.Numerics.Matrix4x4@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Transform(System.Numerics.Matrix4x4)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Scale(System.Numerics.Vector3@)">
            <summary>
            Scales the <see cref="T:SeeingSharp.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Scale(System.Numerics.Vector3)">
            <summary>
            Scales the <see cref="T:SeeingSharp.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:SeeingSharp.OrientedBoundingBox"/> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Translate(System.Numerics.Vector3@)">
            <summary>
            Translates the <see cref="T:SeeingSharp.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Translate(System.Numerics.Vector3)">
            <summary>
            Translates the <see cref="T:SeeingSharp.OrientedBoundingBox"/> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:SeeingSharp.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:SeeingSharp.OrientedBoundingBox"/> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>
            The property will return the actual size even if the scaling is applied using Scale method, 
            but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:SeeingSharp.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>
            This method is computationally expensive, so if no scale is applied to the transformation matrix
            use <see cref="P:SeeingSharp.OrientedBoundingBox.Size"/> property instead.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:SeeingSharp.OrientedBoundingBox"/> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:SeeingSharp.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:SeeingSharp.OrientedBoundingBox"/>.
            </summary>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(System.Numerics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(System.Numerics.Vector3)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.OrientedBoundingBox"/> contains a point. 
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(System.Numerics.Vector3[])">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.OrientedBoundingBox"/> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(SeeingSharp.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:SeeingSharp.OrientedBoundingBox"/> contains a <see cref="T:SeeingSharp.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="IgnoreScale">Optimize the check operation by assuming that <see cref="T:SeeingSharp.OrientedBoundingBox"/> has no scaling applied</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            This method is not desgined for <see cref="T:SeeingSharp.OrientedBoundingBox"/> which has a non-uniform scaling appliend to its transformation matrix.
            But any type of scaling applied using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(SeeingSharp.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:SeeingSharp.OrientedBoundingBox"/>
            </summary>
            <param name="obb">The OrientedBoundingBoxs to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for both <see cref="T:SeeingSharp.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.ContainsLine(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:SeeingSharp.OrientedBoundingBox"/> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:SeeingSharp.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Contains(SeeingSharp.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:SeeingSharp.OrientedBoundingBox"/> and <see cref="T:SeeingSharp.BoundingBox"/>
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>
            For accuracy, The transformation matrix for the <see cref="T:SeeingSharp.OrientedBoundingBox"/> must not have any scaling applied to it.
            Anyway, scaling using Scale method will keep this method accurate.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Intersects(SeeingSharp.Ray@,System.Numerics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="P:System.Numerics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Intersects(SeeingSharp.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:SeeingSharp.Ray"/> and a <see cref="T:SeeingSharp.OrientedBoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:SeeingSharp.BoundingBox"/> which contains all <see cref="T:SeeingSharp.OrientedBoundingBox"/> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetBoxToBoxMatrix(SeeingSharp.OrientedBoundingBox@,SeeingSharp.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Caculates the matrix required to transfer any point from one <see cref="T:SeeingSharp.OrientedBoundingBox"/> local corrdinates to another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Merge(SeeingSharp.OrientedBoundingBox@,SeeingSharp.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.
            </summary>
            <param name="A">The <see cref="T:SeeingSharp.OrientedBoundingBox"/> to merge into it.</param>
            <param name="B">The <see cref="T:SeeingSharp.OrientedBoundingBox"/> to be merged</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
            <remarks>
            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.
            </remarks>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.MergeInto(SeeingSharp.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:SeeingSharp.OrientedBoundingBox"/> to merge into.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Add(SeeingSharp.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:SeeingSharp.OrientedBoundingBox"/> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">
            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.
            </param>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Equals(SeeingSharp.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Numerics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Numerics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.op_Equality(SeeingSharp.OrientedBoundingBox,SeeingSharp.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.op_Inequality(SeeingSharp.OrientedBoundingBox,SeeingSharp.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:SeeingSharp.Rectangle">
            <summary>
            Define a Rectangle. This structure is slightly different from System.Drawing.Rectangle as It is 
            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.
            Although automatic casting from a to System.Drawing.Rectangle is provided by this class.
            </summary>
        </member>
        <member name="F:SeeingSharp.Rectangle.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Rectangle"/> struct.
            </summary>
            <param name="x">The left.</param>
            <param name="y">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Checks, if specified point is inside <see cref="T:SeeingSharp.Rectangle"/>.
            </summary>
            <param name="x">X point coordinate.</param>
            <param name="y">Y point coordinate.</param>
            <returns><c>true</c> if point is inside <see cref="T:SeeingSharp.Rectangle"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(System.Numerics.Vector2)">
            <summary>
            Checks, if specified <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:SeeingSharp.Rectangle"/>. 
            </summary> 
            <param name="vector2D">Coordinate <see cref="T:System.Numerics.Vector2"/>.</param>
            <returns><c>true</c> if <see cref="T:System.Numerics.Vector2"/> is inside <see cref="T:SeeingSharp.Rectangle"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:SeeingSharp.Rectangle.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Top">
            <summary>
            Gets or sets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>The right.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.X">
            <summary>
            Gets the left position.
            </summary>
            <value>The left position.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Y">
            <summary>
            Gets the top position.
            </summary>
            <value>The top position.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SeeingSharp.Rectangle.Location">
            <summary>Gets or sets the upper-left value of the Rectangle.</summary>
        </member>
        <member name="P:SeeingSharp.Rectangle.Center">
            <summary>Gets the Point that specifies the center of the rectangle.</summary>
        </member>
        <member name="P:SeeingSharp.Rectangle.IsEmpty">
            <summary>Gets a value that indicates whether the Rectangle is empty.</summary>
        </member>
        <member name="M:SeeingSharp.Rectangle.Offset(SeeingSharp.Point)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="amount">The values to adjust the position of the Rectangle by.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>Changes the position of the Rectangle.</summary>
            <param name="offsetX">Change in the x-position.</param>
            <param name="offsetY">Change in the y-position.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
            <param name="horizontalAmount">Value to push the sides out by.</param>
            <param name="verticalAmount">Value to push the top and bottom out by.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>Determines whether this Rectangle contains a specified point represented by its x- and y-coordinates.</summary>
            <param name="x">The x-coordinate of the specified point.</param>
            <param name="y">The y-coordinate of the specified point.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(SeeingSharp.Point)">
            <summary>Determines whether this Rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(SeeingSharp.Point@,System.Boolean@)">
            <summary>Determines whether this Rectangle contains a specified Point.</summary>
            <param name="value">The Point to evaluate.</param>
            <param name="result">[OutAttribute] true if the specified Point is contained within this Rectangle; false otherwise.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(SeeingSharp.Rectangle)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Contains(SeeingSharp.Rectangle@,System.Boolean@)">
            <summary>Determines whether this Rectangle entirely contains a specified Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
            <param name="result">[OutAttribute] On exit, is true if this Rectangle entirely contains the specified Rectangle, or false if not.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Intersects(SeeingSharp.Rectangle)">
            <summary>Determines whether a specified Rectangle intersects with this Rectangle.</summary>
            <param name="value">The Rectangle to evaluate.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Intersects(SeeingSharp.Rectangle@,System.Boolean@)">
            <summary>
            Determines whether a specified Rectangle intersects with this Rectangle.
            </summary>
            <param name="value">The Rectangle to evaluate</param>
            <param name="result">[OutAttribute] true if the specified Rectangle intersects with this one; false otherwise.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Intersect(SeeingSharp.Rectangle,SeeingSharp.Rectangle)">
            <summary>
            Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.
            </summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.Intersect(SeeingSharp.Rectangle@,SeeingSharp.Rectangle@,SeeingSharp.Rectangle@)">
            <summary>Creates a Rectangle defining the area where one rectangle overlaps with another rectangle.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <param name="result">[OutAttribute] The area where the two first parameters overlap.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Union(SeeingSharp.Rectangle,SeeingSharp.Rectangle)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
            <returns>Rectangle.</returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.Union(SeeingSharp.Rectangle@,SeeingSharp.Rectangle@,SeeingSharp.Rectangle@)">
            <summary>
            Creates a new Rectangle that exactly contains two other rectangles.
            </summary>
            <param name="value1">The first Rectangle to contain.</param>
            <param name="value2">The second Rectangle to contain.</param>
            <param name="result">[OutAttribute] The Rectangle that must be the union of the first two rectangles.</param>
        </member>
        <member name="M:SeeingSharp.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.Equals(SeeingSharp.Rectangle)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Rectangle"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Rectangle"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Rectangle"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.op_Equality(SeeingSharp.Rectangle,SeeingSharp.Rectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.Rectangle.op_Inequality(SeeingSharp.Rectangle,SeeingSharp.Rectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:SeeingSharp.Size2F">
            <summary>
            Structure using the same layout than Size2F from System.Drawing namespace.
            </summary>
        </member>
        <member name="M:SeeingSharp.Size2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Size2F"/> struct.
            </summary>
            <param name="width">The x.</param>
            <param name="height">The y.</param>
        </member>
        <member name="F:SeeingSharp.Size2F.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="F:SeeingSharp.Size2F.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="M:SeeingSharp.Size2F.Equals(SeeingSharp.Size2F)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Size2F.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Size2F.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SeeingSharp.Size2F.op_Equality(SeeingSharp.Size2F,SeeingSharp.Size2F)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SeeingSharp.Size2F.op_Inequality(SeeingSharp.Size2F,SeeingSharp.Size2F)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SeeingSharp.Viewport">
            <summary>
            Defines the viewport dimensions.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:SeeingSharp.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:SeeingSharp.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:SeeingSharp.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:SeeingSharp.Viewport.#ctor(SeeingSharp.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:SeeingSharp.Viewport.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:SeeingSharp.Viewport.Equals(SeeingSharp.Viewport)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.Viewport.op_Equality(SeeingSharp.Viewport,SeeingSharp.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.Viewport.op_Inequality(SeeingSharp.Viewport,SeeingSharp.Viewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.Viewport.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SeeingSharp.Viewport.Project(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:SeeingSharp.Viewport.Unproject(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="P:SeeingSharp.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:SeeingSharp.ViewportF">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:SeeingSharp.ViewportF.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:SeeingSharp.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:SeeingSharp.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ViewportF"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:SeeingSharp.ViewportF.#ctor(SeeingSharp.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.ViewportF"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="P:SeeingSharp.ViewportF.Bounds">
            <summary>
            Gets the size of this resource.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:SeeingSharp.ViewportF.Equals(SeeingSharp.ViewportF)">
            <summary>
            Determines whether the specified <see cref="T:SeeingSharp.ViewportF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:SeeingSharp.ViewportF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:SeeingSharp.ViewportF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.op_Equality(SeeingSharp.ViewportF,SeeingSharp.ViewportF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.op_Inequality(SeeingSharp.ViewportF,SeeingSharp.ViewportF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.Project(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:SeeingSharp.ViewportF.Unproject(System.Numerics.Vector3,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="P:SeeingSharp.ViewportF.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="M:SeeingSharp.ViewportF.op_Implicit(SeeingSharp.Viewport)~SeeingSharp.ViewportF">
            <summary>
            Performs an explicit conversion from <see cref="T:SeeingSharp.Viewport"/> to <see cref="T:SeeingSharp.ViewportF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateOrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateRotationDirection(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Gets a rotation matrix for the given direction vectors.
            </summary>
            <param name="upVector">The up vector (standard: y-axis).</param>
            <param name="forwardVector">The forward vector (standard: x-axis)</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreatePerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateLookAtLH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateLookAtLH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.CreateLookAtRH(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Matrix4x4@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.LookAtRH(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.GetValue(System.Numerics.Matrix4x4,System.Int32)">
            <summary>
            Gets the value at the given index of the given matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.SetValue(System.Numerics.Matrix4x4,System.Int32,System.Single)">
            <summary>
            Sets the value at the given index of the given matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.GetValue(System.Numerics.Matrix4x4,System.Int32,System.Int32)">
            <summary>
            Gets the component at the specified index.
            </summary>
            <param name="matrix">The matrix from which to get the value.</param>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Matrix4x4Ex.SetValue(System.Numerics.Matrix4x4,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the component at the specified index.
            </summary>
            <param name="matrix">The matrix on which to set the value.</param>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <param name="value">The value to be set.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.NormalFromHVRotation(System.Single,System.Single)">
            <summary>
            Generates a normal out of given horizontal and vertical rotation.
            </summary>
            <param name="horizontalRotation">Horizontal rotation value.</param>
            <param name="verticalRotation">Vertical rotation value.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.NormalFromHVRotation(System.Numerics.Vector2)">
            <summary>
            Generates a normal out of given horizontal and vertical rotation.
            </summary>
            <param name="rotation">Vector containing horizontal and vertical rotations.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Average(System.Numerics.Vector3[])">
            <summary>
            Gets an average vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Average(System.Collections.Generic.List{System.Numerics.Vector3})">
            <summary>
            Gets an average vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.ToHVRotation(System.Numerics.Vector3)">
            <summary>
            Converts this vector to a vector containing horizontal and vertical rotation values.
            </summary>
            <param name="vector">The vector to be converted.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Sum(System.Numerics.Vector3[])">
            <summary>
            Gets the a vector containing the sum of each given vector.
            </summary>
            <param name="vectors">The vectors to add one by one.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Sum(System.Collections.Generic.List{System.Numerics.Vector3})">
            <summary>
            Gets the a vector containing the sum of each given vector.
            </summary>
            <param name="vectors">The vectors to add one by one.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.ToHVRotation(System.Numerics.Vector3,System.Single@,System.Single@)">
            <summary>
            Writes horizontal and vertical rotation values to given parameters.
            </summary>
            <param name="vector">The vector to be converted.</param>
            <param name="hRotation">Parameter for horizontal rotation.</param>
            <param name="vRotation">Parameter for vertical rotation.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.CalculateTriangleNormal(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Calculates the normal of the given triangle
            </summary>
            <param name="p0">First point of the triangle.</param>
            <param name="p1">Second point of the triangle.</param>
            <param name="p2">Third point of the triangle.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.CalculateTriangleNormal(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Boolean)">
            <summary>
            Calculates the normal of the given triangle
            </summary>
            <param name="p0">First point of the triangle.</param>
            <param name="p1">Second point of the triangle.</param>
            <param name="p2">Third point of the triangle.</param>
            <param name="doNormalize">Setting this parameter to false causes the result normal to be not normalized after calculation.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.IsEmpty(System.Numerics.Vector3)">
            <summary>
            Is this vector empty?
            </summary>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Project(System.Numerics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Project(System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Unproject(System.Numerics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4@,System.Numerics.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Unproject(System.Numerics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Numerics.Matrix4x4)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:SeeingSharp.Vector3Ex.Reflect(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
    </members>
</doc>
