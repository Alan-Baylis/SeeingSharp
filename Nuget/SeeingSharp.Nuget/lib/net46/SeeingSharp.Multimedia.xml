<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SeeingSharp.Multimedia</name>
    </assembly>
    <members>
        <member name="T:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer">
            <summary>
            This class provides a generic way to draw Direct2D content into a Direct3D texture (typically the render target).
              - The first way over Device and DeviceContext works on UNIVERSAL build
                see https://msdn.microsoft.com/en-us/library/windows/desktop/hh780339(v=vs.85).aspx 
              - The second way for direct rendering on the render target works on windows 8 (Desktop and Store)
              - In Windows 7, the platform update is needed to to the default way
                http://msdn.microsoft.com/en-us/library/windows/desktop/jj863687(v=vs.85).aspx
              - Otherwhiese, the Fallback-Method is used (render Direct2D content to a shared texture, then render it onto the render target)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.#ctor(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.Texture2D,System.Int32,System.Int32,SeeingSharp.Multimedia.Core.DpiScaling)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.Dispose">
            <summary>
            Disposes all resources of this object completely.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.CreateResources(System.Int32,System.Int32,SeeingSharp.Multimedia.Core.DpiScaling)">
            <summary>
            Creates all resources 
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.BeginDraw(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Begins the draw.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.EndDraw(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Finishes Direct2D drawing.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.IsLoaded">
            <summary>
            Is this resource loaded correctly?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.RenderTarget2D">
            <summary>
            Gets the Direct2D render target.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Direct2DOverlayRenderer.Graphics">
            <summary>
            Gets the 2D graphics object.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.EngineMainLoop">
            <summary>
            The core main loop for coordinating render and update processes over all 
            registered RenderLoops.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineMainLoop"/> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.WaitForNextPassedLoop">
            <summary>
            Waits for next passed loop cycle.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.RegisterForUnload(SeeingSharp.Multimedia.Drawing2D.Drawing2DResourceBase)">
            <summary>
            Registers the given resource for unloading.
            </summary>
            <param name="drawing2DResourceBase">The resource to be unloaded.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.RegisterRenderLoop(SeeingSharp.Multimedia.Core.RenderLoop)">
            <summary>
            Registers the given RenderLoop object.
            </summary>
            <param name="renderLoop">The RenderLoop to be registered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.DeregisterRenderLoop(SeeingSharp.Multimedia.Core.RenderLoop)">
            <summary>
            Deregisters the given RenderLoop object.
            </summary>
            <param name="renderLoop">The render loop to be deregistered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.Start(System.Threading.CancellationToken)">
            <summary>
            Starts the engine's main loop.
            </summary>
            <param name="cancelToken"></param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.UpdateAndPrepareRendering(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.RenderLoop},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.Scene},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.EngineDevice},System.Collections.Generic.List{SeeingSharp.Multimedia.Input.InputStateBase},SeeingSharp.Multimedia.Core.UpdateState)">
            <summary>
            Updates the scene's and prepares all views for rendering.
            </summary>
            <param name="renderingRenderLoops">The registered render loops on the current pass.</param>
            <param name="scenesToRender">All scenes to be updated / rendered.</param>
            <param name="devicesInUse">The rendering devices that are in use.</param>
            <param name="inputStates">All input states queried during last render.</param>
            <param name="updateState">Current global update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.RenderAndUpdateBesideAsync(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.RenderLoop},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.Scene},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.EngineDevice},SeeingSharp.Multimedia.Core.UpdateState,System.Collections.Generic.List{SeeingSharp.Multimedia.Input.InputStateBase})">
            <summary>
            Renders all given scenes using the different devices and performs "UpdateBesideRendering" step.
            </summary>
            <param name="registeredRenderLoops">The registered render loops on the current pass.</param>
            <param name="scenesToRender">All scenes to be updated / rendered.</param>
            <param name="devicesInUse">The rendering devices that are in use.</param>
            <param name="updateState">Current global update state.</param>
            <param name="inputStates">The list containing all queried input states.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.UpdateRenderLoopRegistrationsAsync(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.RenderLoop})">
            <summary>
            Updates current RenderLoop registrations.
            </summary>
            <param name="renderingRenderLoops">The list of currently working RenderLoops.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.QueryForScenesAndCameras(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.RenderLoop},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.Scene},System.Collections.Generic.List{SeeingSharp.Multimedia.Drawing3D.Camera3DBase})">
            <summary>
            Queries for all scenes to be rendered for all given RenderLoop objects.
            </summary>
            <param name="registeredRenderLoops">The render loops from which to get the scenes.</param>
            <param name="scenesToRender">The collection to be modiefied.</param>
            <param name="camerasToUpdate">A list containing all cameras which are defined in currently bound scenes.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.QueryForDevicesInUse(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.RenderLoop},System.Collections.Generic.List{SeeingSharp.Multimedia.Core.EngineDevice})">
            <summary>
            Queries for all devices in use by given RenderLoop objects.
            </summary>
            <param name="registeredRenderLoops">The render loops from which to get the devices.</param>
            <param name="devicesInUse">The collection to be modiefied.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineMainLoop.RegisterSceneForUnload(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Registers the given scene for unload.
            </summary>
            <param name="scene">The scene to be registered.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineMainLoop.Current">
            <summary>
            Gets the current singleton instance.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineMainLoop.IsRunning">
            <summary>
            Is the MainLoop running?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineMainLoop.RegisteredRenderLoopCount">
            <summary>
            Gets the total count of registered RenderLoop objects.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.#ctor(SeeingSharp.Multimedia.Core.TargetHardware,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.GraphicsCore"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.InitializeDefaultAsync">
            <summary>
            Performs default initialization logic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.Initialize">
            <summary>
            Initializes the graphics engine.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.Initialize(SeeingSharp.Multimedia.Core.TargetHardware,System.Boolean)">
            <summary>
            Initializes the GraphicsCore object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.Initialize(SeeingSharp.Multimedia.Core.TargetHardware,System.Boolean,SeeingSharp.Multimedia.Core.SeeingSharpPlatform)">
            <summary>
            Initializes the GraphicsCore object with the given target platform value.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.IsAnyHardwareDeviceLoaded">
            <summary>
            Checks if there is any hardware device loaded.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.SetDefaultDeviceToSoftware">
            <summary>
            Sets the default device to a software device.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.SetDefaultDeviceToHardware">
            <summary>
            Sets the default device to a hardware device.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.Unload">
            <summary>
            Unloads the GraphicsCore object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.BeginMeasureActivityDuration(System.String)">
            <summary>
            Starts measuring the duration of the given activity.
            </summary>
            <param name="activityName">The name of the activity.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.ExecuteAndMeasureActivityDuration(System.String,System.Action)">
            <summary>
            Executes the given action and measures the time it takes.
            </summary>
            <param name="activityName">Name of the activity.</param>
            <param name="activityAction">The activity action.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.NotifyActivityDuration(System.String,System.Int64)">
            <summary>
            Notifies the duration of the given activity.
            </summary>
            <param name="activityName"></param>
            <param name="durationTicks"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.GetNextGenericResourceKey">
            <summary>
            Gets the next generic resource key.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCore.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.Current">
            <summary>
            Gets current singleton instance.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.HardwareInfo">
            <summary>
            Gets the dxgi factory object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.IsInitialized">
            <summary>
            Is GraphicsCore initialized?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.IsDebugEnabled">
            <summary>
            Is debug enabled?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.ResourceKeyGenerator">
            <summary>
            Gets the current resource key generator.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.TargetHardware">
            <summary>
            Gets the target hardware.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.CurrentPlatform">
            <summary>
            Gets the platform on which this application is running currently.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.Configuration">
            <summary>
            Gets current graphics configuration.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.DefaultDevice">
            <summary>
            Gets the default device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.Devices">
            <summary>
            Gets a collection containing all loaded devices.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.DeviceCount">
            <summary>
            Gets the total count of loaded devices.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.DefaultSoftwareDevice">
            <summary>
            Gets the default software device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.LoadedDevices">
            <summary>
            Gets a collection containing all devices.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.InputHandlers">
            <summary>
            Gets a list containing all input handlers.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.ImportersAndExporters">
            <summary>
            Gets an object which manages all importers and exporters.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.MainLoop">
            <summary>
            Gets the current main loop object of the graphics engine.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.SoundManager">
            <summary>
            Gets the currently running SoundManager object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCore.PerformanceCalculator">
            <summary>
            Gets the current performance calculator.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GraphicsCore.FactoryWIC">
            <summary>
            Gets the WIC factory object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GraphicsCore.FactoryD2D">
            <summary>
            Gets the Direct2D factory object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GraphicsCore.FactoryDWrite">
            <summary>
            Gets the DirectWrite factory object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GraphicsCore.XAudioDevice">
            <summary>
            The global XAudio2 device
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDefaultSwapChain(System.Windows.Forms.Control,SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Creates a default SwapChain for the given target control.
            </summary>
            <param name="targetControl">Target control of the swap chain.</param>
            <param name="device">Graphics device.</param>
            <param name="gfxConfig">The current graphics configuration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadTextureFromBitmap(SeeingSharp.Multimedia.Core.EngineDevice,System.Drawing.Bitmap)">
            <summary>
            Converts a System.Drawing.Bitmap to a DirectX 11 texture object.
            </summary>
            <param name="device">Device on wich the resource should be created.</param>
            <param name="bitmap">The source bitmap.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadTextureFromBitmap(SeeingSharp.Multimedia.Core.EngineDevice,System.Drawing.Bitmap,System.Int32)">
            <summary>
            Converts a System.Drawing.Bitmap to a DirectX 11 texture object.
            </summary>
            <param name="device">Device on wich the resource should be created.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="mipLevels">Total count of levels for mipmapping.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapFromStagingTexture(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.Texture2D,System.Int32,System.Int32)">
            <summary>
            Loads a bitmap from the given texture. Be careful: The texture musst have CPU read access and this only matches for staging textures.
            </summary>
            <param name="device">The device on which the texture is created.</param>
            <param name="stagingTexture">The texture to be loaded into the bitmap.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateSharedTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32)">
            <summary>
            Creates a Direct3D 11 texture that can be shared between more devices.
            </summary>
            <param name="device">The Direct3D 11 device.</param>
            <param name="width">The width of the generated texture.</param>
            <param name="height">The height of the generated texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadTexture2D(SeeingSharp.Multimedia.Core.EngineDevice,System.IO.Stream)">
            <summary>
            Loads the texture2 D from stream.
            </summary>
            <param name="device">The device on wich to create the texture.</param>
            <param name="inStream">The source stream.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadTexture2D(SeeingSharp.Multimedia.Core.EngineDevice,System.String)">
            <summary>
            Loads a new texture from the given file path.
            </summary>
            <param name="device">The device on wich to create the texture.</param>
            <param name="fileName">The source file</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapSource(SeeingSharp.Util.ResourceLink)">
            <summary>
            Loads a bitmap using WIC.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapSource(System.IO.Stream)">
            <summary>
            Loads a bitmap using WIC.
            </summary>
            <param name="inStream">The stream from wich to load the texture file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapSource_D2D(SeeingSharp.Util.ResourceLink)">
            <summary>
            Loads a bitmap using WIC.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapSource_D2D(System.IO.Stream)">
            <summary>
            Loads a bitmap using WIC.
            </summary>
            <param name="inStream">The stream from wich to load the texture file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadTexture2DFromBitmap(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.WicBitmapSourceInternal)">
            <summary>
            Creates a <see cref="T:SharpDX.Direct3D11.Texture2D"/> from a WIC <see cref="T:SharpDX.WIC.BitmapSource"/>
            </summary>
            <param name="device">The Direct3D11 device</param>
            <param name="bitmapSourceWrapper">The WIC bitmap source</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.LoadBitmapFromMappedTexture(SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Loads a bitmap from the given mapped texture.
            </summary>
            <param name="mappedTexture">The mapped texture from which to read all pixel data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDefaultViewport(System.Int32,System.Int32)">
            <summary>
            Creates a default viewport for the given width and height
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SharpDX.DXGI.Format)">
            <summary>
            Creates a standard texture with the given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="format">The format which is used to create the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateCpuWritableTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SharpDX.DXGI.Format)">
            <summary>
            Creates a standard texture with the given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="format">The format which is used to create the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SharpDX.DataBox[])">
            <summary>
            Creates a standard texture with the given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="rawData">Raw data to be loaded into the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateStagingTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SharpDX.DXGI.Format)">
            <summary>
            Creates a staging texture which enables copying data from gpu to cpu memory.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="format">The format used to create the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateStagingTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32)">
            <summary>
            Creates a staging texture which enables copying data from gpu to cpu memory.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateRenderTargetTextureNormalDepth(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Creates a render target texture with the given width and height.
            This texture is used to receive normal and depth data (xyzw components) and stores data in floating point format.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="gfxConfig">The GFX configuration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateRenderTargetTextureObjectIDs(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Creates a render target texture with the given width and height.
            This texture is used to receive ObjectIDs and stores data as single unsigned integers (32-Bit).
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="gfxConfig">The GFX configuration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateRenderTargetTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Creates a render target texture with the given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="gfxConfig">The GFX configuration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDepthBufferTexture(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32,System.Int32,SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Creates a depth buffer texture with given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
            <param name="gfxConfig">Current graphics configuration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDepthBufferView(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Create a new DepthBuffer view to bind the given depth buffer to the rendering device.
            </summary>
            <param name="device">The device on which to create the view.</param>
            <param name="depthBuffer">The target resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.GetDepthBiasValue(SeeingSharp.Multimedia.Core.EngineDevice,System.Single)">
            <summary>
            Calculate the Bias value depending on the given value to be added to the depth buffer.
            </summary>
            <param name="device">The device for which to get the value.</param>
            <param name="zValue">The z value to be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDynamicVertexBuffer``1(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32)">
            <summary>
            Creates a dynamic vertex buffer for the given vertex type and maximum capacity.
            </summary>
            <typeparam name="T">Type of the vertices.</typeparam>
            <param name="device">Graphics device.</param>
            <param name="vertexCount">Maximum count of vertices within the buffer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateImmutableVertexBuffer``1(SeeingSharp.Multimedia.Core.EngineDevice,``0[][])">
            <summary>
            Creates an immutable vertex buffer from the given vertex array.
            </summary>
            <typeparam name="T">Type of a vertex.</typeparam>
            <param name="device">Graphics device.</param>
            <param name="vertices">The vertex array.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateImmutableIndexBuffer(SeeingSharp.Multimedia.Core.EngineDevice,System.Int32[][])">
            <summary>
            Creates an immutable index buffer from the given index array.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="indices">Source index array.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.ResizeGdiBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the given bitmap to given size.
            </summary>
            <param name="bitmapToResize">The bitmap to resize.</param>
            <param name="newWidth">Width of the generated bitmap.</param>
            <param name="newHeight">Height of the genrated bitmap.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.SetBitmapContents(SharpDX.Direct2D1.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Copies all contents of the given gdi bitmap into the given Direct2D bitmap.
            </summary>
            <param name="targetBitmap">Target Direct2D bitmap.</param>
            <param name="drawingBitmap">The source gdi bitmap.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.SafeDispose``1(``0@)">
            <summary>
            Disposes the given object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.DisposeObject``1(``0)">
            <summary>
            Disposes the given object and returns null.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.SafeDisposeLazy``1(System.Lazy{``0}@)">
            <summary>
            Disposes the given object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.DisposeObjectLazy``1(System.Lazy{``0})">
            <summary>
            Disposes the given lazy object (if created already).
            </summary>
            <param name="objectToDispose">The object to be disposed.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.DisposeObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Disposes all objects within the given enumeration.
            </summary>
            <param name="enumeration">Enumeration containing all disposable objects.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.GetShaderResourcePath(SeeingSharp.Multimedia.Core.EngineDevice,System.String,System.String,System.String)">
            <summary>
            Gets the resource file for the given shader.
            </summary>
            <param name="device">The target graphics device.</param>
            <param name="subdirectory">The subdirectory where the shader is located.</param>
            <param name="shaderNameWithoutExt">The name of the shader without extension.</param>
            <param name="shaderModel">The shader model to be loaded.</param>
            <returns>A tuple containing namespace and filename.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.GetShaderResourceLink(SeeingSharp.Multimedia.Core.EngineDevice,System.String,System.String,System.String)">
            <summary>
            Gets the resource link to the given shader.
            </summary>
            <param name="subdirectory">The subdirectory where the shader is located.</param>
            <param name="shaderNameWithoutExt">The name of the shader without extension.</param>
            <param name="device">The target device object.</param>
            <param name="shaderModel">The target shader model.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.GetVertexShaderResource(SeeingSharp.Multimedia.Core.EngineDevice,System.String,System.String)">
            <summary>
            Gets a vertex shader resource pointing to given shader file.
            </summary>
            <param name="device">The target device object.</param>
            <param name="subdirectory">The subdirectory where the shader is located.</param>
            <param name="shaderNameWithoutExt">The name of the shader without extension.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.GetPixelShaderResource(SeeingSharp.Multimedia.Core.EngineDevice,System.String,System.String)">
            <summary>
            Gets a pixel shader resource pointing to given shader file.
            </summary>
            <param name="device">The target device object.</param>
            <param name="subdirectory">The subdirectory where the shader is located.</param>
            <param name="shaderNameWithoutExt">The name of the shader without extension.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateDefaultTextureSampler(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel)">
            <summary>
            Creates a default exture sampler state.
            </summary>
            <param name="device">The device to create the state for.</param>
            <param name="samplerQualityLevel">The target sampler quality</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsHelper.CreateRenderTargetTextureDummy(SharpDX.Direct3D11.Device,System.Int32,System.Int32)">
            <summary>
            Creates a render target texture with the given width and height.
            </summary>
            <param name="device">Graphics device.</param>
            <param name="width">Width of generated texture.</param>
            <param name="height">Height of generated texture.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.RenderLoop">
            <summary>
            This class controls rendering logic behind each view object.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.RenderLoop.DeviceChanged">
            <summary>
            Raised when the corresponding device has changed.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.RenderLoop.CameraChanged">
            <summary>
            Raised when the current camera has changed.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.RenderLoop.ManipulateFilterList">
            <summary>
            Raised when it is possible for the UI thread to manipulate current filter list.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.#ctor(System.Threading.SynchronizationContext,System.Func{SeeingSharp.Multimedia.Core.EngineDevice,System.Tuple{SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.DepthStencilView,SharpDX.ViewportF,SeeingSharp.Size2,SeeingSharp.Multimedia.Core.DpiScaling}},System.Action{SeeingSharp.Multimedia.Core.EngineDevice},System.Func{SeeingSharp.Multimedia.Core.EngineDevice,System.Boolean},System.Action{SeeingSharp.Multimedia.Core.EngineDevice},System.Action{SeeingSharp.Multimedia.Core.EngineDevice},System.Action{SeeingSharp.Multimedia.Core.EngineDevice},System.Func{System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Input.InputStateBase}})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderLoop" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.SetCurrentViewSize(System.Int32,System.Int32)">
            <summary>
            Sets the current with and height of the view.
            The RenderLoop will apply the values later.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.GetViewIndex">
            <summary>
            Gets the current index of this view within the current scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.SetRenderingDevice(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Sets the given rendering device for this renderloop.
            </summary>
            <param name="device">The device to be set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.SetScene(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Sets the scene for rendering
            </summary>
            <param name="scene">The scene to be set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.ForceViewReload">
            <summary>
            Forces the view to reload itself.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.WaitForNextFinishedRenderAsync">
            <summary>
            Waits for the next finished render process.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.Register2DDrawingLayerAsync(System.Action{SeeingSharp.Multimedia.Drawing2D.Graphics2D})">
            <summary>
            Registers the given drawing layer that is used for 2d rendering.
            </summary>
            <param name="drawAction">The action that performs 2D drawing</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.FinishVideoWriterAsync(SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter)">
            <summary>
            Finishes the given VideoWriter object and deregisters it from this RenderLoop.
            </summary>
            <param name="videoWriter">The VideoWriter to be finished.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.RegisterVideoWriterAsync(SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter)">
            <summary>
            Applies the given VideoWriter to this RenderLoop.
            </summary>
            <param name="videoWriter">The VideoWriter to be applied.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.Register2DDrawingLayerAsync(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Registers the given drawing layer that is used for 2d rendering.
            </summary>
            <param name="drawingLayer">The layer to be registered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.Deregister2DDrawingLayerAsync(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Deregisters the given drawing layer from this RenderLoop.
            </summary>
            <param name="drawingLayer">The drawing layer to be deregistered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.PickObjectAsync(SeeingSharp.Point,SeeingSharp.Multimedia.Core.PickingOptions)">
            <summary>
            Gets the object on the given pixel location (location local to this control).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.ExchangeViewConfigurationAsync(SeeingSharp.Multimedia.Core.GraphicsViewConfiguration)">
            <summary>
            Changes the ViewConfiguration object.
            </summary>
            <param name="newViewConfiguration">The new configuration object to be applied.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.GetScreenshotGdiAsync">
            <summary>
            Takes a screenshot and returns it as a gdi bitmap.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.GetScreenshotGdiInternal">
            <summary>
            Gets a screenshot in form of a gdi bitmap.
            (be careful. This call is executed synchronous.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.ResetRenderCounter">
            <summary>
            Resets the render counter to zero.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.RefreshViewResources">
            <summary>
            Refreshes the view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.UnloadViewResourcesAsync">
            <summary>
            Unload all loaded ViewResources.
            This call ensures that it will be executed in the correct UI thread.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.UnloadViewResources">
            <summary>
            Unloads all view resources (is also called from EngineMainLoop in a synchronized execution block).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.ResetFlagsBeforeRendering">
            <summary>
            Internal method that resets some flags directly before rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.QueryViewRelatedInputStateAsync">
            <summary>
            Queries for all view related input states (e. g. Mouse, Touch, Keyboard).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.PrepareRenderAsync">
            <summary>
            Prepares rendering (refreshes view resources, post last rendered image to the view, ...)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.DrawVideoFrames">
            <summary>
            This method call draws the current frame into all registered video writers.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.PresentFrameInternal">
            <summary>
            Presents the current frame.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.Render">
            <summary>
            Renders this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.DeregisterRenderLoop">
            <summary>
            Deregisters this view from the render loop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.RegisterRenderLoop">
            <summary>
            Registers this view on the render loop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderLoop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.ViewInformation">
            <summary>
            Gets an identifyer related to this render looop.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.ViewConfiguration">
            <summary>
            Gets the current view configuration.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.Scene">
            <summary>
            Gets the current scene object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.TargetScene">
            <summary>
            Gets the current target scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.ViewResourcesLoaded">
            <summary>
            Are view resources loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.DiscardRendering">
            <summary>
            Discard rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.UISynchronizationContext">
            <summary>
            Gets the current SynchronizationContext.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.ClearColor">
            <summary>
            Gets or sets the current clear color.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.Filters">
            <summary>
            Gets the collection containing all filters.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.CountVideoWriters">
            <summary>
            Counts the currently applied video writers.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.Camera">
            <summary>
            Gets or sets current camera object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.CurrentViewSize">
            <summary>
            Gets the current view size.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.Device">
            <summary>
            Gets the device this renderloop is using.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderLoop.VisibleObjectCount">
            <summary>
            Gets the total count of visible objects.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderLoop.VisibleObjectCountInternal">
            <summary>
            Internal field that is used to count visible objects.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderLoop.IsRegisteredOnMainLoop">
            <summary>
            Is this RenderLoop registered on the main loop?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassInfo.#cctor">
            <summary>
            Initializes the <see cref="T:SeeingSharp.Multimedia.Core.RenderPassInfo" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderPassInfo" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderPassInfo.AllRenderPasses">
            <summary>
            Gets a collection containing all render passes.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderPassInfo.Name">
            <summary>
            Gets the name of this pass.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderPassSubscription.SubscriptionIndex">
            <summary>
            Very important variable to find the subscription in the host collection!
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderPassSubscription.IsSubscribed">
            <summary>
            A special flag for optimizing unsubscription process.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassSubscription.#ctor(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset,SeeingSharp.Multimedia.Core.RenderPassInfo,SeeingSharp.Multimedia.Core.SceneObject,System.Action{SeeingSharp.Multimedia.Core.RenderState})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderPassSubscription" /> struct.
            </summary>
            <param name="layerViewSubset">The ViewRelatedSceneLayerSubset object this subscription belongs to.</param>
            <param name="renderPass">The render pass on which to register.</param>
            <param name="sceneObject">The scene object which should be registered.</param>
            <param name="renderMethod">The render method which is to be registered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassSubscription.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassSubscription.Unsubscribe">
            <summary>
            Unsubscribes this subscription.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.#ctor(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Util.PerformanceAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderState"/> class.
            </summary>
            <param name="device">The device object.</param>
            <param name="performanceCalculator">The object used to calculate performance values</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.#ctor(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Util.PerformanceAnalyzer,SeeingSharp.Multimedia.Core.RenderTargets,SharpDX.ViewportF,SeeingSharp.Multimedia.Drawing3D.Camera3DBase,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderState"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ForceMaterial(SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Forces the use of the given material.
            </summary>
            <param name="material">The material to be forced for further rendering. Null means to disable material forcing.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ApplyMaterial(SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Applies the given material to the renderer.
            </summary>
            <param name="resourceToApply">The material to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ApplyMaterial(SeeingSharp.Multimedia.Drawing3D.MaterialResource,SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode)">
            <summary>
            Applies the given material to the renderer.
            </summary>
            <param name="resourceToApply">The material to apply.</param>
            <param name="instancingMode">The instancing mode for which to apply the material.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearChachedAppliedMaterial">
            <summary>
            An internal helper method which tells the RenderState to clear
            the cached material resource, which was applied lastly.
            This method musst be called if other parts (e. g. postprocessing) work
            with shaders or such like outside of the renderstate.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.Dispose">
            <summary>
            Disposes all resources of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.Reset(SeeingSharp.Multimedia.Core.RenderTargets,SharpDX.ViewportF,SeeingSharp.Multimedia.Drawing3D.Camera3DBase,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Resets the render state.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="camera">The camera for the new render target.</param>
            <param name="viewInformation">The view information.</param>
            <param name="renderTargets">The render targets used for rendering.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearState">
            <summary>
            Applies current render target settings.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearCurrentDepthBuffer">
            <summary>
            Clears current depth buffer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearCurrentDepthBuffer(System.Single,System.Byte)">
            <summary>
            Clears current depth buffer.
            </summary>
            <param name="depth">The depth value to write over the whole buffer.</param>
            <param name="stencil">The stencil value to write over the whole buffer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearCurrentColorBuffer(SeeingSharp.Color4)">
            <summary>
            Clears current color buffer.
            </summary>
            <param name="color">The culor used for clering.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ClearCurrentNormalDepth">
            <summary>
            Clears current normal-depth buffer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.PushScene(SeeingSharp.Multimedia.Core.Scene,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Pushes a scene onto the stack.
            </summary>
            <param name="scene">Scene to be pushed onto the stack.</param>
            <param name="resourceDictionary">The <see cref="T:SeeingSharp.Multimedia.Core.ResourceDictionary"/> to be pushed onto the stack.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.PopScene">
            <summary>
            Pops a scene from the stack.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.PushRenderTarget(SeeingSharp.Multimedia.Core.RenderTargets,SharpDX.ViewportF,SeeingSharp.Multimedia.Drawing3D.Camera3DBase,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Pushes a new render target onto the render target stack.
            </summary>
            <param name="viewport">The viewport object.</param>
            <param name="renderTargets">A structure containing all relevant render targets.</param>
            <param name="camera">The camera for the new render target.</param>
            <param name="viewInformation">The view information.</param>
            <exception cref="T:System.ObjectDisposedException">RenderState</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.PopRenderTarget">
            <summary>
            Pops a render target from the render target stack.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.ApplyCurrentTarget">
            <summary>
            Applies current target settings.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.GenerateWorldViewProj(System.Numerics.Matrix4x4)">
            <summary>
            Generates a WorldViewProjection matrix.
            </summary>
            <param name="world">The world matrix.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.Device">
            <summary>
            Gets current Device object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.ViewProj">
            <summary>
            Gets the ViewProj matrix.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.World">
            <summary>
            Gets current world matrix.
            </summary>
            <value>The world.</value>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.CurrentScene">
            <summary>
            Gets current scene object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.CurrentResources">
            <summary>
            Gets the current ResourceDictionary object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.Camera">
            <summary>
            Gets current camera.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.ViewInformation">
            <summary>
            Gets current common information about the view.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.Viewport">
            <summary>
            Gets the current main viewport.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.Disposed">
            <summary>
            Is this object disposed?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderState.ViewIndex">
            <summary>
            Gets or sets the current view index.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderState.DeviceIndex">
            <summary>
            Gets or sets the current device index.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderState.RenderTarget2D">
            <summary>
            Gets or sets the current render target for 2D rendering.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.ForcedMaterial">
            <summary>
            Gets the currently forced material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.Graphics2D">
            <summary>
            Gets or sets the current object for 2D rendering.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.CurrentRenderTargets">
            <summary>
            Gets the currently bound render targets (on top of the render stack).
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.RenderState.RenderStackEntry">
            <summary>
            HelperClass for RenderState class
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.RenderStackEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderState.RenderStackEntry"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderState.RenderStackEntry.ViewProj">
            <summary>
            Gets the current view projection matrix.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderState.RenderStackEntry.Apply(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Applies all properties.
            </summary>
            <param name="deviceContext">Target DeviceContext object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderTargets.#ctor(SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderTargets"/> struct.
            </summary>
            <param name="colorBuffer">The color buffer.</param>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderTargets.#ctor(SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderTargets"/> struct.
            </summary>
            <param name="colorBuffer">The color buffer.</param>
            <param name="depthStencilBuffer">The depth stencil buffer.</param>
            <param name="objectIDBuffer">The object identifier buffer.</param>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderTargets.ColorBuffer">
            <summary>
            The default color output.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderTargets.DepthStencilBuffer">
            <summary>
            The default depth-stencil output.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderTargets.ObjectIDBuffer">
            <summary>
            The ObjectID output buffer.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.RenderTargets.NormalDepthBuffer">
            <summary>
            The normal/depth output buffer (processes the data for input on other postprocessing effects).
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState">
            <summary>
            A UpdateState object which holds special variables for a Scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState.#ctor(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState.OnStartSceneUpdate(SeeingSharp.Multimedia.Core.Scene,SeeingSharp.Multimedia.Core.UpdateState,System.Collections.Generic.List{SeeingSharp.Multimedia.Input.InputStateBase})">
            <summary>
            Called just before the update pass of a scene object starts.
            </summary>
            <param name="targetScene">The scene for which to prepare this state object</param>
            <param name="updateState">The update state.</param>
            <param name="unfilteredInputStates">A list containing all queried input states (still not filtered by scene!)</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState.UpdateTime">
            <summary>
            Gets current update time.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState.UpdateTimeMilliseconds">
            <summary>
            Gets the current update time in milliseconds.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneRelatedUpdateState.InputStates">
            <summary>
            Gets a collection containing all gathered input states.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.UpdateState">
            <summary>
            A state object created by the EngineMainLoop object which controls
            the update pass.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.UpdateState.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.Core.UpdateState"/> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.UpdateState.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.UpdateState"/> class.
            </summary>
            <param name="updateTime">The update time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.UpdateState.CopyForSceneUpdate">
            <summary>
            Called internally by EngineMainLoop and creates a copy of this object
            for each updated scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.UpdateState.Reset(System.TimeSpan)">
            <summary>
            Resets this UpdateState to the given update time.
            </summary>
            <param name="updateTime">The update time.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.UpdateState.UpdateTime">
            <summary>
            Gets current update time.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.UpdateState.UpdateTimeMilliseconds">
            <summary>
            Gets the current update time in milliseconds.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewInformation.#ctor(SeeingSharp.Multimedia.Core.RenderLoop)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ViewInformation" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewInformation.UpdateFrustum(System.Numerics.Matrix4x4)">
            <summary>
            Updates the bounding frustum.
            </summary>
            <param name="viewProjectionMatrix"></param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.CurrentViewSize">
            <summary>
            Gets the current view size.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.Camera">
            <summary>
            Gets the camera object that belongs to this view.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.Device">
            <summary>
            Gets the device this view is using.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.Scene">
            <summary>
            Gets the current scene rendered by this view.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.CameraBoundingFrustum">
            <summary>
            Gets the bounding frustum defining the area the camera sees in the 3D wordl.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.ViewConfiguration">
            <summary>
            Gets the configuration that belongs to this view.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewInformation.Filters">
            <summary>
            Gets the collection containing all filters.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ViewInformation.ViewIndex">
            <summary>
            Gets or sets the index of this view.
            Be careful: this value depends on the scene the view is attached to!
                        Its value is set by RegisterView and DeregisterView methods of the Scene class
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ViewInformation.Owner">
            <summary>
            The owner of this ViewInformation object (standard field for fast access):
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationBase"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.#ctor(System.Object,SeeingSharp.Multimedia.Core.AnimationType)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationBase"/> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="animationType">Type of the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.#ctor(System.Object,SeeingSharp.Multimedia.Core.AnimationType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationBase" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="animationType">Type of the animation.</param>
            <param name="fixedTime">The fixed time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.ChangeToFixedTime(System.TimeSpan)">
            <summary>
            Change the type of this animation to fixed time.
            </summary>
            <param name="fixedTime">This fixed time to be set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.ChangeToEventBased">
            <summary>
            Change the type of this animation to event-based (FinishedByEvent).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.Reset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.Update(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called for each update step.
            </summary>
            <param name="animationState">The current state of the animation.</param>
            <param name="updateState">The current state of the update pass.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.IsObjectAnimated(System.Object)">
            <summary>
            Is the given object animated by this animation?
            </summary>
            <param name="targetObject">The object to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnReset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnCanceled">
            <summary>
            Called when this animation got canceled.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.NotifyAnimationFinished">
            <summary>
            Notifies this sequence that the animation is finished.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.HandleStartAnimation">
            <summary>
            Call OnStartAnimation method on demand.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnStartAnimation">
            <summary>
            Called when animation starts.
            (Checks the target object for compatibility and initializes runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.OnAsyncAnimationStart">
            <summary>
            Called when an async animation starts.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.AnimationType">
            <summary>
            Gets the animation type.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.FixedTime">
            <summary>
            Complete duration when in FixedTime mode.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.CurrentTime">
            <summary>
            Current time in FixedTime mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationBase.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.Finished">
            <summary>
            Has this animation finished executing?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.TargetObject">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationBase.Canceled">
            <summary>
            Is this animation canceled?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationHandler.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationHandler"/> class.
            </summary>
            <param name="owner">The owner object of this AnimationHandler.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationHandler.BuildAnimationSequence``1">
            <summary>
            Starts building an animation sequence for the current target object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationHandler.BuildAnimationSequence``1(``0)">
            <summary>
            Starts building an animation sequence for the current target object.
            </summary>
            <param name="animatedObject">The target object which is to be animated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationHandler.OnAnimationFailed(SeeingSharp.Multimedia.Core.IAnimation,System.Exception)">
            <summary>
            Called when an animation throws an exception during execution.
            </summary>
            <param name="animation">The failed animation.</param>
            <param name="ex">The exception thrown.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationHandler.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationMetadata.#ctor(SeeingSharp.Multimedia.Core.IAnimation,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationMetadata"/> class.
            </summary>
            <param name="animation">The animation.</param>
            <param name="finishedCallback">The finished callback.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationMetadata.Animation">
            <summary>
            Gets the animation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationMetadata.FinishedCallback">
            <summary>
            Gets the finished callback.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.AnimationSequence.AnimationFailed">
            <summary>
            Raises when an animation within this sequence has failed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationSequence"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.ClearAnimations">
            <summary>
            Clears all running animations.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.BeginCancelAnimation">
            <summary>
            Begins to cancel all animations managed by this AnimationSequence.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.BeginCancelAnimation(System.Object)">
            <summary>
            Begins to cancel all animations managed by this AnimationSequence and animating the given target object.
            </summary>
            <param name="targetObject">The target object for which to cancel all animations.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.BeginAnimation(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.IAnimation})">
            <summary>
            Begins the given AnimationSequence objects.
            </summary>
            <param name="animationSequenceList">The list containing all animations to be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.BeginSecondaryAnimation(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.IAnimation})">
            <summary>
            Begins the given AnimationSequence object in a separate queue.
            </summary>
            <param name="animationSequenceList">The list containing all animations to be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.IsObjectAnimated(System.Object)">
            <summary>
            Checks if the given object is animated by this animation.
            </summary>
            <param name="targetObject">The object to check for.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.CancelAnimations">
            <summary>
            Cancels all animations.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.CancelAnimations(System.Object)">
            <summary>
            Cancel all animations with the given target object.
            </summary>
            <param name="targetObject">The target object for which to clear all animations.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.CalculateContinuous(System.TimeSpan)">
            <summary>
            Performs this animation in a completely continuous way.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.CalculateEventDriven">
            <summary>
            Performs this animation in a completely event-driven way.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.PrecalculateAnimations">
            <summary>
            Precalculates previously added animations.
            After this call, the TimeTillCurrentAnimationStepFinished property is filled correctly.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.Update(SeeingSharp.Multimedia.Core.IAnimationUpdateState)">
            <summary>
            Updates all animations contained by this animation sequence.
            </summary>
            <param name="updateState">Current state of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.Update(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called for each update step of this animation.
            </summary>
            <param name="updateState">The current state of the update pass.</param>
            <param name="animationState">The current state of the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.Reset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.PerformPreupdateActionsInternal(System.Boolean)">
            <summary>
            Performs all preupdate actions.
            </summary>
            <param name="updateTimeTillNextTime">Update 'TimeTillNext' property?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.UpdateTimeTillNextPartFinished">
            <summary>
            Calculates the duration which this AnimationHandler takes till the next event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.UpdateQueueInternal(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState,System.Collections.Generic.Queue{SeeingSharp.Multimedia.Core.IAnimation})">
            <summary>
            Updates all animations within the given animation queue.
            Returns true if any animation was finished or canceled.
            </summary>
            <param name="updateState">Current update state.</param>
            <param name="animationState">Current animation state.</param>
            <param name="animationQueue">The queue which should be updated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.PreCheckExecutionInternal">
            <summary>
            A condition method for error checking.
            Check executing thread when we are in Debug mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.PostCheckExecutionInternal">
            <summary>
            A condition method for error checking.
            Check executing thread when we are in Debug mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequence.OnAnimationFailed(SeeingSharp.Multimedia.Core.IAnimation,System.Exception)">
            <summary>
            Called when an animation throws an exception during execution.
            </summary>
            <param name="animation">The failed animation.</param>
            <param name="ex">The exception thrown.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.Finished">
            <summary>
            Is this animation finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.CountRunningAnimations">
            <summary>
            Gets the total count of running animations
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.Canceled">
            <summary>
            Is this animation canceled?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.TimeTillCurrentAnimationStepFinished">
            <summary>
            Gets the time when the next part of this animation is finished.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequence.DefaultCycleTime">
            <summary>
            Gets or sets the default cycletime (cycles time in continous calculation model).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.#ctor(SeeingSharp.Multimedia.Core.AnimationHandler)">
            <summary>
            Initializes a new instance of the AnimationSequenceBuilder class.
            </summary>
            <param name="owner">The owner object.</param>
            <exception cref="T:System.ArgumentException">Unable to cast target object of this AnimationSequenceBuilder to the generic type parameter!</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.#ctor(SeeingSharp.Multimedia.Core.AnimationHandler,`0)">
            <summary>
            Initializes a new instance of the AnimationSequenceBuilder class.
            </summary>
            <param name="owner">The owner object.</param>
            <param name="animatedObject">The object which gets animated.</param>
            <exception cref="T:System.ArgumentException">Unable to cast target object of this AnimationSequenceBuilder to the generic type parameter!</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the AnimationSequenceBuilder class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.Add(SeeingSharp.Multimedia.Core.IAnimation)">
            <summary>
            Adds an AnimationSequence to the builder.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.Apply">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsSecondary">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.Apply(System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.Apply(System.Action,System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
            <param name="cancelAction">The action to be called when the animation gets canceled.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsSecondary(System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsSecondary(System.Action,System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
            <param name="cancelAction">The action to be called when the animation gets canceled.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsync">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            The caller can await the finish of this animation using the returned task object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsSecondaryAsync">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            The caller can await the finish of this animation using the returned task object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAndRewind">
            <summary>
            Finishes the animation and starts from beginning.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ApplyAsSecondaryAndRewind">
            <summary>
            Finishes the animation and starts from beginning.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.AnimationHandler">
            <summary>
            Gets the corresponding animation handler.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.TargetObject">
            <summary>
            Gets the target object of this animation
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.ItemCount">
            <summary>
            Gets the item count.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationSequenceBuilder`1.Applied">
            <summary>
            Was apply called already?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationState" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationState.RunningAnimationsIndex">
            <summary>
            Gets the index within the collection of running animations.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.IAnimatableObject">
            <summary>
            A base interface for each objects which is able to manage animations.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObject.AnimationHandler">
            <summary>
            Gets the animation handler of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimation.IsObjectAnimated(System.Object)">
            <summary>
            Checks if the given object is animated by this animation.
            </summary>
            <param name="targetObject">The object to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimation.Update(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called for each update step of this animation.
            </summary>
            <param name="animationState">The current state of the animation.</param>
            <param name="updateState">The current state of the update pass.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimation.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimation.Reset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimation.Finished">
            <summary>
            Is the animation finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimation.Canceled">
            <summary>
            Is the animation canceled?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.Add(SeeingSharp.Multimedia.Core.IAnimation)">
            <summary>
            Adds an AnimationSequence to this builder.
            </summary>
            <param name="animationSequence">The animation sequence to be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.Apply">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.Apply(System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.Apply(System.Action,System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
            <param name="cancelAction">The action to be called when the animation gets canceled.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsync">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            The caller can await the finish of this animation using the returned task object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAndRewind">
            <summary>
            Finishes the animation and starts from beginning.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsSecondary">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsSecondary(System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsSecondary(System.Action,System.Action)">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            </summary>
            <param name="actionToCall">The action to be called after animation has finished.</param>
            <param name="cancelAction">The action to be called when the animation gets canceled.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsSecondaryAsync">
            <summary>
            Finishes the AnimationSequence and adds it to the AninationHandler it was created with.
            The caller can await the finish of this animation using the returned task object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ApplyAsSecondaryAndRewind">
            <summary>
            Finishes the animation and starts from beginning.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.TargetObject">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.AnimationHandler">
            <summary>
            Gets the corresponding animation handler.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.ItemCount">
            <summary>
            Gets the current count of items within this SequenceBuilder object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder`1.Applied">
            <summary>
            Is Apply already called?
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.EventDrivenPassInfo">
            <summary>
            Holds some detail information about event-driven animation calculation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EventDrivenPassInfo.#ctor(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.EventDrivenStepInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EventDrivenPassInfo"/> class.
            </summary>
            <param name="steps">All steps performed in this calculation.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EventDrivenPassInfo.TotalTime">
            <summary>
            Gets the total time the animation took (simulation time).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EventDrivenPassInfo.CountSteps">
            <summary>
            Total count of calculation steps.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EventDrivenStepInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EventDrivenStepInfo"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EventDrivenStepInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimatableObjectExtensions.BuildAnimationSequence``1(``0)">
            <summary>
            Starts building an AnimationSequence for this object.
            </summary>
            <typeparam name="TargetObjectType">The type of the target object.</typeparam>
            <param name="animatableObject">The object to be animated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimatableObjectExtensions.BuildAnimationSequence``1(SeeingSharp.Multimedia.Core.IAnimatableObject,``0)">
            <summary>
            Starts building an AnimationSequence for the given object.
            The generated animation is managed by this object.
            </summary>
            <typeparam name="TargetObjectType">The type of the target object.</typeparam>
            <param name="animationHost">The host object of the animation.</param>
            <param name="animatableObject">The object to be animated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimatableObjectExtensions.IsFinishedOrCanceled(SeeingSharp.Multimedia.Core.IAnimation)">
            <summary>
            Checks whether the given animation is finished or canceled.
            </summary>
            <param name="animation">The animation to be checked.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.RotationCalculationComponent">
            <summary>
            Describes the component which is relevant for rotation calculation.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.AnimationStateChangeMode">
            <summary>
            Describes the mode of an animation.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationStateChangeMode.ChangeStateTo">
            <summary>
            An animation changes the state of an object to a given target state (e. g. fixed target location).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationStateChangeMode.ChangeStateBy">
            <summary>
            An animation changes the state of an object by a given transition vlaue (e. g. move by vector).
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.AnimationType">
            <summary>
            Defines the type of an animation.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationType.FixedTime">
            <summary>
            The animation finishes after a fixed period of time.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationType.FinishedByEvent">
            <summary>
            The animation finishes after a event occurs (e. g. an object reaches its target position)
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationType.AsyncCall">
            <summary>
            The animation defines an asynchronous call
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.AnimationUpdateResult">
            <summary>
            Describes the result of an update pass in the animation system.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationUpdateResult.CountFinishedAnimations">
            <summary>
            Total count of finished animations.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.AnimationFailedReaction">
            <summary>
            Tells the system what to do if an animation has failed.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationFailedReaction.RemoveAndContinue">
            <summary>
            Remove the failed part from the animation and continue with remaining.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AnimationFailedReaction.ThrowException">
            <summary>
            Throw an exception and therefore stop the animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.AnimationFailedEventArgs.#ctor(SeeingSharp.Multimedia.Core.IAnimation,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.AnimationFailedEventArgs"/> class.
            </summary>
            <param name="animation">The animation.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationFailedEventArgs.Animation">
            <summary>
            Gets the animation that has failed.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.AnimationFailedEventArgs.Exception">
            <summary>
            Gets the exception occurred during execution of the animation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObjectEulerRotation.RotationEuler">
            <summary>
            Gets the or sets the euler rotation vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObjectPosition2D.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObjectPosition.Position">
            <summary>
            Gets or sets the position of the object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObjectQuaternion.RotationQuaternion">
            <summary>
            Gets or sets the quaternion used for object rotation calculation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IAnimatableObjectScaling.Scaling">
            <summary>
            Gets or sets the scaling value of the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition2D,System.Numerics.Vector2,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move2DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position of the object.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition2D,System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
             <summary>
             Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move2DByAnimation" /> class.
             </summary>
             <param name="targetObject">The target object.</param>
             <param name="targetVector">The target position of the object.</param>
            ´<param name="speed">The total movement speed.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.OnReset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DByAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition2D,System.Numerics.Vector2,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move2DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DByAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition2D,System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move2DByAnimation"/> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="moveSpeed">The speed which is used for movement calculation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DByAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            (Checks the target object for compatibility and initializes runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DByAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move2DByAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,System.TimeSpan)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,System.TimeSpan)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,System.Single)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,System.Single)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,System.TimeSpan)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">Speed configuration for the movement.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="deceleration">The deceleration.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Collections.Generic.IEnumerable{``1},System.Numerics.Vector2,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObjects">A collection containing all target objects.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Collections.Generic.IEnumerable{``1},System.Numerics.Vector2,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObjects">A collection containing all target objects.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing2DAnimationExtensions.Move2DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="deceleration">The deceleration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeAccentuationToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectAccentuation,System.Single,System.TimeSpan)">
            <summary>
            Initialize a new Instance of the <see cref="T:SeeingSharp.Multimedia.Core.ChangeAccentuationToAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetAccentuation">The target accentuation.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.Exception">Accentuation value can be between 0 and 1, not greater than 1 and not lower than 0!</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeAccentuationToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeAccentuationToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeAccentuationToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScaleSpriteToAnimation.#ctor(SeeingSharp.Multimedia.Objects.TexturePainter,System.Single,System.TimeSpan)">
            <summary>
            Initialize a new Instance of the <see cref="T:SeeingSharp.Multimedia.Core.ScaleSpriteToAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetScaling">The target scaling factor.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.Exception">Opacity value can be between 0 and 1, not greater than 1 and not lower than 0!</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScaleSpriteToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScaleSpriteToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScaleSpriteToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeOpacityToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectOpacity,System.Single,System.TimeSpan)">
            <summary>
            Initialize a new Instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetOpacity">The target opacity.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.Exception">Opacity value can be between 0 and 1, not greater than 1 and not lower than 0!</exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeOpacityToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeOpacityToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeOpacityToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DByAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition,System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DByAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition,System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation"/> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="moveSpeed">The speed which is used for movement calculation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DByAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            (Checks the target object for compatibility and initializes runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DByAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DByAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition,System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position of the object.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectPosition,System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
             <summary>
             Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation" /> class.
             </summary>
             <param name="targetObject">The target object.</param>
             <param name="targetVector">The target position of the object.</param>
            ´<param name="speed">The total movement speed.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.OnReset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Move3DToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateEulerAnglesAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectEulerRotation,System.Numerics.Vector3,System.TimeSpan,SeeingSharp.Multimedia.Core.RotationCalculationComponent,SeeingSharp.Multimedia.Core.AnimationStateChangeMode)">
            <summary>
            Rotates the object to the target rotation vector.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target rotation vector.</param>
            <param name="duration">Total duration of the animation.</param>
            <param name="calculationComponent">The components which are to be modified.</param>
            <param name="stateChangeMode">The state-change mode (to or by).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateEulerAnglesAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateEulerAnglesAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateEulerAnglesAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateQuaternionToAnimation.#ctor(SeeingSharp.Multimedia.Core.IAnimatableObjectQuaternion,System.Numerics.Quaternion,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RotateQuaternionToAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetQuaternion">The target quaternion.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateQuaternionToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateQuaternionToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
            <param name="updateState"></param>
            <param name="animationState"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RotateQuaternionToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scale3DToAnimation.#ctor(SeeingSharp.Multimedia.Core.SceneSpacialObject,System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Move3DByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="scaleVector">The move vector.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scale3DToAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scale3DToAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scale3DToAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.Single)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,System.Single)">
            <summary>
            Moves current object by the given move vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="moveVector">The move vector.</param>
            <param name="speed">Total speed of the movement animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">Speed configuration for the movement.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="deceleration">The deceleration.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Collections.Generic.IEnumerable{``1},System.Numerics.Vector3,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObjects">A collection containing all target objects.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Collections.Generic.IEnumerable{``1},System.Numerics.Vector3,SeeingSharp.MovementSpeed)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObjects">A collection containing all target objects.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Move3DTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Moves current object to the given target position.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetVector">The target position for the object.</param>
            <param name="speed">The speed for animation calculation.</param>
            <param name="acceleration">The acceleration.</param>
            <param name="deceleration">The deceleration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateEulerAnglesBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Rotates the object by the given euler rotation vector.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="rotateVector">The rotate vector.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateEulerAnglesTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Rotates the object to the given euler rotation vector.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="rotateVector">The rotate vector.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateEulerAnglesBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Rotates the object by the given euler rotation vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="targetObject">The target object.</param>
            <param name="rotateVector">The rotate vector.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateEulerAnglesYawBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Single,System.TimeSpan)">
            <summary>
            Rotates the object by the given euler rotation vector.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="targetYaw">The target value for the Yaw (Y) rotation component.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateEulerAnglesYawBy``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Single,System.TimeSpan)">
            <summary>
            Rotates the object by the given euler rotation vector.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetYaw">The target value for the Yaw (Y) rotation component.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateQuaternionTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Quaternion,System.TimeSpan)">
            <summary>
            Rotates the object to the given quaternion.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="targetQuaternion">The target quaternion.</param>
            <param name="animationTime">The animation time.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.RotateQuaternionTo``2(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},``1,System.Numerics.Quaternion,System.TimeSpan)">
            <summary>
            Rotates the object to the given quaternion.
            </summary>
            <typeparam name="HostObject">The type of the ost object.</typeparam>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">The sequence builder.</param>
            <param name="targetObject">The target object.</param>
            <param name="targetQuaternion">The target quaternion.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Scale3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Numerics.Vector3,System.TimeSpan)">
            <summary>
            Scales current object by the given move vector.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="scaleVector">The scale vector.</param>
            <param name="animationTime">Total time for the animation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Drawing3DAnimationExtensions.Scale3DTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Single,System.TimeSpan)">
            <summary>
            Scales current object by the given move vector.
            </summary>
            <typeparam name="TargetObject">The type of the arget object.</typeparam>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetScaling">The targing scaling factor.</param>
            <param name="animationTime">Total time for the animation.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.CallActionAnimation.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.CallActionAnimation" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.CallActionAnimation.#ctor(System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.CallActionAnimation"/> class.
            </summary>
            <param name="actionToCall">The action to call.</param>
            <param name="cancelAction">The cancel action.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.CallActionAnimation.OnCanceled">
            <summary>
            Called when this animation was canceled.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.CallActionAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when this animation was finished.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeFloatByAnimation.#ctor(System.Object,System.Func{System.Single},System.Action{System.Single},System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ChangeFloatByAnimation" /> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="getValueFunc">The get value func.</param>
            <param name="setValueAction">The set value action.</param>
            <param name="increaseTotal">The increase total.</param>
            <param name="timeSpan">The timespan.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeFloatByAnimation.OnStartAnimation">
            <summary>
            Called when animation starts.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ChangeFloatByAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ChangeFloatByAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DelayAnimation.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.DelayAnimation"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DelayAnimation.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
            <returns></returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DelayAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.LazyAnimation.#ctor(System.Func{SeeingSharp.Multimedia.Core.IAnimation})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.LazyAnimation"/> class.
            </summary>
            <param name="animationCreator">The animation creator.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.LazyAnimation.IsObjectAnimated(System.Object)">
            <summary>
            Checks if the given object is animated by this animation.
            </summary>
            <param name="targetObject">The object to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.LazyAnimation.Update(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called for each update step of this animation.
            </summary>
            <param name="updateState">The current state of the update pass.</param>
            <param name="animationState">The current state of the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.LazyAnimation.Reset">
            <summary>
            Resets this animation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.LazyAnimation.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.LazyAnimation.Finished">
            <summary>
            Is the animation finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.LazyAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.LazyAnimation.Canceled">
            <summary>
            Is this animation canceled?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitFinishedAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.WaitFinishedAnimation" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitFinishedAnimation.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitFinishedAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
            <param name="updateState"></param>
            <param name="animationState"></param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.WaitFinishedAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitForConditionPassedAnimation.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.WaitForConditionPassedAnimation" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitForConditionPassedAnimation.GetTimeTillNextEvent(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the time in milliseconds till this animation is finished.
            This method is relevant for event-driven processing and tells the system by what amound the clock is to be increased next.
            </summary>
            <param name="previousMinFinishTime">The minimum TimeSpan previous animations take.</param>
            <param name="previousMaxFinishTime">The maximum TimeSpan previous animations take.</param>
            <param name="defaultCycleTime">The default cycle time if we would be in continous calculation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitForConditionPassedAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
            <param name="updateState"></param>
            <param name="animationState"></param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.WaitForConditionPassedAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitTaskFinishedAnimation.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.WaitTaskFinishedAnimation" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.WaitTaskFinishedAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.WaitTimePassedAnimation.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.WaitFinishedAnimation" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.WaitTimePassedAnimation.IsBlockingAnimation">
            <summary>
            Is this animation a blocking animation?
            If true, all following animation have to wait for finish-event.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.Delay``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Int32)">
            <summary>
            Waits some time before continueing with next animation sequence.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="milliseconds">The total milliseconds to wait.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.Delay``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.TimeSpan)">
            <summary>
            Waits some time before continueing with next animation sequence.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="duration">Total duration to wait.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.WaitTaskFinished``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Threading.Tasks.Task)">
            <summary>
            Waits until given task has finished executing.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="blockingTask">The Task for which we have to wait.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.WaitForCondition``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Func{System.Boolean})">
            <summary>
            Waits until the given condition returns true.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="checkFunction">Return true to continue with the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.WaitFinished``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0})">
            <summary>
            Waits until previous animation steps are finished.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.WaitUntilTimePassed``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.TimeSpan)">
            <summary>
            Wait until given time has passed.
            </summary>
            <typeparam name="ObjectType">The type of the object to be animated.</typeparam>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="waittime">The total time to wait.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.Lazy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Func{SeeingSharp.Multimedia.Core.IAnimation})">
            <summary>
            Adds a lazy animation object.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="animationCreator">A lambda that creates the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.Lazy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Action{SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0}})">
            <summary>
            Builds a lazy animation object using the given child sequence.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="childSequenceBuilder">A SequenceBuilder building a child sequence.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.CallAction``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Action)">
            <summary>
            Calls the given action.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="actionToCall">The action to call on this step of the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.CallAction``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Action,System.Action)">
            <summary>
            Calls the given action.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="actionToCall">The action to call on this step of the animation.</param>
            <param name="cancelAction">The action to be called when this animation would be canceled.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Extensions.ChangeFloatBy``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},System.Func{System.Single},System.Action{System.Single},System.Single,System.TimeSpan)">
            <summary>
            Increases a float value by a given total increase value over the given duration.
            </summary>
            <param name="builder">The AnimationSequenceBuilder object.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="valueSetter">The value setter.</param>
            <param name="totalIncrease">The value to increase in total.</param>
            <param name="duration">Total duration to wait.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneObjectBehavior"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectBehavior.SetHostObject(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Sets the host object for this behavior.
            </summary>
            <param name="hostObject">The object that hosts this behavior.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectBehavior.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Update logic for per object updates.
            Be careful: This method is called in parallel with these methods on other objects.
            For methods that depend on other object, use UpdateOverall.
            </summary>
            <param name="updateState">Current update state of the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectBehavior.UpdateOverall(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Update logic for overall updates.
            This method should be used for update logic that also depends on other object.
            UpdateOverall methods are called sequentially object by object.
            </summary>
            <param name="updateState">Current update state of the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectBehavior.OnHostObjectChanged(SeeingSharp.Multimedia.Core.SceneObject,SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Called when the current host object has changed.
            </summary>
            <param name="previousHostObject">The previous host object.</param>
            <param name="newHostObject">The newly assigned host object.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObjectBehavior.HostObject">
            <summary>
            Gets the host object for this behavior.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.#ctor(SeeingSharp.Multimedia.Core.GraphicsCore,SeeingSharp.Multimedia.Core.TargetHardware,SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration,SharpDX.DXGI.Adapter1,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineDevice"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.ForceDetailLevel(SeeingSharp.Multimedia.Core.DetailLevel)">
            <summary>
            Forces the given detail level.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.GetSampleDescription(SeeingSharp.Multimedia.Core.AntialiasingQualityLevel)">
            <summary>
            Get the sample description for the given quality level.
            </summary>
            <param name="qualityLevel">The quality level for which a sample description is needed.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.CreateDevices(SeeingSharp.Multimedia.Core.GraphicsCore,SeeingSharp.Multimedia.Core.TargetHardware,SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration,System.Boolean)">
            <summary>
            Creates a list containing all available devices.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.GetSampleDescription(System.Boolean)">
            <summary>
            Get the sample description for the given quality level.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineDevice.CheckIsStandardAntialiasingPossible">
            <summary>
            Checks for standard antialiasing support.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.IsStandardAntialiasingPossible">
            <summary>
            Checks for standard antialiasing support.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.InitializationException">
            <summary>
            Gets the exception occurred during initialization of the driver (if any).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.AdapterDescription">
            <summary>
            Gets the description of this adapter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.IsLoadedSuccessfully">
            <summary>
            Is this device loaded successfully.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.SupportedDetailLevel">
            <summary>
            Gets the supported detail level of this device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.IsHighDetailSupported">
            <summary>
            Is high detail supported with this card?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.DriverLevel">
            <summary>
            Gets the level of the graphics driver.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.DefaultPixelShaderModel">
            <summary>
            Gets the name of the default shader model.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.SupportsOnly16BitIndexBuffer">
            <summary>
            Some older hardware only support 16-bit index buffers.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.DefaultVertexShaderModel">
            <summary>
            Gets the name of the default shader model.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.DeviceD3D11">
            <summary>
            Gets the Direct3D 11 device object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.DeviceImmediateContextD3D11">
            <summary>
            Gets the main Direct3D 11 context object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.Configuration">
            <summary>
            Gets the current device configuration.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineDevice.FactoryDxgi">
            <summary>
            Gets the DXGI factory object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.EngineDevice.FakeRenderTarget2D">
            <summary>
            Gets the 2D render target which can be used to load 2D resources on this device.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.EngineDevice.DeviceIndex">
            <summary>
            Gets the index of this device.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration.TargetHardware">
            <summary>
            Gets or sets the target hardware.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration.DebugEnabled">
            <summary>
            Can enable debug mode for all created devices.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsDeviceConfiguration.#ctor(SeeingSharp.Multimedia.Core.GraphicsCoreConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.GraphicsDeviceConfiguration" /> class.
            </summary>
            <param name="coreConfig">The core configuration object.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsDeviceConfiguration.TextureQuality">
            <summary>
            Gets or sets the texture quality level.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsDeviceConfiguration.GeometryQuality">
            <summary>
            Gets or sets the geometry quality level.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsDeviceConfiguration.CoreConfiguration">
            <summary>
            Gets current core configuration.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.ConfigurationChanged">
            <summary>
            Occurs when any configuration flag has changed.
            This event may occure in different threads!
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.WireframeEnabled">
            <summary>
            Is wireframe rendering enabled?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.AntialiasingEnabled">
            <summary>
            Try to enable antialiasing?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.AntialiasingQuality">
            <summary>
            The quality level for antialiasing (if antialiasing is enabled).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.ShowTexturesInternal">
            <summary>
            Internal accessor for ShowTextures variable.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.AlphaEnabledSwapChain">
            <summary>
            Set this flag to true to enable transparent pixels when view is embedded into Xaml stack.
            Only relevant in UWP-Apps!
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.DeviceConfiguration">
            <summary>
            Gets current device configuration.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.GraphicsViewConfiguration.CoreConfiguration">
            <summary>
            Gets current core configuration.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.FactoryHandlerD2D.#ctor(SeeingSharp.Multimedia.Core.GraphicsCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.FactoryHandlerD2D"/> class.
            </summary>
            <param name="core">The core.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.FactoryHandlerD2D.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.FactoryHandlerD2D.Factory">
            <summary>
            Gets the factory object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.FactoryHandlerD2D.IsInitialized">
            <summary>
            Is Direct2D initialized?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.FactoryHandlerDWrite.#ctor(SeeingSharp.Multimedia.Core.GraphicsCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.FactoryHandlerDWrite"/> class.
            </summary>
            <param name="core">The core.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.FactoryHandlerDWrite.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.FactoryHandlerDWrite.Factory">
            <summary>
            Gets the Factory object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.FactoryHandlerDWrite.IsInitialized">
            <summary>
            Is DirectWrite initialized successfully?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.FactoryHandlerWIC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.FactoryHandlerWIC" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.FactoryHandlerWIC.Factory">
            <summary>
            Gets the WIC factory object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD2D.#ctor(SeeingSharp.Multimedia.Core.GraphicsCore,SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11" /> class.
            </summary>
            <param name="core">The core.</param>
            <param name="engineDevice">The engine device.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11">
            <summary>
            All initialization logic for the D3D11 device
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.#ctor(SeeingSharp.Multimedia.Core.TargetHardware,SharpDX.DXGI.Adapter1,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11"/> class.
            </summary>
            <param name="targetHardware">The target hardware for which to create this device.</param>
            <param name="dxgiAdapter">The tasrget adapter.</param>
            <param name="debugEnabled">Is debug mode enabled?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.FeatureLevel">
            <summary>
            Gets current feature level.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.IsDirect3D10OrUpperHardware">
            <summary>
            Is the hardware Direct3D 10 or upper?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.Device">
            <summary>
            Gets the Direct3D 11 device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.DeviceNativePointer">
            <summary>
            Gets the native pointer to the device object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.ImmediateContext">
            <summary>
            Gets the immediate context.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.IsInitialized">
            <summary>
            Is device successfully initialized?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.DeviceModeDescription">
            <summary>
            Gets a short description containing info about the created device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.DriverLevel">
            <summary>
            Gets the driver level.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D11.IsDirect2DTextureEnabled">
            <summary>
            Are Direct2D textures possible?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.#ctor(SharpDX.DXGI.Adapter1,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9"/> class.
            </summary>
            <param name="dxgiAdapter">The target adapter.</param>
            <param name="isSoftwareAdapter">Are we in software mode?</param>
            <param name="debugEnabled">Is debug mode enabled?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.UnloadResources">
            <summary>
            Unloads all loaded resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.GetDesktopWindow">
            <summary>
            Gets current desktop window.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.IsInitialized">
            <summary>
            Is the device successfully initialized?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.Device">
            <summary>
            Gets the initialized device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerD3D9.Context">
            <summary>
            Gets current DirectX context.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI.#ctor(SharpDX.DXGI.Adapter1,SharpDX.Direct3D11.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI.Factory">
            <summary>
            Gets current factory object.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI.Device">
            <summary>
            Gets the DXGI device.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.DeviceHandlerDXGI.Adapter">
            <summary>
            Gets current adapter used for drawing.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineAdapterInfo.#ctor(System.Int32,SharpDX.DXGI.Adapter1)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineAdapterInfo" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineAdapterInfo.Outputs">
            <summary>
            Gets all outputs supported by this adapter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineAdapterInfo.Adapter">
            <summary>
            Gets the corresponding adapter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineAdapterInfo.AdapterIndex">
            <summary>
            Gets the index of the adapter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineAdapterInfo.AdapterDescription">
            <summary>
            Gets the description of the adapter.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineHardwareInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineHardwareInfo" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineHardwareInfo.#ctor(SharpDX.DXGI.Factory1)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineHardwareInfo" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineHardwareInfo.LoadAdapterInformation">
            <summary>
            Loads all adapter information and builds up all needed view models in a background thread.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineHardwareInfo.Adapters">
            <summary>
            Gets a collection containing all adapters.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.EngineOutputInfo.#ctor(System.Int32,SharpDX.DXGI.Output)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.EngineOutputInfo" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.EngineOutputInfo.DeviceName">
            <summary>
            Gets the name of the output device.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.DpiScaling">
            <summary>
            This structure holds information about dpi scaling factors.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.DpiScaling.Default">
            <summary>
            The default one on windows systems (96 Dpi, = Scaling 100%).
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.HardwareDriverLevel">
            <summary>
            Enumeration containing supported target hardware
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.HardwareDriverLevel.Direct3D11">
            <summary>
            Driver runs on Direct3D11 hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.HardwareDriverLevel.Direct3D10">
            <summary>
            Driver runs on Direct3D10 hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.HardwareDriverLevel.Direct3D9_1">
            <summary>
            Driver runs on Direct3D9 hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.HardwareDriverLevel.Direct3D9_2">
            <summary>
            Driver runs on Direct3D9 hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.HardwareDriverLevel.Direct3D9_3">
            <summary>
            Driver runs on Direct3D9 hardware.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.TargetHardware">
            <summary>
            Enumeration containing supported target hardware
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TargetHardware.Minimalistic">
            <summary>
            Engine targets Direct3D 9 hardware (used on tablets and smartphones).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TargetHardware.Direct3D10">
            <summary>
            Engine targets Direct3D 10 hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TargetHardware.Direct3D11">
            <summary>
            Engine targets Direct3D 11 hardware.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.AntialiasingQualityLevel">
            <summary>
            Enumeration containing 3 levels of antialiasing quality.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AntialiasingQualityLevel.Low">
            <summary>
            Do antialiasing, but try to configure it in low quality (depends on hardware support levels).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AntialiasingQualityLevel.Medium">
            <summary>
            Do antialiasing, but try to configure it in medium quality (depends on hardware support levels).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.AntialiasingQualityLevel.High">
            <summary>
            Do antialiasing, but try to configure it in high quality (depends on hardware support levels).
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel">
            <summary>
            Enumeration containing 3 levels of texture filtering quality.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel.Low">
            <summary>
            Low quality texture sampler.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel.Medium">
            <summary>
            Medium quality texture sampler.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel.High">
            <summary>
            High texture filtering quality (anisotrophic, 16x)
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.DetailLevel">
            <summary>
            Describes a detail level
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.DetailLevel.Low">
            <summary>
            Describes low performance hardware (e. g. Software renderer).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.DetailLevel.High">
            <summary>
            Describes high class hardware.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.DetailLevel.All">
            <summary>
            A detail level mentioned for all classes of hardware.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.TextureQuality">
            <summary>
            Enumaration containing all texture quality levels
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TextureQuality.Low">
            <summary>
            Low res textures
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.TextureQuality.Hight">
            <summary>
            High res textures
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.GeometryQuality">
            <summary>
            Enumeration containing geometry detail levels.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GeometryQuality.Low">
            <summary>
            Low quality.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.GeometryQuality.Hight">
            <summary>
            High quality.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.SeeingSharpPlatform">
            <summary>
            Describes the platform Seeing# runs on.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SeeingSharpPlatform.WindowsPhone">
            <summary>
            The engine runs currently on Windows Phone.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SeeingSharpPlatform.ModernPCOrTabletApp">
            <summary>
            The engine runs currently as modern PC or tablet app (= Windows Store App).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SeeingSharpPlatform.Desktop">
            <summary>
            The engine runs currently in Windows desktop environment.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.CoordinateSystem">
            <summary>
            Describes the used coordinate system.
            Frozen Sky uses LeftHanded_UpY by default, all other systems need to be mapped.
             see http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-4-geometry/coordinate-systems/
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.CoordinateSystem.LeftHanded_UpY">
            <summary>
            Left handed system, y-axis goes upwards.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.CoordinateSystem.RightHanded_UpY">
            <summary>
            Right handed system, y-axis goes upwards.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.CoordinateSystem.LeftHanded_UpZ">
            <summary>
            Left handed system, z-axis goes upwards.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.CoordinateSystem.RightHanded_UpZ">
            <summary>
            Right handed system, z-axis goes upwards.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderPass2DOverlay"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies this RenderPass (called before starting rendering first objects with it).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards this RenderPass (called after rendering all objects of this pass).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device"></param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device"></param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderPass2DOverlay.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderPassBase" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassBase.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies this RenderPass (called before starting rendering first objects with it).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassBase.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards this RenderPass (called after rendering all objects of this pass).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies this RenderPass (called before starting rendering first objects with it).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards this RenderPass (called after rendering all objects of this pass).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The target device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The target device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderPassDefaultTransparent.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassLineRender.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The target device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassLineRender.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The target device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassLineRender.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies this RenderPass (called before starting rendering first objects with it).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.RenderPassLineRender.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards this RenderPass (called after rendering all objects of this pass).
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.RenderPassLineRender.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IRenderableResource.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Triggers internal update within the resource (e. g. Render to Texture).
            </summary>
            <param name="updateState">Current state of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.IRenderableResource.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Triggers internal rendering within the resource (e. g. Render to Texture).
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.IRenderableResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Resource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.GetReferencedResources(SeeingSharp.Util.SingleInstanceCollection{SeeingSharp.Multimedia.Core.Resource})">
            <summary>
            Fills the given collection with all referenced resources.
            </summary>
            <param name="resourceCollection">The collection to be filled,</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.LoadResource">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.Dispose">
            <summary>
            Disposes this object (unloads all resources).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.UnloadResource">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resource.
            </summary>
            <param name="device">The device on which to load all resources.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads all resources.
            </summary>
            <param name="device">The device on which the resources where loaded.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Resource.ReloadResource">
            <summary>
            Triggers reloading of the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.IsMarkedForReloading">
            <summary>
            Is this resource marked for reloading.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.Key">
            <summary>
            Gets the key of the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.IsKeyEmpty">
            <summary>
            Is the resource key empty?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.Dictionary">
            <summary>
            Gets the parent ResourceDictionary object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Resource.ResourceType">
            <summary>
            Gets the type of this resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.#ctor(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ResourceDictionary"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetNextRenderBlockID">
            <summary>
            Gets the next render block id.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.CreateDefaultResource``1">
            <summary>
            Creates the default resource for the given type name..
            </summary>
            <typeparam name="T">The type for which the generic resource should be created.</typeparam>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.Clear">
            <summary>
            Clears all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.AddResource``1(``0)">
            <summary>
            Adds the given resource to the dictionary.
            </summary>
            <param name="resource">The key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.AddResource``1(SeeingSharp.Util.NamedOrGenericKey,``0)">
            <summary>
            Adds the given resource to the dictionary.
            </summary>
            <param name="resource">The resource to add.</param>
            <param name="resourceKey">The key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.UnloadAllMarkedResources">
            <summary>
            Unloads all resources that are marked for unloading.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.MarkForUnloading(SeeingSharp.Multimedia.Core.Resource)">
            <summary>
            Marks the given resource for unloading.
            </summary>
            <param name="resourceToUnload">The resource to be unloaded.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.AddAndLoadResource``1(SeeingSharp.Util.NamedOrGenericKey,``0)">
            <summary>
            Adds the given resource to the dictionary and loads it directly.
            </summary>
            <param name="resourceKey">The key of the resource.</param>
            <param name="resource">The resource to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.RemoveResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Removes the resource with the givenkey.
            </summary>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetResource``1(SeeingSharp.Util.NamedOrGenericKey,System.Func{``0})">
            <summary>
            Gets the resource with the given key. CreateMethod will be called to create
            the resource if it is not available yet.
            </summary>
            <param name="resourceKey">Key of the resource.</param>
            <param name="createMethod">Method wich creates the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetResource``1(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Gets the resource with the gien name.
            </summary>
            <typeparam name="T">Type of the resource.</typeparam>
            <param name="resourceKey">Key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetResourceAndEnsureLoaded``1(SeeingSharp.Util.NamedOrGenericKey,System.Func{``0})">
            <summary>
            Gets the resource with the given key. CreateMethod will be called to create
            the resource if it is not available yet.
            </summary>
            <param name="resourceKey">Key of the resource.</param>
            <param name="createMethod">Method wich creates the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.GetResourceAndEnsureLoaded``1(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Gets the resource with the given key.
            </summary>
            <typeparam name="T">Type of the resource.</typeparam>
            <param name="resourceKey">Key of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.LoadResources">
            <summary>
            Loads all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ContainsResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Is there a resource with the given key?
            </summary>
            <param name="key">Key of the resource.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.Device">
            <summary>
            Gets the device this resource dictionary belongs to.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ResourceDictionary.DeviceIndex">
            <summary>
            Gets the device index.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.Item(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Gets the resource with the given key.
            </summary>
            <param name="key">Key of the resource.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.RenderableResources">
            <summary>
            Gets an enumeration containing all renderable resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.DefaultResources">
            <summary>
            Gets a reference to default resources object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.Count">
            <summary>
            Gets total count of resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceInfo.#ctor(SeeingSharp.Multimedia.Core.Resource)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceInfo"/> class.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.#ctor(System.Collections.Generic.IEnumerator{SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator"/> class.
            </summary>
            <param name="resourceInfoEnumerator">The resource info enumerator.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ResourceDictionary.ResourceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="E:SeeingSharp.Multimedia.Core.SceneObjectFilter.FilterConfigurationChanged">
            <summary>
            An event that notifies changed filter configuration.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneObjectFilter"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectFilter.IsObjectVisible(SeeingSharp.Multimedia.Core.SceneObject,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Checks for visibility of the given object.
            </summary>
            <param name="input">The object to be checked..</param>
            <param name="viewInformation">A reference to the view on which to check for visibility.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectFilter.SetEnvironmentData(SeeingSharp.Multimedia.Core.SceneLayer,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Sets some informational data telling the filter where it is used.
            </summary>
            <param name="layerToFilter">The SceneLayer that gets filtered.</param>
            <param name="viewInformation">The information object of the corresponding view.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObjectFilter.RaiseFilterConfigurationChanged">
            <summary>
            Raises the FilterConfigurationChanged event.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObjectFilter.UpdateEachFrame">
            <summary>
            Do update this filter on each frame?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SceneObjectFilter.ConfigurationChanged">
            <summary>
            Has filter configuration changed?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SceneObjectFilter.ConfigurationChangedUI">
            <summary>
            Has filter configuration changed? (temporary flag on UI because of thread synchronization)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.SetEnvironmentData(SeeingSharp.Multimedia.Core.SceneLayer,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Sets current environment data.
            </summary>
            <param name="layerToFilter">The SceneLayer that gets filtered.</param>
            <param name="viewInformation">The information object of the corresponding view.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.IsObjectVisible(SeeingSharp.Multimedia.Core.SceneObject,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Checks for visibility of the given object.
            </summary>
            <param name="input">The object to be checked..</param>
            <param name="viewInfo">The view on which to check for visibility.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.EnableYFilter">
            <summary>
            Gets or sets a value indicating whether the y-filter is enabled.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.YFilterMin">
            <summary>
            Gets or sets the minimum value of the y-filter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.YFilterMax">
            <summary>
            Gets or sets the maximum value of the y-filter.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneViewboxObjectFilter.UpdateEachFrame">
            <summary>
            Should this filter be updated on each frame?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.PickingInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.PickingInformation" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.PickingInformation.NotifyPick(SeeingSharp.Multimedia.Core.SceneObject,System.Single)">
            <summary>
            Notifies a pick for the given object with the given distance.
            </summary>
            <param name="pickedObject">The object that was picked.</param>
            <param name="distance">The distance from the origin to the picked point.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.PickingInformation.PickedObject">
            <summary>
            The picked object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.PickingInformation.Distance">
            <summary>
            Gets the distance to the picked object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Scene" /> class.
            </summary>
            <param name="name">The global name of this scene.</param>
            <param name="registerOnMessenger">
            Do register this scene for application messaging?
            If true, then the caller has to ensure that the name is only used once
            across the currently executed application.
            </param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.DeregisterMessaging">
            <summary>
            Deregisters this scene from ApplicationMessaging logic.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.WaitUntilVisibleAsync(SeeingSharp.Multimedia.Core.SceneObject,SeeingSharp.Multimedia.Core.ViewInformation,System.Threading.CancellationToken)">
            <summary>
            Waits until the given object is visible.
            </summary>
            <param name="sceneObject">The scene object.</param>
            <param name="viewInfo">The view information.</param>
            <param name="cancelToken">The cancel token.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.WaitUntilVisibleAsync(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.SceneObject},SeeingSharp.Multimedia.Core.ViewInformation,System.Threading.CancellationToken)">
            <summary>
            Waits until the given object is visible.
            </summary>
            <param name="sceneObjects">The scene objects to check for.</param>
            <param name="viewInfo">The view information.</param>
            <param name="cancelToken">The cancel token.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.AreAllObjectsVisible(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.SceneObject},SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Ares all given scene objects visible currently?
            </summary>
            <param name="sceneObjects">The scene objects.</param>
            <param name="viewInfo">The view information.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.PerformTransitionAsync(System.Action{SeeingSharp.Multimedia.Core.SceneManipulator},SeeingSharp.Util.NamedOrGenericKey)">
             <summary>
             Triggers transition logic from the current scene state to another one.
             The given action gets processed directly before scene update process and is responsible
             to define the target state.
            
             Be carefull: The action is called by worker-threads of SeeingSharp!
            
             The given transition effect gets executed to visually swap between current
             to target state.
             </summary>
             <param name="defineNewStateAction">
             The action which is able to manipulate the scene.
             This one defines the target state of the transition
             </param>
             <param name="transissionEffectRessource">The transission effect ressource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.PerformTransitionAsync(System.Action{SeeingSharp.Multimedia.Core.SceneManipulator},SeeingSharp.Util.NamedOrGenericKey,System.TimeSpan)">
             <summary>
             Triggers transition logic from the current scene state to another one.
             The given action gets processed directly before scene update process and is responsible
             to define the target state.
            
             Be carefull: The action is called by worker-threads of SeeingSharp!
            
             The given transition effect gets executed to visually swap between current
             to target state.
             </summary>
             <param name="defineNewStateAction">
             The action which is able to manipulate the scene.
             This one defines the target state of the transition
             </param>
             <param name="transissionEffectRessource">The transission effect ressource.</param>
             <param name="effectDuration">The total duration of the transition effect.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ManipulateSceneAsync(System.Action{SeeingSharp.Multimedia.Core.SceneManipulator})">
             <summary>
             Triggers scene manipulation using the given lambda action.
             The action gets processed directly before scene update process.
            
             Be carefull: The action is called by worker-threads of SeeingSharp!
             </summary>
             <param name="manipulatorAction">The action which is able to manipulate the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.AddResource``1(System.Func{``0},SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Adds a resource to the scene
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="resourceFactory">The factory method which creates the resource object.</param>
            <param name="resourceKey">The key for the newly generated resource.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ContainsResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Does a resource with the given key exist?
            </summary>
            <param name="resourceKey">The key to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ManipulateResource``1(System.Action{``0},SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Manipulates the resource with the given key.
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="manipulateAction">The action that manipulates the resource.</param>
            <param name="resourceKey">The key of the resource to be manipulated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.RemoveResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Removes the resource with the given key.
            </summary>
            <param name="resourceKey">The key of the resource to be deleted.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Pick(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.Multimedia.Core.PickingOptions)">
            <summary>
            Picks an object in 3D space.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.TriggerNewFilter(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Triggers new filter logic for the given scene object.
            </summary>
            <param name="sceneObjectLocal">The object to trigger filter logic for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.AddDrawingLayer(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Adds the given drawing layer.
            </summary>
            <param name="drawingLayer">The drawing layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.RemoveDrawingLayer(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Removes the given drawing layer.
            </summary>
            <param name="drawingLayer">The drawing layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Add``1(``0,System.String)">
            <summary>
            Adds the given object to the scene.
            </summary>
            <param name="sceneObject">Object to add.</param>
            <param name="layer">Layer on wich the object should be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.RegisterView(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Registers the given view on this scene object.
            This method is meant to be called by RenderLoop class.
            </summary>
            <param name="viewInformation">The view to register.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.IsViewRegistered(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Is the given view registered on this scene?
            </summary>
            <param name="viewInformation">The view to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.DeregisterView(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Deregisters the given view from this scene object.
            This method is meant to be called by RenderLoop class.
            </summary>
            <param name="viewInformation">The view to deregister.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.AddLayer(System.String)">
            <summary>
            Adds a new layer with the given name.
            </summary>
            <param name="name">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.RemoveLayer(System.String)">
            <summary>
            Removes the layer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.SetLayerOrderID(SeeingSharp.Multimedia.Core.SceneLayer,System.Int32)">
            <summary>
            Sets the order id of the given layer.
            </summary>
            <param name="layer">The layer to modify.</param>
            <param name="newOrderID">the new order id.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.RemoveLayer(SeeingSharp.Multimedia.Core.SceneLayer)">
            <summary>
            Removes the given layer from the scene.
            </summary>
            <param name="layer">Layer to remove.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ClearLayer(System.String)">
            <summary>
            Clears the layer with the given name.
            </summary>
            <param name="layerName">The name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ClearLayer(SeeingSharp.Multimedia.Core.SceneLayer)">
            <summary>
            Clears the given layer.
            </summary>
            <param name="layer">The layer to be cleared.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.TryGetLayer(System.String)">
            <summary>
            Gets the layer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.GetLayer(System.String)">
            <summary>
            Gets the layer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Clear(System.Boolean)">
            <summary>
            Clears the scene.
            </summary>
            <param name="clearResources">Clear all resources too?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Remove(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Removes the given object from the scene.
            </summary>
            <param name="sceneObject">Object to remove.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Remove(SeeingSharp.Multimedia.Core.SceneObject,System.String)">
            <summary>
            Removes the given object from the scene.
            </summary>
            <param name="sceneObject">Object to remove.</param>
            <param name="layerName">Layer on wich the scene object was added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.PerformBeforeUpdateAsync(System.Action)">
            <summary>
            Performs the given action before updating the scene.
            (given action gets called by update thread, no other actions on the scene during this time.)
            </summary>
            <param name="actionToInvoke">The action to be invoked.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.PerformBesideRenderingAsync(System.Action)">
            <summary>
            Performs the given action beside rendering process.
            (given action gets called by update thread while render threads are rendering.)
            </summary>
            <param name="actionToInvoke">The action to be invoked.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.UpdateBesideRender(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the scene (called beside rendering).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.HandleRenderResources(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Performs some resource handling actions before rendering the frame.
            The main point here is executing Render on renderable resources.
            </summary>
            <param name="renderState">State of the render.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the scene to the given context.
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.Render2DOverlay(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders all 2D overlay components of the scene.
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.InitializeResourceDictionaries(System.Boolean)">
            <summary>
            Initializes this scene object.
            </summary>
            <param name="throwExceptionIfUnable"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.SortLayers">
            <summary>
            Sort local layer list.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.Layers">
            <summary>
            Gets a collection containing all layers.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.CountObjects">
            <summary>
            Gets total count of objects within the scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.CountResources">
            <summary>
            Gets total count of resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.CountLayers">
            <summary>
            Gets total count of layers.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.CountViews">
            <summary>
            Gets the total count of view objects registered on this scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.Messenger">
            <summary>
            Gets the messenger of this scene.
            This object is null unless the registerForMessaging argument of the
            constructor was set to true.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.SynchronizationContext">
            <summary>
            Gets the synchronization context.
            This object is null unless the registerForMessaging argument of the
            constructor was set to true.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.IsPaused">
            <summary>
            Gets or sets a value indicating whether this scene is in pause mode.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Scene.Name">
            <summary>
            Gets or sets the name of this scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ImportAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Imports all objects from the given source.
            </summary>
            <param name="objSource">The source to load from.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Scene.ImportAsync(SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Imports all objects from the given source.
            </summary>
            <param name="objSource">The source to load from.</param>
            <param name="importOptions">All options for import logic.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.#ctor(System.String,SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Creates a new SceneLayer object for the given scene.
            </summary>
            <param name="name">The name of the layer.</param>
            <param name="parentScene">Parent scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.RegisterView(System.Int32,SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Registers the given view on this layer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.GetSpecializedCollectionsCopy(SeeingSharp.Multimedia.Core.SceneSpacialObject[]@,SeeingSharp.Multimedia.Core.SceneObject[]@)">
            <summary>
            Copies local specialized collections into new array (only copies references..).
            </summary>
            <param name="spacialObjects">An array containing all spacial objects.</param>
            <param name="notSpacialObjects">An array containing all not spacial objects.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.DeregisterView(System.Int32,SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Deregisters the given view on this layer.
            </summary>
            <param name="viewIndex">The index which this view has on the current scene.</param>
            <param name="viewInformation">The ViewInformation object describing the view.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.AddObject(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Adds the given object to the layer.
            </summary>
            <param name="sceneObject">Object to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.ClearObjects">
            <summary>
            Clears this layer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.ClearResources">
            <summary>
            Clears all resources used by this layer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.RemoveObject(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Removes the given object from the layer.
            </summary>
            <param name="sceneObject">Object to remove.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.PrepareRendering(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Prepares rendering (Loads all needed resources).
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the layer.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.UpdateBesideRender(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Performs "update-beside-render" for this layer.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the scene to the given context.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.Render2DOverlay(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the 2D overlay to the given context.
            </summary>
            <param name="renderState">State of the render.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneLayer.HandleInvalidObjects(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Handles invalid objects.
            </summary>
            <param name="invalidObjects">List containing all invalid objects to handle.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.Name">
            <summary>
            Gets the name of this layer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.Scene">
            <summary>
            Gets parent scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.OrderID">
            <summary>
            Gets or sets an integer which controls the order 
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.AllowPick">
            <summary>
            Allow picking on this layer?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.PostprocessEffectKey">
            <summary>
            Gets or sets the resource key of the postprocess effect.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.ClearDepthBufferAfterRendering">
            <summary>
            Clear the depth buffer after rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.ClearDepthBufferBefreRendering">
            <summary>
            Clear the depth buffer before rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.Objects">
            <summary>
            Gets a collection containing all objects.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.ObjectsInternal">
            <summary>
            Gets a list containing all scene objects (internal accessor to the complete list).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneLayer.CountObjects">
            <summary>
            Gets total count of objects within the scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.#ctor(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneManipulator"/> class.
            </summary>
            <param name="owner">The scene which will be manipulated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.ResetObjectAndResourceCollections">
            <summary>
            Resets all object and resource collections managed locally by
            this manipulator object (e. g. property CreatedObjects).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Clear">
            <summary>
            Clears the scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Clear(System.Boolean)">
            <summary>
            Clears the scene.
            </summary>
            <param name="clearResource">Do also clear all resources.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddResource``1(System.Func{``0})">
            <summary>
            Adds a resource to the scene
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="resourceFactory">The factory method which creates the resource object.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddResource``1(System.Func{``0},SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Adds a resource to the scene
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="resourceFactory">The factory method which creates the resource object.</param>
            <param name="resourceKey">The key for the newly generated resource.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.ContainsResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Is there already a resource with the given key?
            </summary>
            <param name="resourceKey">The resource key to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddResourceIfNotCreated``1(System.Func{``0},SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Adds the given resource if it was not created before.
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="resourceFactory">The resource factory.</param>
            <param name="resourceKey">The resource key.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.ManipulateResource``1(System.Action{``0},SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Manipulates the resource with the given key.
            </summary>
            <typeparam name="ResourceType">The type of the resource.</typeparam>
            <param name="manipulateAction">The action that manipulates the resource.</param>
            <param name="resourceKey">The key of the resource to be manipulated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.RemoveResource(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Removes the resource with the given key.
            </summary>
            <param name="resourceKey">The key of the resource to be deleted.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.TriggerNewFilter(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Triggers new filter logic for the given scene object.
            </summary>
            <param name="sceneObjectLocal">The object to trigger filter logic for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddDrawingLayer(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Adds the given drawing layer.
            </summary>
            <param name="drawingLayer">The drawing layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddDrawingLayer(System.Action{SeeingSharp.Multimedia.Drawing2D.Graphics2D})">
            <summary>
            Adds the given drawing layer.
            </summary>
            <param name="drawingAction">The action that draws the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.RemoveDrawingLayer(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer)">
            <summary>
            Removes the given drawing layer.
            </summary>
            <param name="drawingLayer">The drawing layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Add``1(``0)">
            <summary>
            Adds the given object to the scene.
            </summary>
            <param name="sceneObject">Object to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Add``1(``0,System.String)">
            <summary>
            Adds the given object to the scene.
            </summary>
            <param name="sceneObject">Object to add.</param>
            <param name="layer">Layer on wich the object should be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Add3DText(System.String,SeeingSharp.Multimedia.Objects.TextGeometryOptions)">
            <summary>
            Adds a text object displaying the given text.
            </summary>
            <param name="textToDisplay">The text to be displayed.</param>
            <param name="textOptions">All options regarding the text geometry generator.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddGeneric(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Adds a new generic object targeting to the given geometry resource.
            </summary>
            <param name="geometryResource">The geometry to be used.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddGeneric(SeeingSharp.Util.NamedOrGenericKey,System.String)">
            <summary>
            Adds a new generic object targeting to the given geometry resource.
            </summary>
            <param name="geometryResource">The geometry to be used.</param>
            <param name="layer">The layer on which to add the object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddGeneric(SeeingSharp.Util.NamedOrGenericKey,System.Numerics.Vector3)">
            <summary>
            Adds a new generic object targeting to the given geometry resource.
            </summary>
            <param name="geometryResource">The geometry to be used.</param>
            <param name="position">The position for the created object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddGeneric(SeeingSharp.Util.NamedOrGenericKey,System.Numerics.Vector3,System.String)">
            <summary>
            Adds a new generic object targeting to the given geometry resource.
            </summary>
            <param name="geometryResource">The geometry to be used.</param>
            <param name="position">The position for the created object.</param>
            <param name="layer">The layer on which to add the object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddRange(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Adds all given scene objects.
            </summary>
            <param name="sceneObjects">All objects to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddRange(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Core.SceneObject},System.String)">
            <summary>
            Adds all given scene objects.
            </summary>
            <param name="sceneObjects">All objects to add.</param>
            <param name="layer">Layer on wich the objects should be added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Remove(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Removes the given object from the scene.
            </summary>
            <param name="sceneObject">Object to remove.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.Remove(SeeingSharp.Multimedia.Core.SceneObject,System.String)">
            <summary>
            Removes the given object from the scene.
            </summary>
            <param name="sceneObject">Object to remove.</param>
            <param name="layerName">Layer on wich the scene object was added.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.AddLayer(System.String)">
            <summary>
            Adds a new layer with the given name.
            </summary>
            <param name="name">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.RemoveLayer(System.String)">
            <summary>
            Removes the layer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.RemoveLayer(SeeingSharp.Multimedia.Core.SceneLayer)">
            <summary>
            Removes the given layer from the scene.
            </summary>
            <param name="layer">Layer to remove.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.SetLayerOrderID(System.String,System.Int32)">
            <summary>
            Sets the order id of the given layer.
            </summary>
            <param name="layer">The name of the layer.</param>
            <param name="oderID">The order id to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.SetLayerOrderID(SeeingSharp.Multimedia.Core.SceneLayer,System.Int32)">
            <summary>
            Sets the order id of the given layer.
            </summary>
            <param name="layerObject">The layer object.</param>
            <param name="oderID">The order id to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.ClearLayer(System.String)">
            <summary>
            Clears the layer with the given name.
            </summary>
            <param name="layerName">The name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.ClearLayer(SeeingSharp.Multimedia.Core.SceneLayer)">
            <summary>
            Clears the given layer.
            </summary>
            <param name="layer">The layer to be cleared.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.GetSceneObjects(System.String)">
            <summary>
            Gets all objects of the given layer.
            </summary>
            <param name="layerName">The name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.GetLayer(System.String)">
            <summary>
            Gets the layer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneManipulator.CheckValid">
            <summary>
            Checks whether this manipulator is still valid.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneManipulator.Owner">
            <summary>
            Gets the owner of this manipulator object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneManipulator.IsValid">
            <summary>
            Is this manipulator still valid?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneManipulator.CreatedObjects">
            <summary>
            Gets a list containing all created objects.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneManipulator.CreatedResources">
            <summary>
            Gets a list containing all created resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneObject"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.SetSceneAndLayer(SeeingSharp.Multimedia.Core.Scene,SeeingSharp.Multimedia.Core.SceneLayer)">
            <summary>
            Registers the given scene and layer on this object.
            </summary>
            <param name="scene">The scene.</param>
            <param name="sceneLayer">The scene layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.ResetSceneAndLayer">
            <summary>
            Deregisters the current scene and layer from this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.RegisterBehavior(SeeingSharp.Multimedia.Core.SceneObjectBehavior)">
            <summary>
            Registers the given behavior on this object.
            </summary>
            <param name="behavior">The behavior to be registered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.GetBehavior``1">
            <summary>
            Gets the behavior of the given type.
            </summary>
            <typeparam name="BehaviorType">The type of the behavior to get.</typeparam>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.GetBehavior(System.Type)">
            <summary>
            Gets the behavior of the given type.
            </summary>
            <param name="behaviorType">The type of the behavior to get.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.DependsOn(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Check all dependencies of this object.
            </summary>
            <param name="other">The object to check for.</param>
            <returns>true if the given object is a dependency of this one.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.DependsOnSingleLevel(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Determines whether this object already contains this dependency (no lower level check).
            </summary>
            <param name="dependency">The dependency to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.GetAllDependencies">
            <summary>
            Queries for all dependencies (also lower level).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.AddDependency(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Adds the given object as a dependency.
            </summary>
            <param name="dependency">The object which is be be located under this one within object hierarchy.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.RemoveDependency(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Removes the given object from the dependency list.
            </summary>
            <param name="dependency">The object which is to be removed from the dependency list.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.IsVisible(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Is this object visible in the given view?
            </summary>
            <param name="viewInfo">The view info to check.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.ClearVisibilityStageData">
            <summary>
            Clears current visibility data.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.GetVisibilityCheckData(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Gets the data object used for visibility checking.
            </summary>
            <param name="viewInfo">The VisibilityCheckData for this object for the given view.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.Pick(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.Multimedia.Core.PickingOptions)">
            <summary>
            Picks an object in 3D-World.
            </summary>
            <param name="rayStart">Start of picking ray.</param>
            <param name="rayDirection"></param>
            <param name="viewInfo">Information about the view that triggered picking.</param>
            <param name="pickingOptions">Some additional options for picking calculations.</param>
            <returns>Returns the distance to the object or float.NaN if object is not picked.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.IsInBoundingFrustum(SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.BoundingFrustum@)">
            <summary>
            Is this object visible currently?
            </summary>
            <param name="viewInfo">Information about the view that triggered bounding volume testing.</param>
            <param name="boundingFrustum">The bounding frustum to check.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.RegisterLayerViewSubset(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Registers a layer view subset with the given index.
            </summary>
            <param name="layerViewSubset">The layer view subset to register.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.DeregisterLayerViewSubset(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Deregisters a layer view subset with the given index.
            </summary>
            <param name="layerViewSubset">The layer view subset to deregister.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.IsLayerViewSubsetRegistered(System.Int32)">
            <summary>
            Is the given view index registered on this object?
            </summary>
            <param name="viewIndex">The index to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.GetReferencedResources(SeeingSharp.Util.SingleInstanceCollection{SeeingSharp.Multimedia.Core.Resource})">
            <summary>
            Fills the given collection with all referenced resources.
            </summary>
            <param name="resourceCollection">The collection to be filled,</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates this object.
            </summary>
            <param name="updateState">State of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateOverall(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Update logic for overall updates.
            This method should be used for update logic that also depends on other object.
            UpdateOverall methods are called sequentially object by object.
            </summary>
            <param name="updateState">Current update state of the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.Dispose">
            <summary>
            Disposes all unmanaged resources of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateForView(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UnloadResources">
            <summary>
            Unloads all resources of the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.OnAddedToScene(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Called when this object was added to a scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.OnRemovedFromScene(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Called when this object was removed from a scene.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateDependenciesInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Updates all dependencies of this object. Override this to change default behavior.
            </summary>
            <param name="updateState">The current update state.</param>
            <param name="dependencies">The full dependency list that should be updated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.CustomData">
            <summary>
            Gets a dynamic container for custom data.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.Tag1">
            <summary>
            Gets or sets an additional data object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.Tag2">
            <summary>
            Gets or sets an additional data object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.IsPickingTestVisible">
            <summary>
            Is this object visible for picking-test?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.Scene">
            <summary>
            Gets current scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.Messenger">
            <summary>
            Gets the messenager associated to this object.
            This object is null unless the registerForMessaging argument of the
            Scene's constructor was set to true.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.SynchronizationContext">
            <summary>
            Gets the synchronization context.
            This object is null unless the registerForMessaging argument of the
            Scene's constructor was set to true.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.SceneLayer">
            <summary>
            Gets or sets the scene layer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.AnimationHandler">
            <summary>
            Gets current AnimationHandler object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.IsStatic">
            <summary>
            Is this object a static object?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SceneObject.TransormationChanged">
            <summary>
            Indicates whether transformation data has changed during last update calls.
            This member is used for viewbox-culling to ignore objects which haven't changed their state.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.TargetDetailLevel">
            <summary>
            Gets or sets the target detail level.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.HasOwner">
            <summary>
            Gets the total count of owners where this object is a direct dependency of.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneObject.CountDependencies">
            <summary>
            Gets the total count of direct dependencies of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.CountRenderPassSubscriptions(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Counts all render pass subscriptions related to the given view subset.
            </summary>
            <param name="layerViewSubset">The layer view subset.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.SubscribeToPass(SeeingSharp.Multimedia.Core.RenderPassInfo,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset,System.Action{SeeingSharp.Multimedia.Core.RenderState})">
            <summary>
            Subscribes on the given render pass with the given action.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UpdateSubscription(SeeingSharp.Multimedia.Core.RenderPassSubscription,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updades all subscription info for given subscription row.
            This method is needed because 'RenderPassSubscription" is a struct and values are changed by host object.
            </summary>
            <param name="newSubscriptionInfo">The subscription information passed by host object.</param>
            <param name="layerViewSubset">The host object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UnsubscribeFromPass(SeeingSharp.Multimedia.Core.RenderPassInfo,SeeingSharp.Multimedia.Core.UpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Unsubscribes from the given render pass.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.ClearSubscriptionsWithoutUnsubscribeCall(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset,SeeingSharp.Multimedia.Core.RenderPassSubscription)">
            <summary>
            Clears all subscriptions on the given view subset.
            Only for internal use.. this method gets called when a view is deregistered.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.ClearSubscriptionsWithoutUnsubscribeCall(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Clears all subscriptions on the given view subset.
            Only for internal use.. this method gets called when a view is deregistered.
            </summary>
            <param name="layerViewSubset">The view subset from which to clear all subscription entries.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneObject.UnsubsribeFromAllPasses(SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Unsubscribes from all passes.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.ScenePivotObject">
            <summary>
            This class represents a Pivot with no visualization at all.
            A Pivot is only used to transform more child objects dependent on it.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScenePivotObject.TryGetBoundingBox(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding box for the given render-loop.
            Returns BoundingBox.Empty if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingBox.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScenePivotObject.TryGetBoundingSphere(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding sphere for the given render-loop.
            Returns BoundingSphere.Empty, if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingSphere.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScenePivotObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScenePivotObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ScenePivotObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneSpacialObject"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.EnableShaderGeneratedBorder">
            <summary>
            Enables a shader generated border.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.DisableShaderGeneratedBorder">
            <summary>
            Disables shader generated border.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.TryGetBoundingBox(SeeingSharp.Multimedia.Core.RenderLoop)">
            <summary>
            Tries to get the bounding box for the given render-loop.
            Returns BoundingBox.Empty if it is not available.
            </summary>
            <param name="renderLoop">The RenderLoop object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.TryGetBoundingBox(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding box for the given render-loop.
            Returns BoundingBox.Empty if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingBox.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.TryGetBoundingSphere(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding sphere for the given render-loop.
            Returns BoundingSphere.Empty, if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingSphere.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.MoveForward(System.Single)">
            <summary>
            Zooms the camera into or out along the actual target-vector.
            </summary>
            <param name="dist">The Distance you want to zoom.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.Move(System.Single,System.Single)">
            <summary>
            Moves the object position.
            </summary>
            <param name="x">moving in x direction.</param>
            <param name="z">moving in z direction.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UpDown(System.Single)">
            <summary>
            Moves the object up and down.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UpDownWithoutMoving(System.Single)">
            <summary>
            Moves the object up and down.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.Strave(System.Single)">
            <summary>
            Straves the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.StraveAtPlane(System.Single)">
            <summary>
            Streaves the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.GetRotationMatrix">
            <summary>
            Gets the rotation matrix for this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.GetScalingMatrix">
            <summary>
            Gets the scaling matrix for this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.GetTranslationMatrix">
            <summary>
            Gets the translation matrix for this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UpdateDependenciesInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Updates all dependencies of this object. Override this to change default behavior.
            </summary>
            <param name="updateState">The current update state.</param>
            <param name="dependencies">The full dependency list that should be updated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.TriggerRecreateOfParameters">
            <summary>
            Triggers recreation of render parameters.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UnloadResources">
            <summary>
            Unloads all resources
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.UpdateAndApplyRenderParameters(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies all current render parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSpacialObject.OnOpacityChanged">
            <summary>
            Called when opacity has changed.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.RenderParameters">
            <summary>
            Gets all local render parameters.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.AnimationHandler">
            <summary>
            Gets current AnimationHandler object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Position">
            <summary>
            Gets or sets current position.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.XPos">
            <summary>
            Gets or sets the x coordinate of this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.YPos">
            <summary>
            Gets or sets the y coordinate of this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.ZPos">
            <summary>
            Gets or sets the z coordinate of this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.RotationEuler">
            <summary>
            Gets or sets current rotation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.TransformationType">
            <summary>
            Gets or sets the used rotation type.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Scaling">
            <summary>
            Gets or sets current scaling.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.RotationUp">
            <summary>
            Gets or sets the vector that points up (default: Y-Axis).
            This is relevant when rotation is calculated by direction.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.RotationForward">
            <summary>
            Gets or sets the vector that points forward (default: Z-Axis).
            This is relevant when rotation is calculated by direction.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.MaxScaleFactor">
            <summary>
            Gets the current maximum scale factor.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Transform">
            <summary>
            Gets a matrix that transforms local space to world space.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.TransformSourceObject">
            <summary>
            Gets or sets the source of the transformation value when SpacialTransformationType.CustomTransform is set.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.CustomTransform">
            <summary>
            Getr or sets a matrix which is to apply on SpacialTransformationType.CustomTransform.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Up">
            <summary>
            Gets the vector that looks up.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Look">
            <summary>
            Gets the vector that looks into front.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Right">
            <summary>
            Gets the vector that looks to the right.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Color">
            <summary>
            The color of this object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.AccentuationFactor">
            <summary>
            The accentuation factor.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.SceneSpacialObject.Opacity">
            <summary>
            Gets or sets the opacity of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.SceneSynchronizationContext.#ctor(SeeingSharp.Multimedia.Core.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.SceneSynchronizationContext"/> class.
            </summary>
            <param name="scene">The target scene object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.#ctor(SeeingSharp.Multimedia.Core.SceneLayer,SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.Multimedia.Core.ResourceDictionary,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.RegisterObjectRange(SeeingSharp.Multimedia.Core.SceneObject[])">
            <summary>
            Registers the given collection of objects on this view subset.
            </summary>
            <param name="sceneObjects">The scene objects to be registered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.ClearResources">
            <summary>
            Clears all resources created by this view subset.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.DeregisterObject(SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Deregisters the given object form this view subset.
            </summary>
            <param name="sceneObject">The object to be removed.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.ClearAllSubscriptions(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Clears all subscriptions 
            </summary>
            <param name="allObjects">A collection containing all objects of the current layer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.UpdateForView(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Executes view update using the given update state object.
            </summary>
            <param name="updateState">The update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.UpdateBesideRender(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,System.Collections.Generic.Queue{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Update logic beside rendering.
            </summary>
            <param name="updateState">The update state.</param>
            <param name="sceneObjectsForSingleUpdateCall">A collection of scene objects for a single update call. These are normally a list of newly inserted static objects.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders this view subset.
            </summary>
            <param name="renderState">The RenderState object holding all relevant data for current render pass</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.SubscribeForPass(SeeingSharp.Multimedia.Core.RenderPassInfo,SeeingSharp.Multimedia.Core.SceneObject,System.Action{SeeingSharp.Multimedia.Core.RenderState})">
            <summary>
            Subscribes the given object to the given render pass.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.UnsubscribeForPass(SeeingSharp.Multimedia.Core.RenderPassSubscription)">
            <summary>
            Unsubscribes the given object from the given render pass.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.PerformViewboxCulling(SeeingSharp.Multimedia.Core.SceneObject,System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObjectFilter},System.Boolean)">
            <summary>
            Main method for object filtering. This method checks whether an object is visible or not.
            </summary>
            <param name="actObject">The object to be tested.</param>
            <param name="filters">All currently active filters.</param>
            <param name="refreshStaticObjects">A flag inicating whether we have to update all objects.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.HandleObjectVisibilityChanged(SeeingSharp.Multimedia.Core.SceneObject,System.Boolean,System.Boolean)">
            <summary>
            Handles changed object visibility.
            This method is called from default update thread.
            </summary>
            <param name="sceneObject">The scene object to be handled.</param>
            <param name="oldVisibility">Previous visibility flag value.</param>
            <param name="newVisibility">New visibility flag value.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.RefreshDeviceDependentResources">
            <summary>
            Refreshes device dependent resources of this class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.RenderPass(SeeingSharp.Multimedia.Core.RenderPassBase,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.PassSubscribionProperties,SeeingSharp.Multimedia.Core.RenderState,System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject}@)">
            <summary>
            Rendering logic for lines renderings.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.Render2DOverlay(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the 2D overlay of this view subset.
            </summary>
            <param name="renderState">The RenderState object holding all relevant data for current render pass</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.HandleInvalidObjects(System.Collections.Generic.List{SeeingSharp.Multimedia.Core.SceneObject})">
            <summary>
            Handles invalid objects.
            </summary>
            <param name="invalidObjects">List containing all invalid objects to handle.</param>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.ViewIndex">
            <summary>
            Gets or sets the index of this view subset within the scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.ViewInformation">
            <summary>
            Gets the corresponding ViewInformation object.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset.PassSubscribionProperties">
            <summary>
            Helper class holding some information abount subscriptions per pass.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.VisibilityCheckData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.VisibilityCheckData"/> class.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.VisibilityCheckData.FilterStageData">
            <summary>
            All data the the corresponding filter stages.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.VisibilityCheckData.IsVisible">
            <summary>
            Is this object visible?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.VisibilityCheckFilterStageData.HasExecuted">
            <summary>
            Was this filter executed for this object?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.VisibilityCheckFilterStageData.HasPassed">
            <summary>
            Has the object passed this filter stage?
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.SpacialTransformationType">
            <summary>
            The transformation type used within a scene object node.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.ScalingTranslationEulerAngles">
            <summary>
            Scaling, translation and Rotation using euler angles (pitch, yaw and roll).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.ScalingTranslationQuaternion">
            <summary>
            Scaling, translation and Rotation using quaternion.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.ScalingTranslationDirection">
            <summary>
            Scaling, translation and rotation based on direction vectors (forward, up)
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.ScalingTranslation">
            <summary>
            Scaling and translation components.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.TranslationEulerAngles">
            <summary>
            Translation and Rotation using euler angles (pitch, yaw and roll).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.TranslationQuaternion">
            <summary>
            Tranlation and Rotation using quaternion.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.TranslationDirection">
            <summary>
            Translation and rotation using direction vectors (forward, up)
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.Translation">
            <summary>
            Just translation transformation
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.CustomTransform">
            <summary>
            A custom transformation matrix.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.TakeFromOtherObject">
            <summary>
            The object should take its transform from another object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.SpacialTransformationType.None">
            <summary>
            No transformation at all
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode">
            <summary>
            The instancing mode implemented by a material.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode.SingleObject">
            <summary>
            Shaders for rendering a single object.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode.StandardInstancing">
            <summary>
            Shaders for rendering multi objects using standard instancing technique.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.ObjectHostMode">
            <summary>
            Defines the host-mode remote object hosting.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ObjectHostMode.Default">
            <summary>
            Default mode - overtake all possible values.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ObjectHostMode.IgnoreRotation">
            <summary>
            Take all values, but don't take rotation value.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ObjectHostMode.IgnoreScaling">
            <summary>
            Take all values, but don't take size value.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Core.ObjectHostMode.IgnoreRotationScaling">
            <summary>
            Take all values, but don't take size and rotation value.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.Rendering3DArgs">
            <summary>
            EventArgs class for Rendering3DHandler.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Rendering3DArgs.#ctor(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Rendering3DArgs"/> class.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Rendering3DArgs.RenderState">
            <summary>
            Gets the render state.
            </summary>
            <value>Gets the render state.</value>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.Updating3DArgs">
            <summary>
            EventArgs class for Updating3DHandler.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.Updating3DArgs.#ctor(SeeingSharp.Multimedia.Core.UpdateState)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.Updating3DArgs"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.Updating3DArgs.UpdateState">
            <summary>
            Gets or sets the update state.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.#ctor(SeeingSharp.Size2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp"/> class.
            </summary>
            <param name="size">The total size of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.ToArray">
            <summary>
            Converts the underlying buffer to a managed byte array.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the value at the given (pixel) location.
            </summary>
            <param name="xPos">The x position.</param>
            <param name="yPos">The y position.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.SetAllAlphaValuesToOne_ARGB">
            <summary>
            Sets all alpha values to one.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.SizeInBytes">
            <summary>
            Gets the total size of the buffer in bytes.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Width">
            <summary>
            Gets the width of the buffer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Pitch">
            <summary>
            Gets the pitch of the underlying texture data.
            (pitch = stride, see https://msdn.microsoft.com/en-us/library/windows/desktop/aa473780(v=vs.85).aspx )
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Stride">
            <summary>
            Gets the pitch of the underlying texture data.
            (pitch = stride, see https://msdn.microsoft.com/en-us/library/windows/desktop/aa473780(v=vs.85).aspx )
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Height">
            <summary>
            Gets the height of the buffer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.PixelSize">
            <summary>
            Gets the pixel size of this texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp.Pointer">
            <summary>
            Gets the pointer of the buffer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.#ctor(SeeingSharp.Size2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat"/> class.
            </summary>
            <param name="size">The total size of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.QueryForObjectID(System.Int32,System.Int32)">
            <summary>
            Queries for the ObjectID at the given location.
            </summary>
            <param name="xPos">The x position where to start.</param>
            <param name="yPos">The y position where to start.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.Item(System.Int32,System.Int32)">
            <summary>
            Gets the float value which is located on the given location.
            </summary>
            <param name="xPos">The x location of the float value.</param>
            <param name="yPos">The y location of the float value.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.SizeInBytes">
            <summary>
            Gets the total size of the buffer in bytes.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.Width">
            <summary>
            Gets the width of the buffer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.Height">
            <summary>
            Gets the height of the buffer.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat.Pointer">
            <summary>
            Gets the pointer of the buffer.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.PlatformDetector">
            <summary>
            A helper class which is responsible for detecting the current platform.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.PlatformDetector.#cctor">
            <summary>
            Initializes the <see cref="T:SeeingSharp.Multimedia.Core.PlatformDetector"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.PlatformDetector.DetectPlatform">
            <summary>
            Checks on which platform we are running currently.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.#ctor(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Core.TextureUploader"/> class.
            </summary>
            <param name="device">The device on which the texture was created.</param>
            <param name="texture">The texture which is to be uploaded to system memory.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.UploadToGdiBitmap">
            <summary>
            Takes a screenshot and returns it as a gdi bitmap.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.UploadToIntBuffer(SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Takes a color texture and uploads it to the given buffer.
            </summary>
            <param name="intBuffer">The target int buffer to which to copy all pixel data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.UploadToFloatBuffer">
            <summary>
            Upload a floatingpoint texture from the graphics hardware.
            This method is only valid for resources of type R32_Floatfloat.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.UploadToFloatBuffer(SeeingSharp.Multimedia.Core.MemoryMappedTextureFloat)">
            <summary>
            Upload a floatingpoint texture from the graphics hardware.
            This method is only valid for resources of type R32_Floatfloat.
            </summary>
            <param name="floatBuffer">The target float buffer to which to copy all ObjectIDs.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.UploadNormalDepthBitmapsWpf(System.Windows.Media.Imaging.WriteableBitmap@,System.Windows.Media.Imaging.WriteableBitmap@)">
            <summary>
            Takes a NormalDepth texture and creates a normal- and a depth-bitmap
            </summary>
            <param name="normal">The normal-bitmap</param>
            <param name="depth">The depth-bitmap</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.CopyTextureToStagingResource(System.Boolean)">
            <summary>
            Loads the target texture int a staging texture.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.TextureUploader.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Core.MFHelper">
            <summary>
            A helper class containing utility methods used when working with Media Foundation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.GetGuidOf``1">
            <summary>
            Gets the Guid from the given type.
            </summary>
            <typeparam name="T">The type to get the guid from.</typeparam>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.BuildVideoSubtypeGuid(System.Int32)">
            <summary>
            Builds a Guid for a video subtype for the given format id (see MFRawFormats).
            </summary>
            <param name="rawFormatID">The raw format id.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.BuildVideoSubtypeGuid(System.String)">
            <summary>
            Helper function that builds the Guid for a video subtype using the given FOURCC value
            </summary>
            <param name="fourCCString">The FOURCC string to convert to a guid.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.GetFourCCValue(System.String)">
            <summary>
            Gets the FourCC value for the given string.
            More infos about FourCC:
             see: http://msdn.microsoft.com/en-us/library/windows/desktop/bb970509(v=vs.85).aspx,
             see: http://msdn.microsoft.com/en-us/library/windows/desktop/aa370819(v=vs.85).aspx#creating_subtype_guids_from_fourccs_and_d3dformat_values,
             see: http://de.wikipedia.org/wiki/FourCC
            </summary>
            <param name="fourCCString">The FourCC string to be converted into an unsigned integer value.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.GetMFEncodedIntsByValues(System.Int32,System.Int32)">
            <summary>
            Encodes the given values to a single long.
            Example usage: Size attribute.
            </summary>
            <param name="valueA">The first value.</param>
            <param name="valueB">The second value.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.GetValuesByMFEncodedInts(System.Int64)">
            <summary>
            Decodes two integer values from the given long.
            Example usage: Size attribute.
            </summary>
            <param name="encodedInts">The long containing both encoded ints.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.DurationLongToTimeSpan(System.Int64)">
            <summary>
            Converts the given duration value from media foundation to a TimeSpan structure.
            </summary>
            <param name="durationLong">The duration value.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Core.MFHelper.TimeSpanToDurationLong(System.TimeSpan)">
            <summary>
            Converts the given TimeSpan value to a duration value for media foundation
            </summary>
            <param name="timespan">The timespan.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer.#ctor(System.Action{SeeingSharp.Multimedia.Drawing2D.Graphics2D})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer"/> class.
            </summary>
            <param name="draw2DAction">The action which is used for rendering.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer.Draw2DInternal(SeeingSharp.Multimedia.Drawing2D.Graphics2D)">
            <summary>
            Performs 2D rendering. This method gets called directly from RenderLoop or the Scene.
            </summary>
            <param name="graphics">The graphics object used for drawing.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer.Draw2D(SeeingSharp.Multimedia.Drawing2D.Graphics2D)">
            <summary>
            Performs custom 2D rendering.
            Be carefull: This method is called from the rendering thread!
            </summary>
            <param name="graphics">The graphics object used for drawing.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.#ctor(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct2D1.RenderTarget,SeeingSharp.Size2F)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.Graphics2D"/> class.
            </summary>
            <param name="device">The hardware device which is used for rendering.</param>
            <param name="renderTarget">The render target which is used by this graphics object.</param>
            <param name="screenSize">The size of the screen in device independent pixels.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.PushTransformSettings(SeeingSharp.Multimedia.Drawing2D.Graphics2DTransformSettings)">
            <summary>
            Sets current transform settings on this graphics object.
            (be carefull, the state is changed on device level!)
            </summary>
            <param name="transformSettings">The settings to be set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ApplyTransformStack">
            <summary>
            Applies the top of the local transform stack.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.PopTransformSettings">
            <summary>
            Resets the transform setting son this graphics object.
            (be carefull, the state is changed on device level!)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.BlockForLocalTransform_ReplacePrevious(System.Numerics.Matrix3x2)">
            <summary>
            Pushes a new matrix to the TransformStack and pops it after Dispose has 
            been called on the result object.
            </summary>
            <param name="customTransform">The custom transform matrix.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.BlockForLocalTransform_TransformLocal(System.Numerics.Matrix3x2)">
            <summary>
            Transform current matrix locally with the given matrix.
            </summary>
            <param name="customTransform">The custom transform matrix.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.Clear(SeeingSharp.Color4)">
            <summary>
            Clears the current view.
            </summary>
            <param name="clearColor">Color of the clear.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawGeometry(SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase,SeeingSharp.Multimedia.Drawing2D.BrushResource,System.Single)">
            <summary>
            Draws the given geometry.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawRectangle(SeeingSharp.RectangleF,SeeingSharp.Multimedia.Drawing2D.BrushResource,System.Single)">
            <summary>
            Draws the given rectangle with the given brush.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawRoundedRectangle(SeeingSharp.RectangleF,System.Single,System.Single,SeeingSharp.Multimedia.Drawing2D.BrushResource,System.Single)">
            <summary>
            Draws the given rounded rectangle with the given brush.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawPoint(System.Numerics.Vector2,SeeingSharp.Multimedia.Drawing2D.BrushResource)">
            <summary>
            Draws a point at the given location.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawLine(System.Numerics.Vector2,System.Numerics.Vector2,SeeingSharp.Multimedia.Drawing2D.BrushResource,System.Single)">
            <summary>
            Draws the given line with the given brush.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.FillRectangle(SeeingSharp.RectangleF,SeeingSharp.Multimedia.Drawing2D.BrushResource)">
            <summary>
            Fills the given rectangle with the given brush object.
            </summary>
            <param name="rectangle">The rectangle to be filled.</param>
            <param name="brush">The brush to be used.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.FillGeometry(SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase,SeeingSharp.Multimedia.Drawing2D.BrushResource)">
            <summary>
            Fills the given geometry.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.FillGeometry(SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase,SeeingSharp.Multimedia.Drawing2D.BrushResource,SeeingSharp.Multimedia.Drawing2D.BrushResource)">
            <summary>
            Fills the given geometry.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.FillRoundedRectangle(SeeingSharp.RectangleF,System.Single,System.Single,SeeingSharp.Multimedia.Drawing2D.BrushResource)">
            <summary>
            Fills the given rectangle with the given brush object.
            </summary>
            <param name="radiusX">The x radius of the rectangle's corners.</param>
            <param name="radiusY">The y radius of the rectangle's corners.</param>
            <param name="rectangle">The rectangle to be filled.</param>
            <param name="brush">The brush to be used.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawText(System.String,SeeingSharp.Multimedia.Drawing2D.TextFormatResource,SeeingSharp.RectangleF,SeeingSharp.Multimedia.Drawing2D.BrushResource,SeeingSharp.Multimedia.Drawing2D.DrawTextOptions,SeeingSharp.Multimedia.Drawing2D.MeasuringMode)">
            <summary>
            Draws the given text on the screen.
            </summary>
            <param name="textToDraw">The text to draw.</param>
            <param name="textFormat">The TextFormat to be used.</param>
            <param name="targetRectangle">The target rectangle.</param>
            <param name="brush">The brush.</param>
            <param name="drawOptions">Some draw options to be passed to Direct2D.</param>
            <param name="measuringMode">Sets the measuring mode to be passed to Direct2D.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawBitmap(SeeingSharp.Multimedia.Drawing2D.BitmapResource,System.Single,SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode)">
            <summary>
            Draws the given bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawBitmap(SeeingSharp.Multimedia.Drawing2D.BitmapResource,SeeingSharp.RectangleF,System.Single,SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode)">
            <summary>
            Draws the given bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="destinationRectangle">The target rectangle where to draw the bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawBitmap(SeeingSharp.Multimedia.Drawing2D.BitmapResource,SeeingSharp.RectangleF,SeeingSharp.RectangleF,System.Single,SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode)">
            <summary>
            Draws the given bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="destinationRectangle">The target rectangle where to draw the bitmap.</param>
            <param name="sourceRectangle">The area which to take from the bitmap.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawBitmap(SeeingSharp.Multimedia.Drawing2D.BitmapResource,System.Numerics.Vector2,System.Single,SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode)">
            <summary>
            Draws the given bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="destinationOrigin">The point where to start rendering.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Graphics2D.DrawBitmap(SeeingSharp.Multimedia.Drawing2D.BitmapResource,System.Numerics.Vector2,SeeingSharp.RectangleF,System.Single,SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode)">
            <summary>
            Draws the given bitmap.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="destinationOrigin">The point where to start rendering.</param>
            <param name="opacity">The opacity.</param>
            <param name="sourceRectangle">The area which to take from the bitmap.</param>
            <param name="interpolationMode">The interpolation mode.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.Device">
            <summary>
            Gets the device which is used for rendering.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ScreenBounds">
            <summary>
            Gets the bounds of the screen.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ScreenPixelSize">
            <summary>
            Gets the total size of pixels (already scaled by DPI).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ScreenSize">
            <summary>
            Gets the total size of this screen.
            This value may be a virtual screen size (see TransformMode).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ScreenWidth">
            <summary>
            Gets the width of the screen.
            This value may be a virtual screen size (see TransformMode).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.ScreenHeight">
            <summary>
            Gets the height of the screen.
            This value may be a virtual screen size (see TransformMode).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Graphics2D.TransformStack">
            <summary>
            Gets the current transform stack.
            Call 'ApplyTransformStack' to apply the current top matrix of this stack.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.EllipseGeometryResource.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.EllipseGeometryResource"/> class.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius in x direction.</param>
            <param name="radiusY">The radius in y direction.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.EllipseGeometryResource.SetContent(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Sets the content to all lines in the given polygon.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius in x direction.</param>
            <param name="radiusY">The radius in y direction.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.EllipseGeometryResource.GetGeometry">
            <summary>
            Gets the geometry object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.#ctor(SeeingSharp.Polygon2D)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource"/> class.
            </summary>
            <param name="polygon">The data which populates the geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.SetContent(SeeingSharp.Polygon2D)">
            <summary>
            Sets the content to all lines in the given polygon.
            </summary>
            <param name="polygon">The polygon.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.Intersects(SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource)">
            <summary>
            Does this geometry intersect with the given one?
            </summary>
            <param name="otherGeometry">The other geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.GetGeometry">
            <summary>
            Gets the geometry object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.PolygonGeometryResource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Drawing2DResourceBase.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Drawing2DResourceBase.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.Drawing2DResourceBase.IsDisposed">
            <summary>
            Is this object disposed?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.IImageInternal.GetImageObject(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the image object..
            </summary>
            <param name="device">The device for which to get the image.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase.IntersectsWith(SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase)">
            <summary>
            A very simple collision check between this geometry and the given one.
            </summary>
            <param name="other">The other geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase.IntersectsWith(SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase,System.Numerics.Matrix3x2)">
            <summary>
            A very simple collision check between this geometry and the given one.
            </summary>
            <param name="other">The other geometry.</param>
            <param name="otherTransform">The matrix which is used to transform the given geometry bevore checking.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.Geometry2DResourceBase.GetGeometry">
            <summary>
            Gets the geometry object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.BitmapResource.SeeingSharp#Multimedia#Drawing2D#IImageInternal#GetImageObject(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the input object for an effect.
            </summary>
            <param name="device">The device for which to get the input.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.RadialGradientBrushResource.#ctor(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single,SeeingSharp.Multimedia.Drawing2D.GradientStop[],SeeingSharp.Multimedia.Drawing2D.ExtendMode,SeeingSharp.Multimedia.Drawing2D.Gamma,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.RadialGradientBrushResource" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.RadialGradientBrushResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.RadialGradientBrushResource.GetBrush(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the brush for the given device.
            </summary>
            <param name="engineDevice">The device for which to get the brush.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.RadialGradientBrushResource.LoadedBrushResources">
            <summary>
            A simple helper storing both resurces.. 
             - the GradientStopCollection
             - and the RadialGradientBrush itself
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.LinearGradientBrushResource.#ctor(System.Numerics.Vector2,System.Numerics.Vector2,SeeingSharp.Multimedia.Drawing2D.GradientStop[],SeeingSharp.Multimedia.Drawing2D.ExtendMode,SeeingSharp.Multimedia.Drawing2D.Gamma,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.SolidBrushResource" /> class.
            </summary>
            <param name="startPoint">The start point of the gradient.</param>
            <param name="endPoint">The end point of the gradient.</param>
            <param name="gradientStops">All points within the color gradient.</param>
            <param name="extendMode">How to draw outside the content area?</param>
            <param name="gamma">The gama configuration.</param>
            <param name="opacity">The opacity value of the brush.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.LinearGradientBrushResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.LinearGradientBrushResource.GetBrush(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the brush for the given device.
            </summary>
            <param name="engineDevice">The device for which to get the brush.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.LinearGradientBrushResource.LoadedBrushResources">
            <summary>
            A simple helper storing both resurces.. 
             - the GradientStopCollection
             - and the LinearGradientBrush itself
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource">
            <summary>
            This object represents a inmemory chached bitmap which is 
            loaded from a ResourceLink (e. g. a file).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource"/> class.
            </summary>
            <param name="resource">The resource from w.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.GetBitmap(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the bitmap.
            </summary>
            <param name="engineDevice">The engine device.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.PixelWidth">
            <summary>
            Gets the width of the bitmap in pixel´.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.StandardBitmapResource.PixelHeight">
            <summary>
            Gets the height of the bitmap in pixel.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WriteableBitmapResource.#ctor(SeeingSharp.Size2,SeeingSharp.Multimedia.Drawing2D.BitmapFormat,SeeingSharp.Multimedia.Drawing2D.AlphaMode,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.WriteableBitmapResource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WriteableBitmapResource.SetBitmapContent(SeeingSharp.Multimedia.Drawing2D.Graphics2D,System.IntPtr,System.Int32)">
            <summary>
            Sets the bitmap's contents.
            </summary>
            <param name="graphics">The graphics object.</param>
            <param name="pointer">The pointer to the source data.</param>
            <param name="pitch"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WriteableBitmapResource.GetBitmap(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the bitmap for the given device..
            </summary>
            <param name="engineDevice">The engine device.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WriteableBitmapResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.BrushResource.GetBrush(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the brush for the given device.
            </summary>
            <param name="engineDevice">The device for which to get the brush.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.SolidBrushResource.#ctor(SeeingSharp.Color4,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.SolidBrushResource" /> class.
            </summary>
            <param name="singleColor">Color of the single.</param>
            <param name="opacity">The opacity value of the brush.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.SolidBrushResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.SolidBrushResource.GetBrush(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the brush for the given device.
            </summary>
            <param name="engineDevice">The device for which to get the brush.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.#ctor(System.String,System.Single,SeeingSharp.Multimedia.Drawing2D.FontWeight,SeeingSharp.Multimedia.Drawing2D.FontStyle,SeeingSharp.Multimedia.Drawing2D.FontStretch)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.TextFormatResource"/> class.
            </summary>
            <param name="fontFamilyName">Name of the font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The weight of the font.</param>
            <param name="fontStretch">The stretch parameter for the font.</param>
            <param name="fontStyle">The style parameter for the font.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.UnloadResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Unloads all resources loaded on the given device.
            </summary>
            <param name="engineDevice">The device for which to unload the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.GetTextFormat(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Gets the TextFormat object for the given device.
            </summary>
            <param name="engineDevice">The device for which to get the brush.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.ParagraphAlignment">
            <summary>
            Gets or sets the alignment of the paragraph.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.TextAlignment">
            <summary>
            Gets or sets the alignment of the paragraph.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.WordWrapping">
            <summary>
            Gets or sets the WordWrapping mode.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing2D.TextFormatResource.ReadingDirection">
            <summary>
            Gets or sets the reading direction.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.DebugDrawingLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.DebugDrawingLayer"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.DebugDrawingLayer.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.DebugDrawingLayer.Draw2D(SeeingSharp.Multimedia.Drawing2D.Graphics2D)">
            <summary>
            Performs custom 2D rendering.
            Be carefull: This method is called from the rendering thread!
            </summary>
            <param name="graphics">The graphics object used for drawing.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.DrawTextOptions">
            <summary>
            Represents enum from Direct2D.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.DrawTextOptions.None">
            <summary>
            Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.DrawTextOptions.NoSnap">
            <summary>
            Text is not vertically snapped to pixel boundaries. This setting is recommended
            for text that is being animated.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.DrawTextOptions.Clip">
            <summary>
            Text is clipped to the layout rectangle.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.MeasuringMode">
            <summary>
            Represents enum from Direct2D.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.MeasuringMode.Natural">
            <summary>
            Specifies that text is measured using glyph ideal metrics whose values are
            independent to the current display resolution.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.MeasuringMode.GdiClassic">
            <summary>
            Specifies that text is measured using glyph display-compatible metrics whose
            values tuned for the current display resolution.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.MeasuringMode.GdiNatural">
            <summary>
            Specifies that text is measured using the same glyph display metrics as
            text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.FontStyle">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.FontWeight">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.FontStretch">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.ParagraphAlignment">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.TextAlignment">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.WordWrapping">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.ReadingDirection">
            <summary>
            Represents enum from DirectWrite.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.AlphaMode">
            <summary>
            Represents enum from Direct2D.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.AlphaMode.Unknown">
            <summary>
            The alpha value might not be meaningful.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.AlphaMode.Premultiplied">
            <summary>
            The alpha value has been premultiplied. Each color is first scaled by the
            alpha value. The alpha value itself is the same in both straight and premultiplied
            alpha. Typically, no color channel value is greater than the alpha channel
            value. If a color channel value in a premultiplied format is greater than
            the alpha channel, the standard source-over blending math results in an additive
            blend.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.AlphaMode.Straight">
            <summary>
            The alpha value has not been premultiplied. The alpha channel indicates
            the transparency of the color.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.AlphaMode.Ignore">
            <summary>
            The alpha value is ignored.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.BitmapInterpolationMode">
            <summary>
            Represents enum from Direct2D.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.BitmapFormat">
            <summary>
            Some bitmap format for Direct2D rendering.
            Maps directly to a subset of DXGI formats.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.ExtendMode">
            <summary>
            Represents enum from Direct2D.
            Specifies how a brush paints areas outside of its normal content area.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.ExtendMode.Clamp">
            <summary>
            Repeat the edge pixels of the brush's content for all regions outside the normal
            content area.
            </summary>  
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.ExtendMode.Wrap">
            <summary>
            Repeat the brush's content.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.ExtendMode.Mirror">
            <summary>
            The same as ExtendMode.Wrap, except that alternate tiles of
            the brush's content are flipped. (The brush's normal content is drawn untransformed.)
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.Gamma">
            <summary>
            Represents enum from Direct2D.
            Specifies which gamma is used for interpolation.
            
            Interpolating in a linear gamma space (SharpDX.Direct2D1.Gamma.Linear) can avoid
            changes in perceived brightness caused by the effect of gamma correction in spaces
            where the gamma is not 1.0, such as the default sRGB color space, where the gamma
            is 2.2. For an example of the differences between these two blending modes, consider
            the following illustration, which shows two gradients, each of which blends from
            red to blue to green:The first gradient is interpolated linearly in the space
            of the render target (sRGB in this case), and one can see the dark bands between
            each color. The second gradient uses a gamma-correct linear interpolation, and
            thus does not exhibit the same variations in brightness.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.Gamma.StandardRgb">
            <summary>
            Interpolation is performed in the standard RGB (sRGB) gamma.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.Gamma.Linear">
            <summary>
            Interpolation is performed in the linear-gamma color space.
            </summary>  
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing2D.GradientStop">
            <summary>
            Represents enum from Direct2D.
            Contains the position and color of a gradient stop.
            
            Gradient stops can be specified in any order if they are at different positions.
            Two stops may share a position. In this case, the first stop specified is treated
            as the "low" stop (nearer 0.0f) and subsequent stops are treated as "higher"
            (nearer 1.0f). This behavior is useful if a caller wants an instant transition
            in the middle of a stop.Typically, there are at least two points in a collection,
            although creation with only one stop is permitted. For example, one point is
            at position 0.0f, another point is at position 1.0f, and additional points are
            distributed in the [0, 1] range. Where the gradient progression is beyond the
            range of [0, 1], the stops are stored, but may affect the gradient. When drawn,
            the [0, 1] range of positions is mapped to the brush, in a brush-dependent way.
            For details, see SharpDX.Direct2D1.LinearGradientBrush and SharpDX.Direct2D1.RadialGradientBrush.
            Gradient stops with a position outside the [0, 1] range cannot be seen explicitly,
            but they can still affect the colors produced in the [0, 1] range. For example,
            a two-stop gradient 0.0f, Black}, {2.0f, White is indistinguishable visually
            from 0.0f, Black}, {1.0f, Mid-level gray. Also, the colors are clamped before
            interpolation.
            </summary> 
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.GradientStop.Color">
            <summary>
            The color of the gradient stop.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing2D.GradientStop.Position">
            <summary>
            A value that indicates the relative position of the gradient stop in the brush.
            This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen
             explicitly.
            </summary> 
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmap.#ctor(SharpDX.WIC.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.WicBitmap"/> class.
            </summary>
            <param name="wicBitmap">The unmanaged bitmap data object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmap.FromResourceLinkAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Creates a WIC bitmap from the given source.
            </summary>
            <param name="resourceLink">The source of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmap.GetPixelsAsBgra">
            <summary>
            Gets an array containing all pixels of the underlying bitmap in Bgra format.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmap.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmapSource.#ctor(SeeingSharp.Multimedia.Core.WicBitmapSourceInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing2D.WicBitmapSource"/> class.
            </summary>
            <param name="bitmapSource">The bitmap source.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmapSource.FromResourceSourceAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Creates a WIC BitmapSource object from the given source.
            </summary>
            <param name="resourceLink">The source of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing2D.WicBitmapSource.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper"/> class.
            </summary>
            <param name="textureKey">The texture key.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.LoadResources(SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of this texture painter object.
            </summary>
            <param name="resources">The target resource dictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.UnloadResources">
            <summary>
            Unloads all resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.RenderPlain(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the texture without using any effect.
            </summary>
            <param name="renderState">The render state to be used.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.RenderInternal(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the texture finally.
            </summary>
            <param name="renderState">The current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.Scaling">
            <summary>
            Gets or sets the scaling.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.IsLoaded">
            <summary>
            Are resources loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TexturePainterHelper.AlphaBlendMode">
            <summary>
            Gets or sets the alpha blend mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.Camera3DBase"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.Camera3DBase"/> class.
            </summary>
            <param name="width">Width of the renderwindow.</param>
            <param name="height">Height of the renderwindow.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ApplyViewPoint(SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint)">
            <summary>
            Applies the data from the given ViewPoint object.
            </summary>
            <param name="camera3DViewPoint">The ViewPoint to be applied.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.GetViewPoint">
            <summary>
            Gets a ViewPoint out of this camera object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.UpdateCamera">
            <summary>
            Updates the camera.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.CalculateViewProjectionMatrices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Calculates the view and projection matrix for this camera.
            </summary>
            <param name="position">The position of the camera.</param>
            <param name="target">The target point of the camera.</param>
            <param name="upVector">The current up vector.</param>
            <param name="zNear">Distance to the nearest rendered pixel.</param>
            <param name="zFar">Distance to the farest rendered pixel.</param>
            <param name="screenWidth">The current width of the screen in pixel.</param>
            <param name="screenHeight">The current height of the screen in pixel.</param>
            <param name="viewMatrix">The calculated view matrix.</param>
            <param name="projMatrix">The calculated projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.SetScreenSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the screen.
            </summary>
            <param name="width">Width of the renderwindow.</param>
            <param name="height">Height of the renderwindow.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.GetScreenSize">
            <summary>
            Gets the current screen size.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Rotate(System.Single,System.Single)">
            <summary>
            Rotates the target around the position of the camera.
            </summary>
            <param name="hRot">horizontal rotation.</param>
            <param name="vRot">vertical rotation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Zoom(System.Single)">
            <summary>
            Zooms the camera into or out along the actual target-vector.
            </summary>
            <param name="dist">The Distance you want to zoom.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Move(System.Single,System.Single)">
            <summary>
            Moves the camera position.
            </summary>
            <param name="x">moving in x direction.</param>
            <param name="z">moving in z direction.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.UpDown(System.Single)">
            <summary>
            Moves the Camera up and down.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.UpDownWithoutMoving(System.Single)">
            <summary>
            Moves the camera up and down.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Strave(System.Single)">
            <summary>
            Straves the camera.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.StraveAtPlane(System.Single)">
            <summary>
            Streaves the camera.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.View">
            <summary>
            Retrieves the view-matrix.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ViewProjection">
            <summary>
            Gets the view-projection matrix.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Direction">
            <summary>
            Retrieves or sets the direction / target.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Right">
            <summary>
            Retrieves a vector, wich is targeting right.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Up">
            <summary>
            Retrieves a vector, wich is targiting upwards.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.UpVector">
            <summary>
            Gets or sets the vector that points up.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.TargetRotation">
            <summary>
            Retrieves or sets the rotation-angles of the target.
            The first element of the vector is hRot, the second is vRot.
            
            The angles are radian values!
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Target">
            <summary>
            Gets or sets the target position.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.RelativeTarget">
            <summary>
            Gets or sets the relative target position.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ZNear">
            <summary>
            Gets or sets the minimum distance of rendered pixels.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ZFar">
            <summary>
            Gets or sets the maximum distance of rendered pixels.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Position">
            <summary>
            Retrieves or sets the position of the camera.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.Projection">
            <summary>
            Retrieves projection-matrix.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ScreenWidth">
            <summary>
            Width of the screen.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.ScreenHeight">
            <summary>
            Height of the screen.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.StateChanged">
            <summary>
            Did the state of the camera change last time?
            Set this flag to false to reset the value.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.AnimationHandler">
            <summary>
            Gets the current AnimationHandler for this camera.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DBase.AssociatedRenderLoop">
            <summary>
            Gets the currently associated RenderLoop object.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint">
            <summary>
            This class represents a specific viewpoint within the 3D world.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.FromResourceLink(SeeingSharp.Util.ResourceLink)">
            <summary>
            Loads a Camera3DViewPoint from the given resource.
            </summary>
            <param name="resourceLink">The resource link.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.FromResourceLinkAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Loads a Camera3DViewPoint from the given resource.
            </summary>
            <param name="resourceLink">The resource link.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.ToResourceLink(SeeingSharp.Util.ResourceLink)">
            <summary>
            Writes this Camera3DViewPoint to the given resource link.
            </summary>
            <param name="resourceLink">The resource link.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.CameraTypeString">
            <summary>
            Gets or sets the CameraType in string form.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.Position">
            <summary>
            Gets or sets the position of the ViewPoint.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.Rotation">
            <summary>
            Gets or sets the rotation of the ViewPoint.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint.OrthographicZoomFactor">
            <summary>
            Gets or sets the zoom factor if we have a orthographic camera.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D"/> class.
            </summary>
            <param name="width">Width of the renderwindow.</param>
            <param name="height">Height of the renderwindow.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.ApplyViewPoint(SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint)">
            <summary>
            Applies the data from the given ViewPoint object.
            </summary>
            <param name="camera3DViewPoint">The ViewPoint to be applied.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.GetViewPoint">
            <summary>
            Gets a ViewPoint out of this camera object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.CalculateViewProjectionMatrices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Calculates the view and projection matrix for this camera.
            </summary>
            <param name="position">The position of the camera.</param>
            <param name="target">The target point of the camera.</param>
            <param name="upVector">The current up vector.</param>
            <param name="zNear">Distance to the nearest rendered pixel.</param>
            <param name="zFar">Distance to the farest rendered pixel.</param>
            <param name="screenWidth">The current width of the screen in pixel.</param>
            <param name="screenHeight">The current height of the screen in pixel.</param>
            <param name="viewMatrix">The calculated view matrix.</param>
            <param name="projMatrix">The calculated projection matrix.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.Zoom(System.Single)">
            <summary>
            Zooms the camera into or out along the actual target-vector.
            </summary>
            <param name="dist">The Distance you want to zoom.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.OrthographicCamera3D.ZoomFactor">
            <summary>
            Gets or sets the zoom factor.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D"/> class.
            </summary>
            <param name="width">Width of the renderwindow.</param>
            <param name="height">Height of the renderwindow.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D.CalculateViewProjectionMatrices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Numerics.Matrix4x4@,System.Numerics.Matrix4x4@)">
            <summary>
            Calculates the view and projection matrix for this camera.
            </summary>
            <param name="position">The position of the camera.</param>
            <param name="target">The target point of the camera.</param>
            <param name="upVector">The current up vector.</param>
            <param name="zNear">Distance to the nearest rendered pixel.</param>
            <param name="zFar">Distance to the farest rendered pixel.</param>
            <param name="screenWidth">The current width of the screen in pixel.</param>
            <param name="screenHeight">The current height of the screen in pixel.</param>
            <param name="viewMatrix">The calculated view matrix.</param>
            <param name="projMatrix">The calculated projection matrix.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D.FieldOfView">
            <summary>
            Gets or sets the field of view value.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.PerspectiveCamera3D.AspectRatio">
            <summary>
            Gets the current aspect ratio.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.CameraStraightMoveAnimation.#ctor(SeeingSharp.Multimedia.Drawing3D.Camera3DBase,SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.CameraStraightMoveAnimation"/> class.
            </summary>
            <param name="targetCamera">The camera to be animated.</param>
            <param name="targetViewPoint">The target view point.</param>
            <param name="animationTime">The animation time.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.CameraStraightMoveAnimation.OnCurrentTimeUpdated(SeeingSharp.Multimedia.Core.IAnimationUpdateState,SeeingSharp.Multimedia.Core.AnimationState)">
            <summary>
            Called each time the CurrentTime value gets updated.
            </summary>
            <param name="updateState">The current state of update processing.</param>
            <param name="animationState">The current state of the animation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.CameraStraightMoveAnimation.OnFixedTimeAnimationFinished">
            <summary>
            Called when the FixedTime animation has finished.
            (Sets final state to the target object and clears all runtime values).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.AnimatableObjectExtensions.CameraStraightMoveTo``1(SeeingSharp.Multimedia.Core.IAnimationSequenceBuilder{``0},SeeingSharp.Multimedia.Drawing3D.Camera3DViewPoint,System.TimeSpan)">
            <summary>
            Moves the given Camera to the given ViewPoint.
            </summary>
            <param name="sequenceBuilder">AnimationSequenceBuilder building the animation.</param>
            <param name="targetViewPoint">The target ViewPoint object.</param>
            <param name="animationTime">Total time for the animation.</param>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode.Color">
            <summary>
            Do create the color buffer.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode.Depth">
            <summary>
            Do create the depth buffer.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode.ObjectID">
            <summary>
            Do create the object-id buffer.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode.NormalDepth">
            <summary>
            Do create the normal-depth buffer.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode.All">
            <summary>
            Create all textures.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.Camera3DType">
            <summary>
            Describes the type of a 3D camera.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.TexturePainterAlphaBlendMode">
            <summary>
            Describes the alpha blending mode of the texture painter.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.TexturePainterAlphaBlendMode.AlphaBlend">
            <summary>
            Use alpha blending (draw pixels transparent).
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.TexturePainterAlphaBlendMode.NoAlphaBlend">
            <summary>
            Ignore the alpha value.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.PushRenderTargetMode">
            <summary>
            Describes the mode how a RenderTargetTexture pushes itself on the rendering stack.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.PushRenderTargetMode.Default_OwnAll">
            <summary>
            Use all buffers from this RenderTargetTexture.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.PushRenderTargetMode.UseOwnColorBuffer">
            <summary>
            Use the color buffer defined by this render-target texture.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.MarkForUnloading">
            <summary>
            Triggers unloading of this resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.UpdateValues(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Drawing3D.CBPerObject)">
            <summary>
            Updates all parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
            <param name="cbPerObject">Constant buffer data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies all parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards all parameters.
            </summary>
            <param name="renderState">The render state on which to discard.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.NeedsRefresh">
            <summary>
            Does this object needs refreshing?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ObjectRenderParameters.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.UpdateValues(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Drawing3D.CBPerFrame)">
            <summary>
            Updates all parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
            <param name="cbPerFrame">Per frame data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies all parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards all parameters.
            </summary>
            <param name="renderState">The render state on which to discard.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SceneRenderParameters.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.GetPostprocessEffect(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Gets the postrocess effect with the given key.
            </summary>
            <param name="namedOrGenericKey">The key of the effect.</param>
            <param name="resourceDictionary">The resource dictionary where to load the effect.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.UpdateValues(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Drawing3D.CBPerView)">
            <summary>
            Updates all parameters.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.Apply(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies all parameters.
            </summary>
            <param name="renderState">The render state on which to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards all parameters.
            </summary>
            <param name="renderState">The render state on which to discard.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.PostprocessEffectKey">
            <summary>
            Gets or sets the key of the postprocess effect.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ViewRenderParameters.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DefaultResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.DefaultResources" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DefaultResources.GetSamplerState(SeeingSharp.Multimedia.Core.TextureSamplerQualityLevel)">
            <summary>
            Gets the sampler state with the given requested quality level.
            </summary>
            <param name="qualityLevel">The quality level to get the sampler state for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DefaultResources.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DefaultResources.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.DefaultResources.ResourcesLoaded">
            <summary>
            Are resources loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.#ctor(SeeingSharp.Multimedia.Objects.ObjectType)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.GeometryResource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.GeometryResource"/> class.
            </summary>
            <param name="vertexStructures">The vertex structures.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.Intersects(SeeingSharp.Ray,SeeingSharp.Multimedia.Core.PickingOptions,System.Single@)">
            <summary>
            Performs an intersection test using given picking ray and picking options.
            </summary>
            <param name="pickingRay">The given picking ray.</param>
            <param name="pickingOptions">The picking options.</param>
            <param name="distance">The distance from origin to the picking point.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.Redefine(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.ObjectType)">
            <summary>
            Redefines the content of this geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.Redefine(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Redefines the content of this geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.Pick(SeeingSharp.Multimedia.Core.PickingInformation,SeeingSharp.Ray)">
            <summary>
            Performs a simple picking-test.
            </summary>
            <param name="pickInformation">The that gathers picking information.</param>
            <param name="pickingRay">The picking ray.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders this GeometryResource.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.GeometryResource.BuildBuffers(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Objects.VertexStructure[],SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Builds vertex and index buffers.
            </summary>
            <param name="device">The device on which to build all buffers.</param>
            <param name="structures">All structure to be loaded.</param>
            <param name="resources">The current resource dictionary</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.GeometryResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.GeometryResource.ObjectType">
            <summary>
            Gets the source of geometry data.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.GeometryResource.BoundingBox">
            <summary>
            Gets the bounding box sourounding this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.LineRenderResources" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.RenderLines(SeeingSharp.Multimedia.Core.RenderState,System.Numerics.Matrix4x4,SeeingSharp.Color4,SharpDX.Direct3D11.Buffer,System.Int32)">
            <summary>
            Renders all given lines with the given parameters.
            </summary>
            <param name="renderState">The render state to be used.</param>
            <param name="worldViewProj">Current world-view-project transformation.</param>
            <param name="lineColor">The color for the line.</param>
            <param name="lineVertexBuffer">The vertex buffer containing all line vertices.</param>
            <param name="vertexCount">Total count of vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.IsLoaded">
            <summary>
            Is the resource loaded correctly?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.VertexShader">
            <summary>
            Gets the vertex shader resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.PixelShader">
            <summary>
            Gets the pixel shader resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.ConstantBuffer">
            <summary>
            Gets the constant buffer resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.LineRenderResources.InputLayout">
            <summary>
            Gets the input layout for the vertex shader.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.MaterialResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.MaterialResource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.MaterialResource.Apply(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode,SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Applies the material to the given render state.
            </summary>
            <param name="renderState">Current render state</param>
            <param name="instancingMode">The instancing mode for which to apply the material.</param>
            <param name="previousMaterial">The previously applied material.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.MaterialResource.Discard(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Discards the material in current render state.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.MaterialResource.GenerateInputLayout(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.InputElement[],SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode)">
            <summary>
            Generates the requested input layout.
            </summary>
            <param name="device">The device on which to create the input layout.</param>
            <param name="inputElements">An array of InputElements describing vertex input structure.</param>
            <param name="instancingMode">Instancing mode for which to generate the input layout for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.ApplySpriteRendering(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Applies alpha based sprite rendering.
            </summary>
            <param name="deviceContext">The target device context.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.DiscardSpriteRendering(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Discards alpha based sprite rendering.
            </summary>
            <param name="deviceContext">The target device context.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.ApplyAlphaBasedSpriteRendering(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Applies alpha based sprite rendering.
            </summary>
            <param name="deviceContext">The target device context.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.DiscardAlphaBasedSpriteRendering(SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Discards alpha based sprite rendering.
            </summary>
            <param name="deviceContext">The target device context.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderEffectResourceBase.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TextureResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.TextureResource"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.CreateConstantBuffer(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Creates the constant buffer object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.IsLoaded">
            <summary>
            Is the buffer loaded correctly?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.ConstantBuffer">
            <summary>
            Gets the buffer object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ConstantBufferResource.BufferSize">
            <summary>
            Gets the total size of the constant buffer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1.SetData(SharpDX.Direct3D11.DeviceContext,`0)">
            <summary>
            Sets given content to the constant buffer.
            </summary>
            <param name="deviceContext">The context used for updating the constant buffer.</param>
            <param name="dataToSet">The data to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TypeSafeConstantBufferResource`1.CreateConstantBuffer(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Creates the constant buffer object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddTexture(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Util.ResourceLink)">
            <summary>
            Adds a new texture resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="textureSource">The source of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddTexture(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Util.ResourceLink,SeeingSharp.Util.ResourceLink)">
            <summary>
            Adds a new texture resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="textureSourceHighQuality">The source of the texture in high quality.</param>
            <param name="textureSourceLowQuality">The texture in low quality.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddSimpleColoredMaterial(SeeingSharp.Multimedia.Core.SceneManipulator)">
            <summary>
            Adds a new simple colored material resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddSimpleColoredMaterial(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Util.NamedOrGenericKey,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Adds a new simple colored material resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="textureKey">The resource key of the texture to be used.</param>
            <param name="clipFactor">Pixel are clipped up to an alpha value defined by this Clipfactor within the pixel shader.</param>
            <param name="maxClipDistance">The maximum distance on which to apply pixel clipping (defined by ClipFactor property).</param>
            <param name="adjustTextureCoordinates">Interpolate texture coordinate based on xy-scaling.</param>
            <param name="addToAlpha">Needed for video rendering (Frames from the MF SourceReader have alpha always to zero).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddSimpleColoredMaterial(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Util.ResourceLink)">
            <summary>
            Adds a new simple colored material resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="textureSource">The source of the texture which should be loaded.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddSimpleColoredMaterial(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Util.ResourceLink,SeeingSharp.Util.ResourceLink)">
            <summary>
            Adds a new simple colored material resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="textureSourceHighQuality">The source of the texture which should be loaded.</param>
            <param name="textureSourceLowQuality">The source of the texture with low quality.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddGeometry(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Adds a new geometry resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="vertexStructures">The structures which define the geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SceneManipulatorExtensions.AddGeometry(SeeingSharp.Multimedia.Core.SceneManipulator,SeeingSharp.Multimedia.Objects.ObjectType)">
            <summary>
            Adds a new geometry resource to the scene.
            </summary>
            <param name="sceneManipulator">The manipulator of the scene.</param>
            <param name="objectType">The geometry to be loaded.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource"/> class.
            </summary>
            <param name="textureKey">The name of the texture to be rendered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.GenerateInputLayout(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.InputElement[],SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode)">
            <summary>
            Generates the requested input layout.
            </summary>
            <param name="device">The device on which to create the input layout.</param>
            <param name="inputElements">An array of InputElements describing vertex input structure.</param>
            <param name="instancingMode">Instancing mode for which to generate the input layout for.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.Apply(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode,SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Applies the material to the given render state.
            </summary>
            <param name="renderState">Current render state</param>
            <param name="instancingMode">The instancing mode for which to apply the material.</param>
            <param name="previousMaterial">The previously applied material.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.TextureKey">
            <summary>
            Gets the key of the texture resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.ClipFactor">
            <summary>
            Gets or sets the ClipFactor.
            Pixel are clipped up to an alpha value defined by this Clipfactor within the pixel shader.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.MaxClipDistance">
            <summary>
            Gets or sets the maximum distance on which to apply pixel clipping (defined by ClipFactor property).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.AdjustTextureCoordinates">
            <summary>
            Interpolate texture coordinate based on xy-scaling.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SimpleColoredMaterialResource.AddToAlpha">
            <summary>
            Needed for video rendering (Frames from the MF SourceReader have alpha always to zero).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource.GenerateInputLayout(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.InputElement[],SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode)">
            <summary>
            Generates the requested input layout.
            </summary>
            <param name="device">The device on which to create the input layout.</param>
            <param name="inputElements">An array of InputElements describing vertex input structure.</param>
            <param name="instancingMode">Instancing mode for which to generate the input layout for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource.Apply(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode,SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Applies the material to the given render state.
            </summary>
            <param name="renderState">Current render state</param>
            <param name="instancingMode">The instancing mode for which to apply the material.</param>
            <param name="previousMaterial">The previously applied material.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SingleForcedColorMaterialResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource"/> class.
            </summary>
            <param name="textureKey">The name of the texture to be rendered.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.GenerateInputLayout(SeeingSharp.Multimedia.Core.EngineDevice,SharpDX.Direct3D11.InputElement[],SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode)">
            <summary>
            Generates the requested input layout.
            </summary>
            <param name="device">The device on which to create the input layout.</param>
            <param name="inputElements">An array of InputElements describing vertex input structure.</param>
            <param name="instancingMode">Instancing mode for which to generate the input layout for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.Apply(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Core.MaterialApplyInstancingMode,SeeingSharp.Multimedia.Drawing3D.MaterialResource)">
            <summary>
            Applies the material to the given render state.
            </summary>
            <param name="renderState">Current render state</param>
            <param name="instancingMode">The instancing mode for which to apply the material.</param>
            <param name="previousMaterial">The previously applied material.</param>
            <exception cref="T:SeeingSharp.Multimedia.SeeingSharpGraphicsException">Effect  + this.Effect +  not supported!</exception>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.TextureKey">
            <summary>
            Gets the key of the texture resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.SpriteMaterialResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.TextureChangedEventArgs">
            <summary>
            EventArgs class for TextureChangedHandler delegate
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.TextureChangedEventArgs.#ctor(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.TextureChangedEventArgs"/> class.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.TextureChangedEventArgs.RenderState">
            <summary>
            Gets current renderstate object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.NotifyBeforeRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering begins.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.NotifyAfterRenderPlain(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering of the plain part has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.NotifyAfterRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
            <returns>
            True, if rendering should continue with next pass. False if postprocess effect is finished.
            </returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.EdgeDetectPostprocessEffectResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource"/> class.
            </summary>
            <param name="forceSimpleMethod">Force simple mode. Default to false.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.NotifyBeforeRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering begins.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.NotifyAfterRenderPlain(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering of the plain part has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.NotifyAfterRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
            <returns>
            True, if rendering should continue with next pass. False if postprocess effect is finished.
            </returns>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.FocusPostprocessEffectResource.CBPerObject.Dummy">
            <summary>
            A dummy field to ensure a 4-based size of this structure.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PostprocessEffectResource.NotifyBeforeRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering begins.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PostprocessEffectResource.NotifyAfterRenderPlain(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering of the plain part has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
            <returns>True, if rendering should continue with next pass. False if postprocess effect is finished.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PostprocessEffectResource.NotifyAfterRender(SeeingSharp.Multimedia.Core.RenderState,System.Int32)">
            <summary>
            Notifies that rendering has finished.
            </summary>
            <param name="renderState">The current render state.</param>
            <param name="passID">The ID of the current pass (starting with 0)</param>
            <returns>True, if rendering should continue with next pass. False if postprocess effect is finished.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.GetOrCreateMaterialResourceAndEnsureLoaded(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Gets or creates the material resource for the given VertexStructure object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.GetOrCreateMaterialResource(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Gets or creates the material resource for the given VertexStructure object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Adds a new geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Adds a new geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Multimedia.Objects.ObjectType)">
            <summary>
            Adds a new geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Multimedia.Objects.ObjectType)">
            <summary>
            Adds a new geometry resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTextGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,System.String)">
            <summary>
            Adds a new text geometry with the given text.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTextGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,System.String)">
            <summary>
            Adds a new text geometry with the given text.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTextGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,System.String,SeeingSharp.Multimedia.Objects.TextGeometryOptions)">
            <summary>
            Adds a new text geometry with the given text.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTextGeometry(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,System.String,SeeingSharp.Multimedia.Objects.TextGeometryOptions)">
            <summary>
            Adds a new text geometry with the given text.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTexture(SeeingSharp.Multimedia.Core.ResourceDictionary,System.String)">
            <summary>
            Adds a new texture resource pointing to the given texture file name.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTexture(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,System.String)">
            <summary>
            Adds a new texture resource pointing to the given texture file name.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTexture(SeeingSharp.Multimedia.Core.ResourceDictionary,System.Uri)">
            <summary>
            Adds a new texture resource pointing to the given texture file name.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ResourceDictionaryExtensions.AddTexture(SeeingSharp.Multimedia.Core.ResourceDictionary,SeeingSharp.Util.NamedOrGenericKey,System.Uri)">
            <summary>
            Adds a new texture resource pointing to the given texture file name.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PixelShaderResource.#ctor(System.String,SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource" /> class.
            </summary>
            <param name="shaderProfile">Shader profile used for compiling.</param>
            <param name="resourceLink">The resourceLink.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PixelShaderResource.LoadShader(SeeingSharp.Multimedia.Core.EngineDevice,System.Byte[])">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.PixelShaderResource.UnloadShader">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.PixelShaderResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.PixelShaderResource.PixelShader">
            <summary>
            Gets the loaded VertexShader object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderResource.#ctor(System.String,SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.ShaderResource"/> class.
            </summary>
            <param name="shaderProfile">Shader profile used for compilation.</param>
            <param name="resourceLink">The source of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderResource.LoadShader(SeeingSharp.Multimedia.Core.EngineDevice,System.Byte[])">
            <summary>
            Loads a shader using the given bytecode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ShaderResource.UnloadShader">
            <summary>
            Unloads the shader.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ShaderResource.ShaderBytecode">
            <summary>
            Gets the shader's raw bytecode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource.#ctor(System.String,SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource" /> class.
            </summary>
            <param name="shaderProfile">Shader profile used for compiling.</param>
            <param name="resourceLink">The resourceLink.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource.LoadShader(SeeingSharp.Multimedia.Core.EngineDevice,System.Byte[])">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource.UnloadShader">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VertexShaderResource.VertexShader">
            <summary>
            Gets the loaded VertexShader object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource"/> class.
            </summary>
            <param name="bitmap">The bitmap source object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.#ctor(SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource"/> class.
            </summary>
            <param name="mappedTexture">The mapped texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap to be displayed.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.Texture">
            <summary>
            Gets the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.BitmapTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.IsLoaded">
            <summary>
            Is the object loaded correctly?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.ChangeableTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.#ctor(SeeingSharp.Multimedia.Drawing2D.Custom2DDrawingLayer,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource"/> class.
            </summary>
            <param name="drawingLayer">The drawing layer.</param>
            <param name="height">The width of the generated texture.</param>
            <param name="width">The height of the generated texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Triggers internal update within the resource (e. g. Render to Texture).
            </summary>
            <param name="updateState">Current state of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Triggers internal rendering within the resource (e. g. Render to Texture).
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resource.
            </summary>
            <param name="device">The device on which to load all resources.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads all resources.
            </summary>
            <param name="device">The device on which the resources where loaded.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.Direct2DTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.#ctor(System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource"/> class.
            </summary>
            <param name="drawingBrush">The drawing brush.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.#ctor(System.Drawing.Brush,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource"/> class.
            </summary>
            <param name="drawingBrush">The drawing brush.</param>
            <param name="height">Width of the texture.</param>
            <param name="width">Height of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
            <value></value>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.DrawingBrushTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LinearGradientTextureResource.#ctor(SeeingSharp.Color4,SeeingSharp.Color4,SeeingSharp.Multimedia.Drawing3D.GradientDirection,System.Int32,System.Int32)">
            <summary>
            Creates a linear gradient texture.
            </summary>
            <param name="start">Starting color.</param>
            <param name="destination">Destination color.</param>
            <param name="gradientDirection">Direction of the gradient.</param>
            <param name="height">Height of the texture in pixels.</param>
            <param name="widht">Width of the texture in pixels.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LinearGradientTextureResource.#ctor(SeeingSharp.Color4,SeeingSharp.Color4,SeeingSharp.Multimedia.Drawing3D.GradientDirection)">
            <summary>
            Creates a linear gradient texture.
            </summary>
            <param name="start">Starting color.</param>
            <param name="destination">Destination color.</param>
            <param name="gradientDirection">Direction of the gradient.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LinearGradientTextureResource.GetStartPoint(SeeingSharp.Multimedia.Drawing3D.GradientDirection,System.Int32,System.Int32)">
            <summary>
            Gets the start-point of the gradient.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LinearGradientTextureResource.GetTargetPoint(SeeingSharp.Multimedia.Drawing3D.GradientDirection,System.Int32,System.Int32)">
            <summary>
            Gets the target-point of the gradient.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.#ctor(SeeingSharp.Multimedia.Drawing3D.RenderTargetCreationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource" /> class.
            </summary>
            <param name="creationMode">Tells this object which texture to create.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.ApplySize(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Applies the given size.
            </summary>
            <param name="renderState">The render state used for creating all resources.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.PushOnRenderState(SeeingSharp.Multimedia.Core.RenderState,SeeingSharp.Multimedia.Drawing3D.PushRenderTargetMode)">
            <summary>
            Pushes this render target on the given render state.
            </summary>
            <param name="renderState">The render state to push to.</param>
            <param name="mode"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.PopFromRenderState(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Pops the render target from the given render state.
            </summary>
            <param name="renderState">The render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
            <param name="device">The device.</param>
            <param name="resources">Parent ResourceDictionary.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.Texture">
            <summary>
            Gets the texture itself.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.TextureView">
            <summary>
            Gets the shader resource view to the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.RenderTargetTextureResource.TextureViewNormalDepth">
            <summary>
            Gets the shader resource view to the normal-depth texture.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.#ctor(SeeingSharp.Util.ResourceLink,SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource" /> class.
            </summary>
            <param name="highQualityTextureSource">High quality version of the texture.</param>
            <param name="lowQualityTextureSource">Low quality version of the texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads the resource.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads the resource.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.IsLoaded">
            <summary>
            Is the object loaded correctly?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.IsCubeTexture">
            <summary>
            Is this texture a cube texture?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.IsRenderTargetTexture">
            <summary>
            Is this texture a render target texture?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.StandardTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource">
            <summary>
            A texture which displays a thumbnail of a video.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.#ctor(SeeingSharp.Util.ResourceLink,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource"/> class.
            </summary>
            <param name="videoSource">The video source.</param>
            <param name="timestamp">The Timestamp from which to create the timestamp.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources.
            </summary>
            <param name="device">The device on which to load all resources.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads all resources.
            </summary>
            <param name="device">The device on which the resources where loaded.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Triggers internal update within the resource (e. g. Render to Texture).
            </summary>
            <param name="updateState">Current state of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Triggers internal rendering within the resource (e. g. Render to Texture).
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoThumbnailTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource">
            <summary>
            A texture which displays a video on it using Media Foundation.
            See https://msdn.microsoft.com/de-de/library/windows/desktop/dd389281(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource"/> class.
            </summary>
            <param name="videoSource">The video source.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.#ctor(SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource"/> class.
            </summary>
            <param name="videoReader">The video reader.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.LoadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resource.
            </summary>
            <param name="device">The device on which to load all resources.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.UnloadResourceInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Unloads all resources.
            </summary>
            <param name="device">The device on which the resources where loaded.</param>
            <param name="resources">The current ResourceDictionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.Update(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Triggers internal update within the resource (e. g. Render to Texture).
            </summary>
            <param name="updateState">Current state of update process.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Triggers internal rendering within the resource (e. g. Render to Texture).
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.IsLoaded">
            <summary>
            Is the resource loaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.Texture">
            <summary>
            Gets the texture object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.TextureView">
            <summary>
            Gets a ShaderResourceView targeting the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Drawing3D.VideoTextureResource.ArraySize">
            <summary>
            Gets the size of the texture array.
            1 for normal textures.
            6 for cubemap textures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.LineVertex.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.LineVertex" /> struct.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.#ctor(System.Numerics.Vector3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The texture coordinate.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The texture coordinate.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.#ctor(SeeingSharp.Multimedia.Objects.Vertex)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Drawing3D.StandardVertex"/> struct.
            </summary>
            <param name="vertex">Source vertex data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.FromVertexStructure(SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Gets an array of StandardVertices from the given VertexStructure object.
            </summary>
            <param name="source">The VertexStructure object.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.FromVertexStructure(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Gets an array of StandardVertices from the given VertexStructure objects.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.FromLineList(SeeingSharp.Color4,System.Func{System.Collections.Generic.List{System.Numerics.Vector3}})">
            <summary>
            Creates an array containing all vertices needed to display a list generated by given function.
            </summary>
            <param name="lineColor">Color of the line.</param>
            <param name="lineListCreator">Function that creates each line.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.FromLineList(SeeingSharp.Color4,System.Collections.Generic.List{System.Numerics.Vector3})">
            <summary>
            Creates an array containing all vertices needed to display the given list of lines.
            </summary>
            <param name="lineColor">Color of the line.</param>
            <param name="lineList">List containing the lines.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Drawing3D.StandardVertex.FromLineList(SeeingSharp.Color4,System.Numerics.Vector3[])">
            <summary>
            Creates an array containing all vertices needed to display the given list of lines.
            </summary>
            <param name="lineColor">Color of the line.</param>
            <param name="lineList">List containing the lines.</param>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerObject.ObjectScaling">
            <summary>
            Needed to rescale texture coordinate depending on the object's scaling factors.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerObject.SpriteScaling">
            <summary>
            Only relevant for sprite rendering. Scales coordinates in VertexShader by
            this factor.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.MaterialColor">
            <summary>
            A material color that can be processed by the shader.
            (e. g. ForcedColor shader)
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.TextureReciprocal">
            <summary>
            The reciprocal as described in FXAA Whitepaper (see NVidia SDK 11, FXAA sample).
            Defined by { 1.0f/inputTextureWidth, 1.0f/inputTextureHeight, 0.0f, 0.0f }
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.Texture0Factor">
            <summary>
            This flag is needed to tell the shader whether a texture has been set or not.
             see http://stackoverflow.com/questions/11297123/how-can-i-check-existence-of-texture-in-shader-programming
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.MaxClipDistance">
            <summary>
            Max distance form pixel to camera on which to apply the ClipFactor property.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.ClipFactor">
            <summary>
            Up to an alpha value defined by this Clipfactor pixels are clipped within the pixel shader.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Drawing3D.CBPerMaterial.AddToAlpha">
            <summary>
            Needed for video rendering (Frames from the MF SourceReader have alpha always to zero)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceChooser"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceInfo.CreateMediaSource">
            <summary>
            Creates a media source pointing to this CaptureDevice.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpMediaBuffer.CopyPointer">
            <summary>
            Creates a new object targeting the the same underlying COM object.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter">
            <summary>
            A common base class for all video writers provided by the graphics engine.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.RecordingFinished">
            <summary>
            Occurs when recording was finished (by success or failure).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter"/> class.
            </summary>
            <param name="targetFile">The target file to write to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.StartRendering(SeeingSharp.Size2)">
            <summary>
            Starts to render the video.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.DrawFrame(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Draws the given frame to the video.
            </summary>
            <param name="device">The device on which the given framebuffer is created.</param>
            <param name="uploadedTexture">The texture which should be added to the video.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.FinishRendering">
            <summary>
            Finished the rendered video.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.CheckWhetherChangesAreValid">
            <summary>
            Checks whether changes on the configuration of this object are valid currently.
            The method throws an exception, if not.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.StartRenderingInternal(SeeingSharp.Size2)">
            <summary>
            Starts rendering to the target.
            </summary>
            <param name="videoPixelSize">The pixel size of the video.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.DrawFrameInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Draws the given frame to the video.
            </summary>
            <param name="device">The device on which the given framebuffer is created.</param>
            <param name="uploadedTexture">The texture which should be added to the video.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.FinishRenderingInternal">
            <summary>
            Finishes rendering to the target (closes the video file).
            Video rendering can not be started again from this point on.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.TargetFile">
            <summary>
            Gets the target file this VideoWriter is writing to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.HasStarted">
            <summary>
            Has rendering started?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.HasFinished">
            <summary>
            Has rendering finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.AssociatedRenderLoop">
            <summary>
            The RenderLoop this VideoWriter is currently associated to.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.SeeingSharpVideoWriter.VideoSize">
            <summary>
            Gets the current video size.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.DrawingVideo.MediaSourceCharacteristics_Internal">
            <summary>
            Copy of the enum from SharpDX.MediaFoundation.
            Needed because the implementation of SharpDX didn't have the Flags attribute set (Version 2.6.3).
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.VideoReachedEnd">
            <summary>
            Occurs when the end of the video is reached.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.#ctor(SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader"/> class.
            </summary>
            <param name="captureDevice">The capture device.</param>
            <param name="immediateStart">True to start video reading immediately.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.#ctor(SeeingSharp.Util.ResourceLink,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader"/> class.
            </summary>
            <param name="videoSource">The source of the video file.</param>
            <param name="immediateStart">True to start video reading immediately.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.Start">
            <summary>
            Start video reading.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.GetCurrentFrame">
            <summary>
            Gets the current video frame.
            Null is returned if there is still no frame available.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.PerformVideoReadingAsync(System.Threading.CancellationToken)">
            <summary>
            Performs asynchronous video reading.
            </summary>
            <param name="cancelToken">The cancel token.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.Dispose">
            <summary>
            Disposes all native resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.AsyncRealtimeVideoReader.IsStarted">
            <summary>
            Did we start this reader previously?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader.#ctor(SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader"/> class.
            </summary>
            <param name="videoSource">The source video file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader.ReadFrame">
            <summary>
            Reads the next frame and puts it into a newly generated buffer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.FrameByFrameVideoReader.ReadFrame(SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Reads the next frame and puts it into the provided buffer.
            </summary>
            <param name="targetBuffer">The target buffer to write to.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader">
            <summary>
            This object reads video streams from a file source using the MediaFoundation.
            See https://msdn.microsoft.com/de-de/library/windows/desktop/dd389281(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.#ctor(SeeingSharp.Multimedia.DrawingVideo.CaptureDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader"/> class.
            </summary>
            <param name="captureDevice">The capture device.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader"/> class.
            </summary>
            <param name="videoSource">The source video file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.ReadFrameInternal">
            <summary>
            Reads the next frame and returns the corresponding buffer.
            Null is returned if there was nothing to read.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.SetCurrentPosition(System.TimeSpan,System.Boolean)">
            <summary>
            Sets the current position of this video reader.
            </summary>
            <param name="position">The position to be set.</param>
            <param name="updateEndReached">Do update the EndReached flag?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.Dispose">
            <summary>
            Disposes all native resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.EndReached">
            <summary>
            Did we reach the end of the video stream?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.FrameSize">
            <summary>
            Gets the pixel size per frame.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.Duration">
            <summary>
            Gets the total duration of the video.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoReader.CurrentPosition">
            <summary>
            Gets the current time position within the video.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.EndOfPresentation">
            <summary>
            Raises when the end of a video is reached.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.#ctor(SharpDX.MediaFoundation.MediaSession)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener"/> class.
            </summary>
            <param name="session">The session to listen to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.AttachTo(SharpDX.MediaFoundation.MediaSession)">
            <summary>
            Attaches this listener on the given session.
            </summary>
            <param name="session">The session object to attach to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.WaitForEventAsync(SharpDX.MediaFoundation.MediaEventTypes,System.Threading.CancellationToken)">
            <summary>
            This method waits for an asynchronous event message from the MF framework.
            </summary>
            <param name="eventType">The type of the event to wait for.</param>
            <param name="cancelToken">The cancellation token.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.WaitForEventAsync(SharpDX.MediaFoundation.MediaEventTypes,System.Func{SharpDX.MediaFoundation.MediaEvent,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            This method waits for an asynchronous event message from the MF framework.
            </summary>
            <param name="eventType">The type of the event to wait for.</param>
            <param name="specificEventCheckingFunc">A specific event checking func implemented by the caller. Returns false if the event is not handled.</param>
            <param name="cancelToken">The cancellation token.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.WorkQueueId">
            <summary>
            Gets the identifier of the work queue on which the callback is dispatched. See remarks.
            </summary>
            <value>
            The work queue identifier.
            </value>
            <msdn-id>bb970381</msdn-id>
              <unmanaged>HRESULT IMFAsyncCallback::GetParameters([Out] MFASYNC_CALLBACK_FLAGS* pdwFlags,[Out] unsigned int* pdwQueue)</unmanaged>
              <unmanaged-short>IMFAsyncCallback::GetParameters</unmanaged-short>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
              <p>This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <strong>Work Queue Identifiers</strong>. To create a new work queue, call <strong><see cref="M:SharpDX.MediaFoundation.MediaFactory.AllocateWorkQueue(System.Int32@)" /></strong>. The default value is <strong><see cref="F:SharpDX.MediaFoundation.WorkQueueType.Standard" /></strong>.</p> <p>If the work queue is not compatible with the value returned in <em>pdwFlags</em>, the Media Foundation platform returns <strong><see cref="F:SharpDX.MediaFoundation.ResultCode.InvalidWorkqueue" /></strong> when it tries to dispatch the callback. (See <strong><see cref="M:SharpDX.MediaFoundation.MediaFactory.PutWorkItem(System.Int32,System.IntPtr,SharpDX.ComObject)" /></strong>.)</p>
            </remarks>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.Shadow">
            <summary>
            Gets or sets the unmanaged shadow callback.
            </summary>
            <value>
            The unmanaged shadow callback.
            </value>
            <remarks>
            This property is set whenever this instance has an unmanaged shadow callback
            registered. This callback must be disposed when disposing this instance.
            </remarks>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MFSessionEventListener.Flags">
            <summary>
            Gets a flag indicating the behavior of the callback object's <strong><see cref="M:SharpDX.MediaFoundation.IAsyncCallback.Invoke(SharpDX.MediaFoundation.AsyncResult)" /></strong> method. Default behavior should be <see cref="F:SharpDX.MediaFoundation.AsyncCallbackFlags.None" />.
            </summary>
            <value>
            The a flag indicating the behavior of the callback object's <strong><see cref="M:SharpDX.MediaFoundation.IAsyncCallback.Invoke(SharpDX.MediaFoundation.AsyncResult)" /></strong> method.
            </value>
            <msdn-id>bb970381</msdn-id>
              <unmanaged>HRESULT IMFAsyncCallback::GetParameters([Out] MFASYNC_CALLBACK_FLAGS* pdwFlags,[Out] unsigned int* pdwQueue)</unmanaged>
              <unmanaged-short>IMFAsyncCallback::GetParameters</unmanaged-short>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter">
            <summary>
            Base class for interacting with WindowsMediaFoundation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter" /> class.
            </summary>
            <param name="targetFile">The target file to write to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.StartRenderingInternal(SeeingSharp.Size2)">
            <summary>
            Starts rendering to the target.
            </summary>
            <param name="videoPixelSize">The pixel size of the video.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.DrawFrameInternal(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.MemoryMappedTexture32bpp)">
            <summary>
            Draws the given frame to the video.
            </summary>
            <param name="device">The device on which the given framebuffer is created.</param>
            <param name="uploadedTexture">The texture which should be added to the video.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.FinishRenderingInternal">
            <summary>
            Finishes rendering to the target (closes the video file).
            Video rendering can not be started again from this point on.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.CreateMediaTarget(SharpDX.MediaFoundation.SinkWriter,SeeingSharp.Size2,System.Int32@)">
            <summary>
            Creates a media target.
            </summary>
            <param name="sinkWriter">The previously created SinkWriter.</param>
            <param name="videoPixelSize">The pixel size of the video.</param>
            <param name="streamIndex">The stream index for the new target.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.DummyFileName">
            <summary>
            Gets a dummy video file name, for example Dummy.mp4.
            This is needed to pass a dummy name to MediaFoundation.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.CountRenderedFrames">
            <summary>
            Gets the total count of frames rendered.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.MediaFoundationVideoWriter.FlipY">
            <summary>
            Internal use: FlipY during rendering?
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter">
            <summary>
            This VideoWriter is responsible for writing mp4 files to hard disc.
            For details see tutorial at: https://msdn.microsoft.com/en-us/library/windows/desktop/ff819477(v=vs.85).aspx
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter.#ctor(SeeingSharp.Util.ResourceLink)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter"/> class.
            </summary>
            <param name="targetFile">The target file to write to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter.CreateMediaTarget(SharpDX.MediaFoundation.SinkWriter,SeeingSharp.Size2,System.Int32@)">
            <summary>
            Creates a media target.
            </summary>
            <param name="sinkWriter">The previously created SinkWriter.</param>
            <param name="videoPixelSize">The pixel size of the video.</param>
            <param name="streamIndex">The stream index for the new target.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter.FlipY">
            <summary>
            Internal use: FlipY during rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.DrawingVideo.Mp4VideoWriter.DummyFileName">
            <summary>
            Gets a dummy video file name, for example Dummy.mp4.
            This is needed to pass a dummy name to MediaFoundation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.GetSupportedViewTypes">
            <summary>
            Gets a list containing all supported view types.
            Null means that this handler is not bound to a view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.GetSupportedCameraTypes">
            <summary>
            Gets a list containing all supported camera types.
            Null means that this handler is not bound to a view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.GetSupportedInputModes">
            <summary>
            Gets an array containing all supported input modes.
            Null means that all modes are supported.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.Start(System.Object,System.Object)">
            <summary>
            Starts input handling.
            </summary>
            <param name="cameraObject">The camera object (e. g. PerspectiveCamera3D).</param>
            <param name="viewObject">The view object (e. g. Direct3D11Canvas).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.UpdateMovement">
            <summary>
            Generic method thet gets iteratively after this handler was started.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.Stop">
            <summary>
            Stops input handling.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.IInputHandler.GetInputStates">
            <summary>
            Querries all current input states.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GamepadState.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.Input.GamepadState"/> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GamepadState.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.GamepadState"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GamepadState.CopyAndResetForUpdatePassInternal">
            <summary>
            Copies this object and then resets it
            in preparation of the next update pass.
            Called by update-render loop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GamepadState.IsButtonDown(SeeingSharp.Multimedia.Input.GamepadButton)">
            <summary>
            Is the given button down currently?
            </summary>
            <param name="button">The button to be checked.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GamepadState.IsButtonHit(SeeingSharp.Multimedia.Input.GamepadButton)">
            <summary>
            Is the given button hit exactly this frame?
            </summary>
            <param name="button">The button to be checked.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.IsConnected">
            <summary>
            Do we have any controller connected on this point.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.PressedButtons">
            <summary>
            Gets the currently pressed buttons.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.LeftThumbX">
            <summary>
            Value from short.MinValue to short.MaxValue.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.LeftThumbY">
            <summary>
            Value from short.MinValue to short.MaxValue.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.RightThumbX">
            <summary>
            Value from short.MinValue to short.MaxValue.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.GamepadState.RightThumbY">
            <summary>
            Value from short.MinValue to short.MaxValue.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Input.InputStateBase">
            <summary>
            Base class for all input states.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputStateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.InputStateBase"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputStateBase.CopyAndResetForUpdatePass">
            <summary>
            Copies this object and then resets it 
            in preparation of the next update pass.
            Called by update-render loop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputStateBase.CopyAndResetForUpdatePassInternal">
            <summary>
            Copies this object and then resets it 
            in preparation of the next update pass.
            Called by update-render loop.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.InputStateBase.RelatedView">
            <summary>
            The view object this input state was queried on.
            Null, if this InputState does not depend on a view.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.InputStateBase.ViewIndex">
            <summary>
            The view index this input state was queried on.
            -1, if this InputState does not depend on a view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.KeyboardState.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.KeyboardState"/> class.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Input.MouseOrPointerState">
            <summary>
            A state object describing current mouse or pointer input.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.MouseOrPointerState"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.IsButtonHit(SeeingSharp.Multimedia.Input.MouseButton)">
            <summary>
            Returns true if the user pressed the given button in this frame.
            </summary>
            <param name="mouseButton">The mouse button.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.IsButtonDown(SeeingSharp.Multimedia.Input.MouseButton)">
            <summary>
            Returns true if the user pressed this button before and still don't loosed it.
            </summary>
            <param name="mouseButton">The mouse button.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.IsButtonUp(SeeingSharp.Multimedia.Input.MouseButton)">
            <summary>
            Returns true if the user loosed the given button in this frame.
            </summary>
            <param name="mouseButton">The mouse button.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.NotifyButtonStates(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Notifies the state of the mouse buttons.
            Called by input handler.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.NotifyMouseLocation(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Notifies some information about the mouse pointer.
            Called by input handler.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.NotifyMouseWheel(System.Int32)">
            <summary>
            Notifies the mouse wheel.
            Called by input handler.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.CopyAndResetForUpdatePassInternal">
            <summary>
            Copies this object and then resets it 
            in preparation of the next update pass.
            Called by update-render loop.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.MouseOrPointerState.UpdateMouseButtonState(System.Int32,System.Boolean)">
            <summary>
            Helper method: Updates the button state at the given index based
            on currently notified press-state.
            </summary>
            <param name="buttonIndex">Index of the button.</param>
            <param name="pressedState">True, if the button is pressed currently.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.MouseOrPointerState.ScreenSizeDip">
            <summary>
            Gets the size of the screen in device independent pixel.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.MouseOrPointerState.WheelDelta">
            <summary>
            Gets the current wheel delta.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.GenericXInputHandler"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.GetSupportedViewTypes">
            <summary>
            Gets a list containing all supported view types.
            Null means that this handler is not bound to a view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.GetSupportedCameraTypes">
            <summary>
            Gets a list containing all supported camera types.
            Null means that this handler is not bound to a view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.GetSupportedInputModes">
            <summary>
            Gets an array containing all supported input modes.
            Null means that all modes are supported.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.Start(System.Object,System.Object)">
            <summary>
            Starts input handling.
            </summary>
            <param name="viewObject">The view object (e. g. Direct3D11Canvas).</param>
            <param name="cameraObject">The camera object (e. g. PerspectiveCamera3D).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.UpdateMovement">
            <summary>
            Generic method thet gets iteratively after this handler was started.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.GenericXInputHandler.GetInputStates">
            <summary>
            Querries all current input states.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.IInputEnabledView.RenderLoop">
            <summary>
            Gets the RenderLoop that is currently in use.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.IInputEnabledView.Focused">
            <summary>
            Does the target control have focus?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.IInputEnabledView.InputMode">
            <summary>
            Gets the input mode requested by this view.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.InputHandlerFactory"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputHandlerFactory.UpdateInputHandlerList(SeeingSharp.Multimedia.Input.IInputEnabledView,System.Collections.Generic.List{SeeingSharp.Multimedia.Input.IInputHandler},SeeingSharp.Multimedia.Core.RenderLoop,System.Boolean)">
            <summary>
            Updates all currently active input handlers for the given view.
            </summary>
            <param name="viewObject">The object of the view control.</param>
            <param name="inputHandlers">The collection of input handlers managed by the view object.</param>
            <param name="renderLoop">The renderloop used by the view object.</param>
            <param name="currentlyDispsoing">Is the view currently disposing?</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputHandlerFactory.GetInputHandler``2(SeeingSharp.Multimedia.Input.IInputEnabledView)">
            <summary>
            Gets all possible GraphicsInputHandlers for the given view and camera types.
            </summary>
            <typeparam name="ViewType">Gets the type of the view.</typeparam>
            <typeparam name="CameraType">Gets the type of the camera.</typeparam>
            <param name="viewObject">The view for which to the input handlers.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.InputHandlerFactory.GetInputHandler(SeeingSharp.Multimedia.Input.IInputEnabledView,System.Type,System.Type)">
            <summary>
            Gets all possible GraphicsInputHandlers for the given view and camera types.
            Pass null to all parameters to return all generic input handlers.
            </summary>
            <param name="viewObject">The view for which to query the input object.</param>
            <param name="givenCameraType">The type of the view.</param>
            <param name="givenViewType">The type of the camera.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Input.InputHandlerFactory.Count">
            <summary>
            Gets the total count of loaded input handlers
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Input.SeeingSharpInputMode.FreeCameraMovement">
            <summary>
            Free camera movement, e. g with keyboard an mouse.
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Input.SeeingSharpInputMode.NoInput">
            <summary>
            No default input processing at all.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Input.GamepadButton">
            <summary>
            Describes the current state of the Xbox 360 Controller.
            This structure is used by the SharpDX.XInput.State structure when polling for
            changes in the state of the controller. The specific mapping of button to game
            function varies depending on the game type. The constant XINPUT_GAMEPAD_TRIGGER_THRESHOLD
            may be used as the value which bLeftTrigger and bRightTrigger must be greater
            than to register as pressed. This is optional, but often desirable. Xbox 360
            Controller buttons do not manifest crosstalk.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Input.WinVirtualKey">
            <summary>
            A win32 virtual key.
            Copied from Win.Forms Keys and modiefied (remoted some entries).
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.#cctor">
            <summary>
            Initializes the <see cref="T:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.UpdateMovement">
            <summary>
            Generic method thet gets iteratively after this handler was started.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.GetSupportedViewTypes">
            <summary>
            Gets a list containing all supported view types.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.GetSupportedCameraTypes">
            <summary>
            Gets a list containing all supported camera types.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.GetSupportedInputModes">
            <summary>
            Gets an array containing all supported input modes.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.Start(System.Object,System.Object)">
            <summary>
            Starts input handling.
            </summary>
            <param name="viewObject">The view object (e. g. Direct3D11Canvas).</param>
            <param name="cameraObject">The camera object (e. g. Camera3DBase).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.Stop">
            <summary>
            Stops input handling.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.GetInputStates">
            <summary>
            Querries all current input states.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse enters the screen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnMouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when user clicks on this panel.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Called when the mouse leaves the screen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the mouse moves on the screen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when mouse wheel is used.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is up
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Called when a key is down.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WinFormsKeyAndMouseInputHandler.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            Called when the focus on the target control is lost.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.GetSupportedViewTypes">
            <summary>
            Gets a list containing all supported view types.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.GetSupportedCameraTypes">
            <summary>
            Gets a list containing all supported camera types.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.GetSupportedInputModes">
            <summary>
            Gets an array containing all supported input modes.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.Start(System.Object,System.Object)">
            <summary>
            Starts input handling.
            </summary>
            <param name="viewObject">The view object (e. g. Direct3D11Canvas).</param>
            <param name="cameraObject">The camera object (e. g. Camera3DBase).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.UpdateMovement">
            <summary>
            Generic method thet gets iteratively after this handler was started.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.Stop">
            <summary>
            Stops input handling.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.GetInputStates">
            <summary>
            Querries all current input states.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Input.WpfKeyAndMouseInputHandler.OnRendererElement_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called when user uses the mouse wheel for zooming.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.PlayingSound.CachedSoundFile.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.PlayingSound.CachedSoundFile"/> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.PlayingSound.CachedSoundFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.PlayingSound.CachedSoundFile.FromResourceAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Loads a sound file from the given resource.
            </summary>
            <param name="resource">The resource to load.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.PlayingSound.SoundManager">
            <summary>
            This class manages all currently playing sounds.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.PlayingSound.SoundManager.PlaySoundAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="resource">The file to be played.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.PlayingSound.SoundManager.PlaySoundAsync(SeeingSharp.Multimedia.PlayingSound.CachedSoundFile)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="soundFile">The sound file to be played.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.PlayingSound.SoundManager.CountPlaying">
            <summary>
            Gets the total count of currently playing sounds.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.SeeingSharpGraphicsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.SeeingSharpGraphicsException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.SeeingSharpGraphicsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.SeeingSharpGraphicsException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.GenericObject"/> class.
            </summary>
            <param name="geometryResource">The geometry resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.#ctor(SeeingSharp.Util.NamedOrGenericKey,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.GenericObject" /> class.
            </summary>
            <param name="geometryResource">The geometry resource.</param>
            <param name="position">The initial position.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.TryGetBoundingBox(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding box for the given render-loop.
            Returns BoundingBox.Empty if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingBox.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.TryGetBoundingSphere(SeeingSharp.Multimedia.Core.ViewInformation)">
            <summary>
            Tries to get the bounding sphere for the given render-loop.
            Returns BoundingSphere.Empty, if it is not available.
            </summary>
            <param name="viewInfo">The ViewInformation for which to get the BoundingSphere.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.Pick(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.Multimedia.Core.PickingOptions)">
            <summary>
            Picks an object in 3D-World.
            </summary>
            <param name="rayStart">Start of picking ray.</param>
            <param name="rayDirection"></param>
            <param name="viewInfo">Information about the view that triggered picking.</param>
            <param name="pickingOptions">Some additional options for picking calculations.</param>
            <returns>
            Returns the distance to the object or float.NaN if object is not picked.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.IsInBoundingFrustum(SeeingSharp.Multimedia.Core.ViewInformation,SeeingSharp.BoundingFrustum@)">
            <summary>
            Is this object visible currently?
            </summary>
            <param name="viewInfo">Information about the view that triggered bounding volume testing.</param>
            <param name="boundingFrustum">The bounding frustum to check.</param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.ChangeGeometry(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Changes the geometry to the given one.
            </summary>
            <param name="newGeometry">The new geometry to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device">The device to check for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.UnloadResources">
            <summary>
            Unloads all resources of the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.OnOpacityChanged">
            <summary>
            Called when opacity has changed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.OnRenderPlain(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObject.OnRenderTransparent(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GenericObject.GeometryResourceKey">
            <summary>
            Gets the key of the geometry resources used by this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Overlay2DLineObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Overlay2DLineObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Overlay2DLineObject.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Overlay2DLineObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Overlay2DLineObject.OnRenderOverlay2D(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.SkyboxObject"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.UnloadResources">
            <summary>
            Unloads all resources of this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device">The device for which to check.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SkyboxObject.Render(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders this object.
            </summary>
            <param name="renderState">Render this object.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SkyboxObject.CubeTextureKey">
            <summary>
            Gets or sets the key of the cube texture.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.SkyboxObject.SkyboxLocalResources">
            <summary>
            Helper class that holds all resources of a skybox.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.TexturePainter"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.OnRenderPlain(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.OnRenderTransparent(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Renders the object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TexturePainter.UnloadResources">
            <summary>
            Unloads all resources of the object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.TexturePainter.Scaling">
            <summary>
            Gets or sets the scaling factor.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.TexturePainter.AlphaBlendMode">
            <summary>
            Gets or sets the alpha blend mode.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.WireObject">
            <summary>
            This class is responsible for rendering simple lines into the 3d scene.
            Use the LineData property to define all points of the line.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.WireObject" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.LoadResources(SeeingSharp.Multimedia.Core.EngineDevice,SeeingSharp.Multimedia.Core.ResourceDictionary)">
            <summary>
            Loads all resources of the object.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="resourceDictionary">Current resource dicionary.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.IsLoaded(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Are resources loaded for the given device?
            </summary>
            <param name="device">The device for which to check.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.UnloadResources">
            <summary>
            Unloads all resources of the object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.UpdateInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState)">
            <summary>
            Updates the object.
            </summary>
            <param name="updateState">Current update state.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.UpdateForViewInternal(SeeingSharp.Multimedia.Core.SceneRelatedUpdateState,SeeingSharp.Multimedia.Core.ViewRelatedSceneLayerSubset)">
            <summary>
            Updates this object for the given view.
            </summary>
            <param name="updateState">Current state of the update pass.</param>
            <param name="layerViewSubset">The layer view subset wich called this update method.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.WireObject.RenderLines(SeeingSharp.Multimedia.Core.RenderState)">
            <summary>
            Main render method for the wire object.
            </summary>
            <param name="renderState">Current render state.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.WireObject.LineData">
            <summary>
            Gets or sets current line data.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.WireObject.LineColor">
            <summary>
            Gets or sets the line's color.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneIndex01">
            <summary>
            Gets or sets the first bone index.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneIndex02">
            <summary>
            Gets or sets the second bone index.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneIndex03">
            <summary>
            Gets or sets the third bone index.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneIndex04">
            <summary>
            Gets or sets the fourth bone index.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneWeight01">
            <summary>
            Gets or sets the first bone weight.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneWeight02">
            <summary>
            Gets or sets the second bone weight.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneWeight03">
            <summary>
            Gets or sets the third bone weight.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.AnimationData.BoneWeight04">
            <summary>
            Gets or sets the fourth bone weight.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.BuiltVerticesRange.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.BuiltVerticesRange" /> struct.
            </summary>
            <param name="structure">The structure.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.BuiltVerticesRange.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.BuiltVerticesRange" /> struct.
            </summary>
            <param name="structure">The structure.</param>
            <param name="startVertex">The start vertex.</param>
            <param name="vertexCount">The vertex count.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.BuiltVerticesRange.Merge(SeeingSharp.Multimedia.Objects.BuiltVerticesRange)">
            <summary>
            Merges this structure with the given one.
            This method does only work if the given structure does begin after the end of the current one.
            </summary>
            <param name="otherRange">The other range to merge with.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.BuiltVerticesRange.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new geometry data structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.#ctor(System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Initializes a new geometry data structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Initializes a new geometry data structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new geometry data structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.Copy(System.Numerics.Vector3)">
            <summary>
            Copies this structure and replaces the given values
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GeometryData.Copy(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Copies this structure and replaces the given values
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GeometryData.Position">
            <summary>
            Retrieves or sets the position of the vertex
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GeometryData.Normal">
            <summary>
            Retrieves or sets the normal of the vertex
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GeometryData.Color">
            <summary>
            Retrieves or sets the color of the vertex
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GeometryData.Tangent">
            <summary>
            Gets or sets the tangent vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GeometryData.Binormal">
            <summary>
            Gets or sets the binormal vector.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.MaterialProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.MaterialProperties" /> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.ResourceSourceAssembly">
            <summary>
            Gets or sets the resource source assembly.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.ResourceLink">
            <summary>
            Gets or sets the original source of this geometry / material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.Key">
            <summary>
            Gets or sets the name of the material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.TextureKey">
            <summary>
            Gets or sets the path to the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.DiffuseColor">
            <summary>
            Gets or sets the diffuse color component of this material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.MaterialProperties.AmbientColor">
            <summary>
            Gets or sets the ambient color component.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TextureData.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new TextureData structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.TextureData.Copy(System.Numerics.Vector2)">
            <summary>
            Copies this structure and changes some data
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.TextureData.TextureFactor">
            <summary>
            Gets or sets the texture factor.
            This value decides wether a texture is displayed on this vertex or not.
            A value greater or equal 0 will show the texture, all negatives will hide it.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.TextureData.Coordinate1">
            <summary>
            Retrieves or sets first texture coordinate
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.Triangle">
            <summary>
            A Treangle inside a VertexStructure object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Triangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new triangle
            </summary>
            <param name="index1">Index of the first vertex</param>
            <param name="index2">Index of the second vertex</param>
            <param name="index3">Index of the third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Triangle.GetEdges(SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Gets all edges defined by this triangle.
            </summary>
            <param name="sourceStructure">The source structure.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.#ctor(System.Numerics.Vector3)">
            <summary>
            Creates a new vertex
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.#ctor(System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Creates a new vertex
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.#ctor(System.Numerics.Vector3,SeeingSharp.Color4,System.Numerics.Vector2)">
            <summary>
            Creates a new vertex
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.#ctor(System.Numerics.Vector3,SeeingSharp.Color4,System.Numerics.Vector2,System.Numerics.Vector3)">
            <summary>
            Creates a new vertex
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.Copy(System.Numerics.Vector3)">
            <summary>
            Copies this vertex and sets the new position
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.Copy(System.Numerics.Vector2)">
            <summary>
            Copies this vertex and changes the texture coordinate of the result.
            </summary>
            <param name="actTexCoord">The texture coordinate to be set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.Copy(System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Copies this vertex and sets a new position and texture coordinate
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.Copy(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector2)">
            <summary>
            Copies this vertex and sets a new position, normal and texture coordinate
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Vertex.Copy(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Copies this vertex and sets the new values
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Geometry">
            <summary>
            Retrieves or sets geometry data
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Animation">
            <summary>
            Gets or sets all animation related data of the vertex.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Texture">
            <summary>
            Retrieves or sets texture data
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Position">
            <summary>
            Gets or sets the position
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Normal">
            <summary>
            Gets or sets the normal
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Tangent">
            <summary>
            Gets or sets the tangent vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Binormal">
            <summary>
            Gets or sets the binormal vector.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.TexCoord">
            <summary>
            Gets or sets the texture coordinate
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.TextureFactor">
            <summary>
            Gets or sets the texture factor.
            This value decides wether a texture is displayed on this vertex or not.
            A value greater or equal 0 will show the texture, all negatives will hide it.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.Vertex.Color">
            <summary>
            Gets or sets the diffuse color
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.EnableTextureTileMode(System.Numerics.Vector2)">
            <summary>
            Enables texture tile mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.DisableTextureTileMode">
            <summary>
            Disables texture tile mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.EnableBuildTimeTransform(System.Numerics.Matrix4x4)">
            <summary>
            Enables build-time transform using the given matrix.
            </summary>
            <param name="transformMatrix">Transform matrix.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.EnableBuildTimeTransform(System.Func{SeeingSharp.Multimedia.Objects.Vertex,SeeingSharp.Multimedia.Objects.Vertex})">
            <summary>
            Enables build-time transform using given transform method.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.DisableBuildTimeTransform">
            <summary>
            Disables build-time transform.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.Intersects(SeeingSharp.Ray,SeeingSharp.Multimedia.Core.PickingOptions,System.Single@)">
            <summary>
            Performs a simple picking test against all triangles of this object.
            </summary>
            <param name="pickingRay">The picking ray.</param>
            <param name="distance">Additional picking options.</param>
            <param name="pickingOptions">The distance if picking succeeds.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildColumn24V(System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Builds a column using 24 vertices.
            </summary>
            <param name="bottomMiddle">The bottom middle point.</param>
            <param name="size">Size on the ground.</param>
            <param name="height">Total height of the column.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildXAxisAlignedRect(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Builds a x-axis aligned rectangle.
            </summary>
            <param name="startPoint">Start point (left center).</param>
            <param name="destinationPoint">Destination point (right center).</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildZAxisAlignedRect(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Builds a z-axis aligned rectangle.
            </summary>
            <param name="startPoint">Start point (left center).</param>
            <param name="destinationPoint">Destination point (right center).</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildConeFullV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4)">
            <summary>
            Builds a cone into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cone.</param>
            <param name="height">The height of the cone.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color for the generated vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCylinderFullV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4)">
            <summary>
            Builds a cylinder into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color to be applied on the vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCylinderTopV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4)">
            <summary>
            Builds a cylinder into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color to be applied on the vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCylinderSidesV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4)">
            <summary>
            Builds a cylinder into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color to be applied on the vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCylinderBottomV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4)">
            <summary>
            Builds a cylinder into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color to be applied on the vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCylinderV(System.Numerics.Vector3,System.Single,System.Single,System.Int32,SeeingSharp.Color4,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds a cylinder into the structure with correct texture coordinates and normals.
            </summary>
            <param name="bottomMiddle">Coordinate of bottom middle.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="countOfSegments">Total count of segments to generate.</param>
            <param name="color">The color to be applied on the vertices.</param>
            <param name="buildBottom">Build bottom of the cylinder.</param>
            <param name="buildSides">Build sides of the cylinder.</param>
            <param name="buildTop">Build top side of the cylinder.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildShpere(System.Int32,System.Int32,System.Double,SeeingSharp.Color4)">
            <summary>
            Builds a sphere geometry.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube8V(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Builds a cube into a vertex structure (this cube is built up of just 8 vertices, so not texturing is supported)
            </summary>
            <param name="start">Start point of the cube (left-lower-front point)</param>
            <param name="size">Size of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube8V(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Builds a cube into a vertex structure (this cube is built up of just 8 vertices, so no texturing is supported)
            </summary>
            <param name="start">Start point of the cube (left-lower-front point)</param>
            <param name="size">Size of the cube</param>
            <param name="color">Color of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Builds a cube into this VertexStructure (this cube is built up of 24 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="start">Start point of the cube</param>
            <param name="size">Size of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Builds a cube into this VertexStructure (this cube is built up of 24 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="start">Start point of the cube</param>
            <param name="size">Size of the cube</param>
            <param name="color">Color of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,SeeingSharp.Color4)">
            <summary>
            Builds a cube of 4 vertices and a defined hight.
            </summary>
            <param name="topA"></param>
            <param name="topB"></param>
            <param name="topC"></param>
            <param name="topD"></param>
            <param name="heigh"></param>
            <param name="color"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(SeeingSharp.BoundingBox,SeeingSharp.Color4)">
            <summary>
            Builds a cube into this VertexStructure (this cube is built up of 24 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="box">Box defining bounds of generated cube.</param>
            <param name="color">Color of generated vertices.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(SeeingSharp.BoundingBox)">
            <summary>
            Builds a cube into this VertexStructure (this cube is built up of 24 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="box">Box defining bounds of generated cube.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(System.Numerics.Vector3,System.Single,SeeingSharp.Color4)">
            <summary>
            Builds a cube on the given point with the given color.
            </summary>
            <param name="centerLocation">The location to draw the cube at.</param>
            <param name="sideLength">The side length of the cube.</param>
            <param name="color">The color to be used.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCube24V(System.Numerics.Vector3,System.Single,System.Single,SeeingSharp.Color4)">
            <summary>
            Builds a cube into this VertexStructure (this cube is built up of 24 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="bottomCenter">Bottom center point of the cube.</param>
            <param name="width">Width (and depth) of the cube.</param>
            <param name="height">Height of the cube.</param>
            <param name="color">Color of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Multimedia.Objects.TextureCoordinateCalculationAlignment,SeeingSharp.Multimedia.Objects.TextureCoordinateCalculationAlignment,System.Single)">
            <summary>
            Build a single rectangle into the vertex structure (Supports texturing and normal vectors)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCubeTop4V(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Builds the top side of a cube into this VertexStructure (Built up of 4 vertices, so texture coordinates and normals are set)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCubeBottom4V(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Builds the bottom side of a cube into this VertexStructure (Built up of 4 vertices, so texture coordinates and normals are set)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildCubeSides16V(System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Builds cube sides into this VertexStructure (these sides are built up of  16 vertices, so texture coordinates and normals are set)
            </summary>
            <param name="start">Start poiint of the cube</param>
            <param name="size">Size of the cube</param>
            <param name="color">Color of the cube</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Build a single rectangle into the vertex structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Build a single rectangle into the vertex structure (Supports texturing)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Build a single rectangle into the vertex structure (Supports texturing and normal vectors)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4)">
            <summary>
            Build a single rectangle into the vertex structure (Supports texturing and normal vectors)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildRect4V(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,SeeingSharp.Color4,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Build a single rectangle into the vertex structure (Supports texturing and normal vectors)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.RecorderTriangleIndices">
            <summary>
            Changes the index order of each triangle.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.SphereGetPosition(System.Double,System.Double,System.Double)">
            <summary>
            Helper method for spehere creation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.SphereGetTextureCoordinate(System.Double,System.Double)">
            <summary>
            Helper method for spehere creation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildTextGeometry(System.String)">
            <summary>
            Builds the text geometry for the given string.
            </summary>
            <param name="stringToBuild">The string to build within the geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildTextGeometry(System.String,SeeingSharp.Multimedia.Objects.TextGeometryOptions)">
            <summary>
            Builds the text geometry for the given string.
            </summary>
            <param name="stringToBuild">The string to build within the geometry.</param>
            <param name="geometryOptions">Some configuration for geometry creation.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildPlainPolygon(System.Numerics.Vector3[])">
            <summary>
            Builds a plain polygon using the given coordinates.
            </summary>
            <param name="coordinates">The coordinates to build the polygon from.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.#ctor">
            <summary>
            Creates a new Vertex structure object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Vertex structure object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.EnsureVertexAt(System.Int32)">
            <summary>
            Ensures that there is a vertex at the given index and returns it.
            </summary>
            <param name="index">The index to get the vertex from.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GenerateBoundingBox(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Generates a bounding box surrounding all given structures.
            </summary>
            <param name="structures">Structures to generate a bounding box for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GetBottomCenter(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Gets a vector to the bottom center of given structures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GetBoundingBox(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Gets a bounding box for given vertex structure array.
            </summary>
            <param name="structures">Array of structures.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GetMiddleCenter(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Gets a vector to the middle center of given structures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddStructure(SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Adds all triangles of the given VertexStructure to this one.
            </summary>
            <param name="otherStructure">The structure to add to this one.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddPolygonByCuttingEars(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.Vertex})">
            <summary>
            Adds the given polygon using the cutting ears algorythm for triangulation.
            </summary>
            <param name="vertices">The vertices to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddPolygonByCuttingEars(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the given polygon using the cutting ears algorythm for triangulation.
            </summary>
            <param name="indices">The indices of the polygon's edges.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddPolygonByCuttingEarsAndCalculateNormals(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.Vertex})">
            <summary>
            Adds the given polygon using the cutting ears algorythm for triangulation.
            </summary>
            <param name="vertices">The vertices to add.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddPolygonByCuttingEarsAndCalculateNormals(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the given polygon using the cutting ears algorythm for triangulation.
            </summary>
            <param name="indices">The indices of the polygon's edges.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a triangle
            </summary>
            <param name="index1">Index of the first vertex</param>
            <param name="index2">Index of the second vertex</param>
            <param name="index3">Index of the third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddTriangle(SeeingSharp.Multimedia.Objects.Vertex,SeeingSharp.Multimedia.Objects.Vertex,SeeingSharp.Multimedia.Objects.Vertex)">
            <summary>
            Adds a triangle
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddTriangleAndCalculateNormalsFlat(SeeingSharp.Multimedia.Objects.Vertex,SeeingSharp.Multimedia.Objects.Vertex,SeeingSharp.Multimedia.Objects.Vertex)">
            <summary>
            Adds a triangle
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddTriangleAndCalculateNormalsFlat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a triangle and calculates normals for it.
            </summary>
            <param name="index1">Index of the first vertex</param>
            <param name="index2">Index of the second vertex</param>
            <param name="index3">Index of the third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddVertex">
            <summary>
            Adds a vertex to the structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.AddVertex(SeeingSharp.Multimedia.Objects.Vertex)">
            <summary>
            Adds a vertex to the structure
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForFaceBinormals">
            <summary>
            Builds a line list containing a line for each face binormal.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForFaceNormals">
            <summary>
            Builds a line list containing a line for each face normal.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForFaceTangents">
            <summary>
            Builds a line list containing a line for each face tangent.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForVertexBinormals">
            <summary>
            Builds a list list containing a list for each vertex binormal.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForVertexNormals">
            <summary>
            Builds a list list containing a list for each vertex normal.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForVertexTangents">
            <summary>
            Builds a list list containing a list for each vertex tangent.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.BuildLineListForWireframeView">
            <summary>
            Build a line list containing all lines for wireframe display.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateTangentsAndBinormals">
            <summary>
            Calculates tangents for all vectors.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateNormalsFlat">
            <summary>
            Recalculates all normals
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateNormalsFlat(SeeingSharp.Multimedia.Objects.Triangle)">
            <summary>
            Calculates normals for the given treangle.
            </summary>
            <param name="actTriangle">The triangle for which to calculate the normal (flat).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateNormalsFlat(System.Int32,System.Int32)">
            <summary>
            Calculates normals for the given treangle.
            </summary>
            <param name="countTriangles">Total count of triangles.</param>
            <param name="startTriangleIndex">The triangle on which to start.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateNormals">
            <summary>
            Calculates normals for all triangles of this structure.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.CalculateNormals(System.Int32,System.Int32)">
            <summary>
            Calculates normals for all triangles specifyed by the given parameters.
            </summary>
            <param name="startVertex">The vertex index on which to start.</param>
            <param name="vertexCount">Total count of vertices to be updated.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.Clone">
            <summary>
            Clones this object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GenerateBoundingBox">
            <summary>
            Generates a boundbox around this structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.SetColorOnEachVertex(SeeingSharp.Color4)">
            <summary>
            Changes the color on each vertex.
            </summary>
            <param name="Color4">The new color.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.ToggleCoordinateSystem">
            <summary>
            Toggles all vertices and indexes from left to right handed or right to left handed system.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GetExtendedMaterialProperties``1">
            <summary>
            Gets extended material properties of the given type.
            </summary>
            <typeparam name="T">The type of properties to get.</typeparam>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.GetIndexArray">
            <summary>
            Gets an index array
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.SetExtendedMaterialProperties``1(``0)">
            <summary>
            Sets the extended material properties.
            </summary>
            <typeparam name="T">The type of properties to set.</typeparam>
            <param name="properties">The properties to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TransformVertices(System.Numerics.Matrix4x4)">
            <summary>
            Transforms positions and normals of all vertices using the given transform matrix
            </summary>
            <param name="transformMatrix"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.ToSingleItemArray">
            <summary>
            Gets an array with this object as a single item.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.UpdateVerticesUsingRelocationBy(System.Numerics.Vector3)">
            <summary>
            Relocates all vertices by the given vector
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.UpdateVerticesUsingRelocationFunc(System.Func{System.Numerics.Vector3,System.Numerics.Vector3})">
            <summary>
            Relocates all vertices by the given relocation function (executed for each position vector).
            </summary>
            <param name="calculatePositionFunc">The function to be applied to each coordinate.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.CountTriangles">
            <summary>
            Retrieves total count of all triangles within this structure
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.CountVertices">
            <summary>
            Retrieves total count of all vertices within this structure
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Description">
            <summary>
            A short description for the use of this structure
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.IsEmpty">
            <summary>
            Is this structure empty?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Material">
            <summary>
            Gets the name of the material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of the material.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.ResourceSourceAssembly">
            <summary>
            Gets or sets the resource source assembly.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.ResourceLink">
            <summary>
            Gets or sets the original source of this geometry.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.TextureName">
            <summary>
            Gets or sets the name of the texture (used for the NamedOrGenericKey structure behind).
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.TextureKey">
            <summary>
            Gets or sets the key of the texture.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.MaterialProperties">
            <summary>
            Gets or sets the material properties object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Name">
            <summary>
            The name of this structure
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Triangles">
            <summary>
            Retrieves a collection of triangles
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Vertices">
            <summary>
            Retrieves a collection of vertices
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.Indices">
            <summary>
            Gets a collection containing all indices.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.CountIndexes">
            <summary>
            Retrieves total count of all indexes within this structure
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection">
            <summary>
            Contains all triangles of a VertexStructure object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{SeeingSharp.Multimedia.Objects.Vertex})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a treangle to this vertex structure
            </summary>
            <param name="index1">Index of the first vertex</param>
            <param name="index2">Index of the second vertex</param>
            <param name="index3">Index of the third vertex</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Add(SeeingSharp.Multimedia.Objects.Triangle)">
            <summary>
            Adds a treangle to this vertex structure
            </summary>
            <param name="triangle"></param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.ToIndexArray">
            <summary>
            Gets an array containing all indices
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.ToIndexArray(System.Int32)">
            <summary>
            Gets an array containing all indices
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Item(System.Int32)">
            <summary>
            Retrieves the triangle at the given index
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator">
            <summary>
            Enumerator of TriangleCollection
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.#ctor(System.Collections.Generic.List{System.Int32})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.MoveNext">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.Reset">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.System#Collections#IEnumerator#Current">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.TriangleCollection.Enumerator.Current">
             <summary>
            
             </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.VertexStructure.IndexCollection">
            <summary>
            Contains all indices of a VertexStructure object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.IndexCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.IndexCollection.GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.IndexCollection.Item(System.Int32)">
            <summary>
            Returns the index at ghe given index
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection">
            <summary>
            Contains all vertices of a VertexStructure object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection.#ctor(System.Collections.Generic.List{SeeingSharp.Multimedia.Objects.Vertex})">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection.Add(SeeingSharp.Multimedia.Objects.Vertex)">
            <summary>
            Adds a vertex to the structure
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection.GetEnumerator">
             <summary>
            
             </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.VertexStructure.VertexCollection.Item(System.Int32)">
            <summary>
            Returns the vertex at ghe given index
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddArc(SharpDX.Direct2D1.ArcSegment)">
            <summary>
            Adds a single arc to the path geometry.
            </summary>
            <param name="arc">The arc segment to add to the figure.</param>
            <unmanaged>void AddArc([In] const D2D1_ARC_SEGMENT* arc)</unmanaged>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddBezier(SharpDX.Direct2D1.BezierSegment)">
            <summary>
            Creates  a cubic Bezier curve between the current point and the specified endpoint.
            </summary>
            <param name="bezier">A structure that describes the control points and endpoint of the Bezier curve to add.</param>
            <unmanaged>void AddBezier([In] const D2D1_BEZIER_SEGMENT* bezier)</unmanaged>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddLine(SharpDX.Mathematics.Interop.RawVector2)">
            <summary>
            Creates a line segment between the current point and the specified end point and adds it to the geometry sink.
            </summary>
            <param name="point">The end point of the line to draw.</param>
            <unmanaged>void AddLine([None] D2D1_POINT_2F point)</unmanaged>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddQuadraticBezier(SharpDX.Direct2D1.QuadraticBezierSegment)">
            <summary>
            Creates  a quadratic Bezier curve between the current point and the specified endpoint.
            </summary>
            <param name="bezier">A structure that describes the control point and the endpoint of the quadratic Bezier curve to add.</param>
            <unmanaged>void AddQuadraticBezier([In] const D2D1_QUADRATIC_BEZIER_SEGMENT* bezier)</unmanaged>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddQuadraticBeziers(SharpDX.Direct2D1.QuadraticBezierSegment[])">
            <summary>
            Adds a sequence of quadratic Bezier segments as an array in a single call.
            </summary>
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
            <unmanaged>void AddQuadraticBeziers([In, Buffer] const D2D1_QUADRATIC_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddBeziers(SharpDX.Direct2D1.BezierSegment[])">
            <summary>
            Creates a sequence of cubic Bezier curves and adds them to the geometry sink.
            </summary>
            <param name="beziers">A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
            <unmanaged>void AddBeziers([In, Buffer] const D2D1_BEZIER_SEGMENT* beziers,[None] UINT beziersCount)</unmanaged>
            <exception cref="T:SeeingSharp.SeeingSharpException"></exception>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.AddLines(SharpDX.Mathematics.Interop.RawVector2[])">
            <summary>
            Creates a sequence of lines using the specified points and adds them to the geometry sink.
            </summary>
            <param name="ointsRef">A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by {{BeginFigure}}) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.</param>
            <unmanaged>void AddLines([In, Buffer] const D2D1_POINT_2F* points,[None] UINT pointsCount)</unmanaged>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.BeginFigure(SharpDX.Mathematics.Interop.RawVector2,SharpDX.Direct2D1.FigureBegin)">
            <summary>
            Starts a new figure at the specified point.
            </summary>
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
            <unmanaged>void BeginFigure([None] D2D1_POINT_2F startPoint,[None] D2D1_FIGURE_BEGIN figureBegin)</unmanaged>
            <remarks>
            If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.Close">
            <summary>
            Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.
            </summary>
            <unmanaged>HRESULT Close()</unmanaged>
            <remarks>
            Do not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one {{EndFigure}} call for each call to {{BeginFigure}}.After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.EndFigure(SharpDX.Direct2D1.FigureEnd)">
            <summary>
            Ends the current figure; optionally, closes it.
            </summary>
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by {{BeginFigure}}.</param>
            <unmanaged>void EndFigure([None] D2D1_FIGURE_END figureEnd)</unmanaged>
            <remarks>
            Calling this method without a matching call to {{BeginFigure}} places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the {{Close}} method is called.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.SetFillMode(SharpDX.Direct2D1.FillMode)">
            <summary>
            Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.
            </summary>
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
            <unmanaged>void SetFillMode([None] D2D1_FILL_MODE fillMode)</unmanaged>
            <remarks>
            The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call SetFillMode before the first call to {{BeginFigure}}. Not doing will put the geometry sink in an error state.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.SetSegmentFlags(SharpDX.Direct2D1.PathSegment)">
            <summary>
            Specifies stroke and join options to be applied to new segments added to the geometry sink.
            </summary>
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
            <unmanaged>void SetSegmentFlags([None] D2D1_PATH_SEGMENT vertexFlags)</unmanaged>
            <remarks>
            After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.Shadow">
            <summary>
            Gets or sets the unmanaged shadow callback.
            </summary>
            <value>
            The unmanaged shadow callback.
            </value>
            <remarks>
            This property is set whenever this instance has an unmanaged shadow callback
            registered. This callback must be disposed when disposing this instance.
            </remarks>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SimplePolygon2DGeometrySink.GeneratedPolygons">
            <summary>
            Gets a collection containing all generated polygons.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure,SeeingSharp.Multimedia.Objects.TextGeometryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer.DrawGlyphRun(System.Object,System.Single,System.Single,SharpDX.Direct2D1.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.GlyphRunDescription,SharpDX.ComObject)">
            <summary>
            IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs.
            </summary>
            <param name="clientDrawingContext">The application-defined drawing context passed to  <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)" />.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the glyph run.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the glyph run.</param>
            <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
            <param name="glyphRun">Pointer to the glyph run instance to render.</param>
            <param name="glyphRunDescription">A pointer to the optional glyph run description instance which contains properties of the characters  associated with this run.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of text.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <unmanaged>HRESULT DrawGlyphRun([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[None] DWRITE_MEASURING_MODE measuringMode,[In] const DWRITE_GLYPH_RUN* glyphRun,[In] const DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,[None] IUnknown* clientDrawingEffect)</unmanaged>
            <remarks>
            The <see cref="M:SharpDX.DirectWrite.TextLayout.Draw_(System.IntPtr,System.IntPtr,System.Single,System.Single)" /> function calls this callback function with all the information about glyphs to render. The application implements this callback by mostly delegating the call to the underlying platform's graphics API such as {{Direct2D}} to draw glyphs on the drawing context. An application that uses GDI can implement this callback in terms of the <see cref="M:SharpDX.DirectWrite.BitmapRenderTarget.DrawGlyphRun(System.Single,System.Single,SharpDX.Direct2D1.MeasuringMode,SharpDX.DirectWrite.GlyphRun,SharpDX.DirectWrite.RenderingParams,SharpDX.Color4)" /> method.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer.DrawInlineObject(System.Object,System.Single,System.Single,SharpDX.DirectWrite.InlineObject,System.Boolean,System.Boolean,SharpDX.ComObject)">
            <summary>
            IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object.
            </summary>
            <param name="clientDrawingContext">The application-defined drawing context passed to IDWriteTextLayout::Draw.</param>
            <param name="originX">X-coordinate at the top-left corner of the inline object.</param>
            <param name="originY">Y-coordinate at the top-left corner of the inline object.</param>
            <param name="inlineObject">The application-defined inline object set using IDWriteTextFormat::SetInlineObject.</param>
            <param name="isSideways">A Boolean flag that indicates whether the object's baseline runs alongside the baseline axis of the line.</param>
            <param name="isRightToLeft">A Boolean flag that indicates whether the object is in a right-to-left context, hinting that the drawing may want to mirror the normal image.</param>
            <param name="clientDrawingEffect">Application-defined drawing effects for the glyphs to render. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <unmanaged>HRESULT DrawInlineObject([None] void* clientDrawingContext,[None] FLOAT originX,[None] FLOAT originY,[None] IDWriteInlineObject* inlineObject,[None] BOOL isSideways,[None] BOOL isRightToLeft,[None] IUnknown* clientDrawingEffect)</unmanaged>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer.DrawStrikethrough(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Strikethrough@,SharpDX.ComObject)">
            <summary>
            IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough.
            </summary>
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where strikethrough applies.</param>
            <param name="strikethrough">Pointer to  a structure containing strikethrough logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the strikethrough.  Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <unmanaged>HRESULT DrawStrikethrough([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_STRIKETHROUGH* strikethrough,[None] IUnknown* clientDrawingEffect)</unmanaged>
            <remarks>
            A single strikethrough can be broken into multiple calls, depending on how the formatting changes attributes. Strikethrough is not averaged across font sizes/styles changes. To get an appropriate starting pixel position, add strikethrough::offset to the baseline. Like underlines, the x coordinate will always be passed as the left side, regardless of text directionality.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.VertexStructureTextRenderer.DrawUnderline(System.Object,System.Single,System.Single,SharpDX.DirectWrite.Underline@,SharpDX.ComObject)">
            <summary>
            IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline.
            </summary>
            <param name="clientDrawingContext">The application-defined drawing context passed to  IDWriteTextLayout::Draw.</param>
            <param name="baselineOriginX">The pixel location (X-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="baselineOriginY">The pixel location (Y-coordinate) at the baseline origin of the run where underline applies.</param>
            <param name="underline">Pointer to  a structure containing underline logical information.</param>
            <param name="clientDrawingEffect">Application-defined effect to apply to the underline. Usually this argument represents effects such as the foreground brush filling the interior of a line.</param>
            <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <unmanaged>HRESULT DrawUnderline([None] void* clientDrawingContext,[None] FLOAT baselineOriginX,[None] FLOAT baselineOriginY,[In] const DWRITE_UNDERLINE* underline,[None] IUnknown* clientDrawingEffect)</unmanaged>
            <remarks>
            A single underline can be broken into multiple calls, depending on how the formatting changes attributes. If font sizes/styles change within an underline, the thickness and offset will be averaged weighted according to characters. To get an appropriate starting pixel position, add underline::offset to the baseline. Otherwise there will be no spacing between the text. The x coordinate will always be passed as the left side, regardless of text directionality. This simplifies drawing and reduces the problem of round-off that could potentially cause gaps or a double stamped alpha blend. To avoid alpha overlap, round the end points to the nearest device pixel.
            </remarks>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.GenerateBoundingBox(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure})">
            <summary>
            Generates a bounding box out of given vertex structures.
            </summary>
            <param name="structures">The structures to buld the box for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.CalculateNormals(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure})">
            <summary>
            Calculates all normals in the given structures.
            </summary>
            <param name="structures">The structure where to calculate all normals.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.TransformVertices(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure},System.Numerics.Matrix4x4)">
            <summary>
            Transforms positions and normals of all vertices using the given transform matrix
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.RealignToCenter(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure})">
            <summary>
            Realigns all given structures to their center coordinate.
            </summary>
            <param name="structures">The structures to update.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.FitToCenteredCube(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure})">
            <summary>
            Fits to centered cube.
            </summary>
            <param name="structures">The structures to perform the fit function on.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.FitToCenteredCube(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure},System.Single)">
            <summary>
            Fits to centered cube.
            </summary>
            <param name="structures">The structures to perform the fit function on.</param>
            <param name="cubeSideLength">Fixed cube side length for x, y and z.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.GenerateShadowVolume(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure},System.Numerics.Vector3,System.Single)">
            <summary>
            Generates a shadow volume structure out of the given vertex structures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ConstructionExtensions.GenerateEdgesSeenFromViewpoint(System.Collections.Generic.IEnumerable{SeeingSharp.Multimedia.Objects.VertexStructure},System.Numerics.Vector3)">
            <summary>
            Searchs all edges seen from the given direction.
            </summary>
            <param name="structures">The structures to search edges for.</param>
            <param name="viewDirection">The view direction.</param>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.TesselationFunction">
            <summary>
            Delegate used for accessing a tesselation function
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.TextureCoordinateComponent">
            <summary>
            Enumeration containing all components of texture coordinate
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Objects.TextureCoordinateComponent.U">
            <summary>
            U component of a texture coordinate
            </summary>
        </member>
        <member name="F:SeeingSharp.Multimedia.Objects.TextureCoordinateComponent.V">
            <summary>
            V component of a texture coordinate
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.TextGeometryOptions">
            <summary>
            Some options for text geometry creation.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.IModelExporter.ExportModelAsync(SeeingSharp.Multimedia.Objects.ImportedModelContainer,SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ExportOptions)">
            <summary>
            Exports the model(s) defined in the given model container to the given model file.
            </summary>
            <param name="modelContainer">The model(s) to export.</param>
            <param name="targetFile">The path to the target file.</param>
            <param name="exportOptions">Some configuration for the exporter.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.IModelImporter.ImportModel(SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Imports a model from the given file.
            </summary>
            <param name="importOptions">Some configuration for the importer.</param>
            <param name="sourceFile">The source file to be loaded.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.IModelImporter.CreateDefaultImportOptions">
            <summary>
            Creates a default import options object for this importer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ImportExportHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.GetSupportedImportFormats">
            <summary>
            Gets a collection containing all supported import formats.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.GetOpenFileDialogFilter">
            <summary>
            Gets the filter string for an open file dialog.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.CreateImportOptions(SeeingSharp.Util.ResourceLink)">
            <summary>
            Creates an ImportOptions object by the given source.
            </summary>
            <param name="source">The source of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.CreateImportOptionsByFileType(System.String)">
            <summary>
            Creates an ImportOptions object by the given source.
            </summary>
            <param name="fileExtension">The extension of the file to be imported.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.ImportAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Imports model(s) from the given source.
            </summary>
            <param name="source">The source where to load all objects from..</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.ImportAsync(SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Imports model(s) from the given source.
            </summary>
            <param name="source">The source where to load all objects from..</param>
            <param name="importOptions">The import options.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.GetImporterBySource(SeeingSharp.Util.ResourceLink)">
            <summary>
            Gets a ModelImporter by the given source.
            </summary>
            <param name="source">The source of the resource.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportExportHandler.GetImporterByFileType(System.String)">
            <summary>
            Gets a ModelImporter by the given file extension.
            </summary>
            <param name="fileExtension">The file extension of the resource to load.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ImportOptions"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportOptions.ResizeFactor">
            <summary>
            Gets or sets the resize factor.
            This is needed to transform coordinate from one measure unit to another.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportedObjectInfo.#ctor(SeeingSharp.Multimedia.Core.SceneObject,SeeingSharp.BoundingBox)">
            <summary>
            Prevents a default instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ImportedObjectInfo"/> class from being created.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedObjectInfo.BoundingBox">
            <summary>
            
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportedResourceInfo.#ctor(SeeingSharp.Util.NamedOrGenericKey,System.Func{SeeingSharp.Multimedia.Core.Resource})">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ImportedResourceInfo"/> class.
            </summary>
            <param name="resourceKey">The key which is used by added the resource to a scene.</param>
            <param name="resourceFactory">The resource factory.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportedModelContainer.#ctor(SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ImportedModelContainer" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportedModelContainer.CreateAndAddRootObject">
            <summary>
            Creates and adds the root for all imported scene objects.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ImportedModelContainer.GetResourceKey(System.String,System.String)">
            <summary>
            Generates a key for a resource contained in an imported object graph.
            </summary>
            <param name="resourceClass">The type of the resource (defined by importer).</param>
            <param name="resourceID">The id of the resource (defined by importer)</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedModelContainer.Objects">
            <summary>
            Gets a collection containing all objects.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedModelContainer.ObjectDependencies">
            <summary>
            Gets the hierarchy information of the loaded objects.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedModelContainer.ImportedResources">
            <summary>
            Gets a collection containing all resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedModelContainer.ChangeTriangleOrder">
            <summary>
            Should triangle order be changes by the import logic?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ImportedModelContainer.ResizeFactor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACImporter.ImportModel(SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Imports a model from the given file.
            </summary>
            <param name="sourceFile">The source file to be loaded.</param>
            <param name="importOptions">Some configuration for the importer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACImporter.CreateDefaultImportOptions">
            <summary>
            Creates a default import options object for this importer.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Objects.XglImporter">
            <summary>
            An importer which loads files in xgl format.
            See http://vizstream.aveva.com/release/vsplatform/XGLSpec.htm
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.XglImporter.ImportModel(SeeingSharp.Util.ResourceLink,SeeingSharp.Multimedia.Objects.ImportOptions)">
            <summary>
            Imports a model from the given file.
            </summary>
            <param name="sourceFile">The source file to be loaded.</param>
            <param name="importOptions">Some configuration for the importer.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.XglImporter.CreateDefaultImportOptions">
            <summary>
            Creates a default import options object for this importer.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.XglImporter.ImportTexture(System.Xml.XmlReader,SeeingSharp.Multimedia.Objects.ImportedModelContainer)">
            <summary>
            Imports the texture node where the xml reader is currently located.
            </summary>
            <param name="inStreamXml">The xml reader object.</param>
            <param name="container">The container where to import to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.XglImporter.ImportMesh(System.Xml.XmlReader,SeeingSharp.Multimedia.Objects.ImportedModelContainer)">
            <summary>
            Imports the texture node where the xml reader is currently located.
            </summary>
            <param name="inStreamXml">The xml reader object.</param>
            <param name="container">The container where to import to.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.XglImporter.ImportObject(System.Xml.XmlReader,SeeingSharp.Multimedia.Objects.ImportedModelContainer,SeeingSharp.Multimedia.Core.SceneObject)">
            <summary>
            Imports the texture node where the xml reader is currently located.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.PalletType" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.#ctor(SeeingSharp.Util.NamedOrGenericKey,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new pallet type with given size settings
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structure needed for the pallet
            </summary>
            <param name="buildOptions">Some generic options for structure building</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.Width">
            <summary>
            Gets or sets the width of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.Depth">
            <summary>
            Gets or sets the depth of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.PalletHeight">
            <summary>
            Gets or sets the height of a pallet
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.ContentHeight">
            <summary>
            Gets or sets the height of the content
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.SmallFooterWidth">
            <summary>
            Gets or sets the width of the small footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.BigFooterWidth">
            <summary>
            Gets or sets the width of the big footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.BoardHeight">
            <summary>
            Gets or sets the height of a board
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.SingleMaterialPalletType.PalletMaterial">
            <summary>
            Gets or sets the material of the pallet.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ImportObjectType(System.Byte[])">
            <summary>
            Imports an object-type form given raw model file.
            </summary>
            <param name="rawBytes">Raw model file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ImportObjectType(System.IO.Stream)">
            <summary>
            Loads an object from the given uri
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ImportObjectType(SeeingSharp.Util.ResourceLink)">
            <summary>
            Imports a ac file from the given stream.
            </summary>
            <param name="resourceLink">The link to the ac file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ImportVertexStructures(System.IO.Stream)">
            <summary>
            Imports VertexStructures from the given stream.
            </summary>
            <param name="inStream">The stream to load the data from.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ImportVertexStructures(System.IO.Stream,SeeingSharp.Util.ResourceLink)">
            <summary>
            Imports VertexStructures from the given stream.
            </summary>
            <param name="inStream">The stream to load the data from.</param>
            <param name="originalSource">The original source of the generated geometry.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.GenerateStructures(SeeingSharp.Multimedia.Objects.ACFileLoader.ACFileInfo)">
            <summary>
            Generates all vertex structures needed for this object
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.FillVertexStructure(System.Collections.Generic.List{SeeingSharp.Multimedia.Objects.VertexStructure},System.Collections.Generic.List{SeeingSharp.Multimedia.Objects.ACFileLoader.ACMaterialInfo},SeeingSharp.Multimedia.Objects.ACFileLoader.ACObjectInfo,SeeingSharp.Matrix4Stack)">
            <summary>
            Fills the given vertex structure using information from the given AC-File-Objects.
            </summary>
            <param name="objInfo">The object information from the AC file.</param>
            <param name="acMaterials">A list containing all materials from the AC file.</param>
            <param name="outputStructures">The VertexStructure list to be filled.</param>
            <param name="transformStack">Current matrix stack (for stacked objects).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.LoadFile(System.IO.Stream)">
            <summary>
            Loads a ac file from the given uri
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.DefaultExtension">
            <summary>
            Gets the default extension (e. g. ".ac").
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ACFileInfo.CountAllObjects">
            <summary>
            Counts all objects within this file
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ACObjectInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ACFileLoader.ACObjectInfo"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ACObjectInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ACObjectInfo.CountAllChildObjects">
            <summary>
            Gets total count of all child ojects
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface"/> class.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.IsPolygon">
            <summary>
            Is this surface built using polygons?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.IsClosedLine">
            <summary>
            Is this surface a closed line?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.IsLine">
            <summary>
            Is this surface a line?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.IsFlatShaded">
            <summary>
            Is this surface flat shaded?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.ACFileLoader.ACSurface.IsTwoSided">
            <summary>
            Is this surface two sided?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.GenericObjectType"/> class.
            </summary>
            <param name="vertexStructures">The vertex structures.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure[],SeeingSharp.Multimedia.Objects.VertexStructure[])">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.GenericObjectType"/> class.
            </summary>
            <param name="vertexStructures">The vertex structures.</param>
            <param name="vertexStructuresLowDetail">The vertex structures for low detail level.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.#ctor(SeeingSharp.Multimedia.Objects.VertexStructure)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.GenericObjectType"/> class.
            </summary>
            <param name="vertexStructure">The vertex structure.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structure.
            </summary>
            <param name="buildOptions">Some generic options for structure building</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.ApplyMaterialForAll(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Applies the given material to all contained vertex structures.
            </summary>
            <param name="materialToApply">The materials to apply.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.GenericObjectType.ConvertMaterial(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Converts all occurrences of the given material to another material.
            </summary>
            <param name="materialNameOld">The material to be converted.</param>
            <param name="materialNameNew">The new material to be converted to.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GenericObjectType.VertexStructures">
            <summary>
            Gets the array containing all loaded vertex structures.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.GenericObjectType.VertexStructuresLowDetail">
            <summary>
            Gets an array containing all loaded vertex structures for low detail level.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Grid3DType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.Grid3DType" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.Grid3DType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structures.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorTile.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.FloorTile"/> class.
            </summary>
            <param name="xPos">The x pos.</param>
            <param name="yPos">The y pos.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorTile.#ctor(System.Int32,System.Int32,SeeingSharp.Multimedia.Objects.FloorTileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.FloorTile"/> class.
            </summary>
            <param name="xPos">The x pos.</param>
            <param name="yPos">The y pos.</param>
            <param name="tileInfo">Gets some generic information about the tile.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorTile.Material">
            <summary>
            Gets the material used by this tile.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorTile.XPos">
            <summary>
            Gets the x-position of the tile.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorTile.YPos">
            <summary>
            Gets the y-position of the tile.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorTileInfo.#ctor(SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.FloorTileInfo"/> class.
            </summary>
            <param name="material">The material to use for the tile (string.Empty or null to use default material).</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorTileInfo.Material">
            <summary>
            Gets the material used for this tile.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.#ctor(System.Numerics.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.FloorType"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.SetTilemap(SeeingSharp.Multimedia.Objects.FloorTileInfo[0:,0:])">
            <summary>
            Sets the tilemap.
            </summary>
            <param name="tileMap">The new tilemap to apply (use null for empty tiles).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.SetTilemap(System.Int32,System.Int32)">
            <summary>
            Sets a tilemap using the given width and height and sets all tiles to default resource.
            </summary>
            <param name="width">Width of the tilemap.</param>
            <param name="height">Height of the tilemap.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.SetTilemap(System.Boolean[0:,0:])">
            <summary>
            Sets the tilemap.
            </summary>
            <param name="tileMap">The new tilemap to apply (use null for empty tiles).</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.GetTilePosition(System.Int32,System.Int32)">
            <summary>
            Gets the center coordinate of the tile at the given location.
            </summary>
            <param name="xPos">X position of the requested tile.</param>
            <param name="yPos">Y position of the requested tile.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structure.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.CreateBooleanMap(SeeingSharp.Multimedia.Objects.FloorTileInfo[0:,0:])">
            <summary>
            Creates a boolean map out of given tilemap.
            </summary>
            <param name="tileMap">The tilemap to convert.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.FloorType.GenerateBorders(System.Boolean[0:,0:],System.Int32,System.Int32)">
            <summary>
            Generates borders for the ground.
            </summary>
            <param name="tileMap">The tilemap.</param>
            <param name="tilesX">Tiles in x direction.</param>
            <param name="tilesY">Tiles in y direction.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorType.BorderMaterial">
            <summary>
            Gets or sets the border material
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorType.DefaultFloorMaterial">
            <summary>
            Gets or sets the ground material
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorType.SideMaterial">
            <summary>
            Gets or sets material for sides.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.FloorType.BottomMaterial">
            <summary>
            Gets or sets the material for bottom.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ObjectType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.ObjectType"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.ObjectType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds all vertex structures for the given detail level.
            </summary>
            <param name="buildOptions">Some generic options for structure building</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletStackType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.PalletType" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletStackType.#ctor(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey,System.Int32)">
            <summary>
            Creates a new pallet type with default size
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletStackType.#ctor(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new pallet type with given size settings
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletStackType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structure needed for the pallet
            </summary>
            <param name="buildOptions">Some generic options for structure building</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.Width">
            <summary>
            Gets or sets the width of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.Depth">
            <summary>
            Gets or sets the depth of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.PalletHeight">
            <summary>
            Gets or sets the height of a pallet
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.SmallFooterWidth">
            <summary>
            Gets or sets the width of the small footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.BigFooterWidth">
            <summary>
            Gets or sets the width of the big footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.PalletCount">
            <summary>
            Gets or sets the pallet count.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.BoardHeight">
            <summary>
            Gets or sets the height of a board
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.PalletMaterial">
            <summary>
            Gets or sets the material of the pallet.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletStackType.ContentMaterial">
            <summary>
            Gets or sets the material of the content.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Objects.PalletType" /> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletType.#ctor(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey)">
            <summary>
            Creates a new pallet type with default size
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletType.#ctor(SeeingSharp.Util.NamedOrGenericKey,SeeingSharp.Util.NamedOrGenericKey,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new pallet type with given size settings
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Objects.PalletType.BuildStructure(SeeingSharp.Multimedia.Objects.StructureBuildOptions)">
            <summary>
            Builds the structure needed for the pallet
            </summary>
            <param name="buildOptions">Some generic options for structure building</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.Width">
            <summary>
            Gets or sets the width of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.Depth">
            <summary>
            Gets or sets the depth of the object
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.PalletHeight">
            <summary>
            Gets or sets the height of a pallet
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.ContentHeight">
            <summary>
            Gets or sets the height of the content
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.SmallFooterWidth">
            <summary>
            Gets or sets the width of the small footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.BigFooterWidth">
            <summary>
            Gets or sets the width of the big footer
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.BoardHeight">
            <summary>
            Gets or sets the height of a board
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.PalletMaterial">
            <summary>
            Gets or sets the material of the pallet.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Objects.PalletType.ContentMaterial">
            <summary>
            Gets or sets the material of the content.
            </summary>
        </member>
        <member name="T:SeeingSharp.Multimedia.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Properties.Resources.Blank_16x16">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Properties.Resources.Empty">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Views.MediaPlayerComponent.StateChanged">
            <summary>
            Raised when the current state has changed.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Views.MediaPlayerComponent.IsPausedChanged">
            <summary>
            Raised when the paused flag has changed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Views.MediaPlayerComponent"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.PauseVideoAsync">
            <summary>
            Pauses the video currently playing.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.ResumeVideoAsync">
            <summary>
            Resumes the video from current position.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.OpenAndShowVideoFileAsync(SeeingSharp.Util.ResourceLink)">
            <summary>
            Opens the given video file and plays it directly.
            </summary>
            <param name="videoLink">The link to the video file.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.StartSessionInternalAsync(System.Boolean)">
            <summary>
            Starts playing the video.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.CloseVideoAsync">
            <summary>
            Closes the current video.
            This method returns immediately if there is no video playing.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.OnSessionEventHandlerEndOfPresentationReached(System.Object,System.EventArgs)">
            <summary>
            Current session reports finished video.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.OnTargetControlResize(System.Object,System.EventArgs)">
            <summary>
            Called when the target control changes its size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.OnTargetControlPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the target control requested painting.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MediaPlayerComponent.DisposeResources">
            <summary>
            Disposes all current resources.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.State">
            <summary>
            Gets the state of the media player.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.CurrentVideoFile">
            <summary>
            Gets a reference to the current displayed video.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.CurrentCaptureDevice">
            <summary>
            Gets a reference to the current CaptureDevice.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.CurrentVideoDuration">
            <summary>
            Gets the total duration of the currently displayed video.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.RestartWhenFinished">
            <summary>
            Restart the video when playing has finished?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.TargetControl">
            <summary>
            Gets or sets the target control which is used for displaying the video.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.IsPaused">
            <summary>
            Is the video paused currently?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MediaPlayerComponent.AudioVolume">
            <summary>
            Gets or sets the current MasterVolume for audio rendering.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.ManipulateFilterList">
            <summary>
            Raised when it is possible for the UI thread to manipulate current filter list.
            </summary>
        </member>
        <member name="E:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.MouseClickEx">
            <summary>
            Raises when mouse was down a short amount of time.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.GetObjectBelowCursorAsync">
            <summary>
            Gets the scene object below the cursor.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.GetObjectsBelowCursorAsync">
            <summary>
            Gets all objects that are below the cursor.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.SaveScreenshotAsync(System.String)">
            <summary>
            Saves a screenshot to harddisc.
            </summary>
            <param name="targetFile">Target file path.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.SaveScreenshotAsync(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves a screenshot to harddisc.
            </summary>
            <param name="targetFile">Target file path.</param>
            <param name="imageFormat">Target file format.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when system wants to paint this panel.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.UpdateMovement">
            <summary>
            Updates the movement.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.StartRendering">
            <summary>
            Stops rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.StopRendering">
            <summary>
            Stops rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.UpdateDrawingResourcesForFailoverRendering">
            <summary>
            Updates the background brush used for failover rendering in System.Drawing.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnBackColorChanged(System.EventArgs)">
            <summary>
            Called when BackColor property has changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Called when the size of the viewport has changed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnHandleCreated(System.EventArgs)">
            <summary>
            Called when the window handle is created.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Called when the window handle is destroyed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnVisibleChanged(System.EventArgs)">
            <summary>
            Handle changed control visibility.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnDisposed(System.Object,System.EventArgs)">
            <summary>
            Called when this view gets disposed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_CreateViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Create all view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_DisposeViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Disposes all loaded view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_CheckCanRender(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop object checks wheter it is possible to render.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_PrepareRendering(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when the render loop prepares rendering.
            </summary>
            <param name="device">The current rendering device.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_Present(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop wants to present its results.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_AfterRendering(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop has finished rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoop_QueryInputStates">
            <summary>
            Queries all input states.
            (Called within UI thread)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoopCameraChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the currently active camera has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnThrottledViewRecreation">
            <summary>
            Called when the control has changed its size.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnMouseEnter(System.EventArgs)">
            <summary>
            Called when the mouse is inside the area of this control.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnMouseLeave(System.EventArgs)">
            <summary>
            Called when the mouse is outside the area of this control.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.OnRenderLoopManipulateFilterList(System.Object,SeeingSharp.Multimedia.Core.ManipulateFilterListArgs)">
            <summary>
            Called when RenderLoop allows it to manipulate current filter list.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The decimal.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.DiscardRendering">
            <summary>
            Discard rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.DiscardPresent">
            <summary>
            Discard present of rendering results on the screen?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.ViewConfiguration">
            <summary>
            Gets the view configuration.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.RenderLoop">
            <summary>
            Gets the render loop object.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererControl.BackColor">
            <summary>
            Ruft die Hintergrundfarbe für das Steuerelement ab oder legt diese fest.
            </summary>
            <returns>Eine <see cref="T:System.Drawing.Color" />, die die Hintergrundfarbe des Steuerelements darstellt. Der Standardwert ist der Wert der <see cref="P:System.Windows.Forms.Control.DefaultBackColor" />-Eigenschaft.</returns>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Called when the render size has changed.
            </summary>
            <param name="sizeInfo">New size information.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.IsInDesignMode">
            <summary>
            Is this object in design mode?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.GetDpiScaling">
            <summary>
            Gets the current DpiScaling mode.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_DisposeViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Disposes all loaded view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_CreateViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Create all view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_CheckCanRender(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop object checks wheter it is possible to render.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_PrepareRendering(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when the render loop prepares rendering.
            </summary>
            <param name="engineDevice">The engine device.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_Present(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop wants to present its results.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_AfterRendering(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop has finished rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnRenderLoop_QueryInputStates">
            <summary>
            Queries all input states.
            (Called within UI thread)
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the image is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnSystemEvents_SessionSwitch(System.Object,Microsoft.Win32.SessionSwitchEventArgs)">
            <summary>
            Called when the current session was switched.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Microsoft.Win32.SessionSwitchEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when one of the dependency properties has changed.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnThrottledSizeChanged">
            <summary>
            Called when size changed event occurred.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the image is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.DiscardRendering">
            <summary>
            Discard rendering?
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.Scene">
            <summary>
            Gets or sets the currently applied scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.DrawingLayer2D">
            <summary>
            Gets or sets the custom layer for 2D rendering.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.RenderLoop">
            <summary>
            Gets the RenderLoop that is currently in use.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.SeeingSharpRendererElement.Focused">
            <summary>
            Does the target control have focus?
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.#ctor(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Views.HigherD3DImageSource"/> class.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.InvalidateD3DImage">
            <summary>
            Invalidates the direct3D image.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.SetRenderTarget(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Sets the render target of this D3DImage object.
            </summary>
            <param name="renderTarget">The render target to set.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.GetSharedHandle(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Gets the handle that can be used for resource sharing.
            </summary>
            <param name="Texture">The texture to be shared.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.TranslateFormat(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Gets the format for sharing.
            </summary>
            <param name="Texture">The texture to get the format for.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.HigherD3DImageSource.IsShareable(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Is the given texture sharable?
            </summary>
            <param name="textureToCheck">The checker to check.</param>
        </member>
        <member name="E:SeeingSharp.Multimedia.Views.MemoryRenderTarget.BeforeRender">
            <summary>
            Raises before the render target starts rendering.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.#ctor(System.Int32,System.Int32,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SeeingSharp.Multimedia.Views.MemoryRenderTarget" /> class.
            </summary>
            <param name="pixelHeight">Height of the offline render target in pixels.</param>
            <param name="pixelWidth">Width of the offline render target in pixels.</param>
            <param name="syncContext">Sets the SynchronizationContext which should be used by default.</param>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.AwaitRenderAsync">
            <summary>
            Awaits next render.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.Dispose">
            <summary>
            Führt anwendungsspezifische Aufgaben aus, die mit dem Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.OnRenderLoopDisposeViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Disposes all loaded view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.OnRenderLoopCreateViewResources(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Create all view resources.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.OnRenderLoopCheckCanRender(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop object checks wheter it is possible to render.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.OnRenderLoopPresent(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop wants to present its results.
            </summary>
        </member>
        <member name="M:SeeingSharp.Multimedia.Views.MemoryRenderTarget.OnRenderLoopAfterRendering(SeeingSharp.Multimedia.Core.EngineDevice)">
            <summary>
            Called when RenderLoop has finished rendering.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MemoryRenderTarget.Scene">
            <summary>
            Gets or sets the scene.
            </summary>
        </member>
        <member name="P:SeeingSharp.Multimedia.Views.MemoryRenderTarget.RenderLoop">
            <summary>
            Gets the renderloop object.
            </summary>
        </member>
    </members>
</doc>
