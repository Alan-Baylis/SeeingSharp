//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float Opacity;                     // Offset:    0 Size:     4
//   float2 ScreenPixelSize;            // Offset:    4 Size:     8
//   float Thickness;                   // Offset:   12 Size:     4
//   float Threshold;                   // Offset:   16 Size:     4
//   float3 BorderColor;                // Offset:   20 Size:    12
//   float OriginalColorAlpha;          // Offset:   32 Size:     4
//   float3 Dummy;                      // Offset:   36 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SpriteTextureSampler              sampler      NA          NA    0        1
// SpriteTexture                     texture  float4          2d    0        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TexCoord                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb2             0         3  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c3, -0.00999999978, 0, -2, 2
    def c4, 1, 0, 0, 0
    dcl t0.xy  // input<4,5>
    dcl_2d s0

#line 36 "D:\Projects\GitHub\RolandKoenig\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Postprocessing\PostprocessEdgeDetect.hlsl"
    texld r0, t0, s0  // ::outputColor<0,1,2,3>
    min r1.w, r0.w, c0.x  // ::outputColor<3>
    add r1, r1.w, c3.x

#line 48
    rcp r0.w, c0.y
    mul r2.z, r0.w, c0.w  // ::ox<0>
    rcp r0.w, c0.z
    mul r2.y, r0.w, c0.w  // ::oy<1>

#line 52
    mov r2.xw, c3.y
    add r3.xy, -r2, t0  // ::PP<0,1>

#line 59
    add r2.xy, r2, t0  // ::PP<0,1>

#line 52
    add r4.xy, -r2.zwzw, r3

#line 38
    texkill r1

#line 52
    texld r1, r4, s0  // ::CC<3>
    add r1.xy, r2.zwzw, r3
    texld r4, r1, s0  // ::CC<3>
    texld r3, r3, s0  // ::CC<3>

#line 75
    mad r0.w, r3.w, c3.z, -r1.w  // ::sx<0>

#line 85
    add r1.x, -r1.w, r4.w  // ::sy<0>

#line 76
    add r0.w, -r4.w, r0.w  // ::sx<0>

#line 56
    add r3.xy, -r2.zwzw, t0
    add r4.xy, r2.zwzw, t0
    texld r3, r3, s0  // ::CC<3>
    texld r4, r4, s0  // ::CC<3>

#line 86
    mad r1.x, r3.w, c3.z, r1.x  // ::sy<0>
    mad r1.x, r4.w, c3.w, r1.x  // ::sy<0>

#line 60
    add r3.xy, -r2.zwzw, r2
    add r4.xy, r2.zwzw, r2
    texld r3, r3, s0  // ::CC<3>
    texld r4, r4, s0  // ::CC<3>
    texld r2, r2, s0  // ::CC<3>

#line 89
    add r1.x, r1.x, -r3.w  // ::sy<0>

#line 80
    add r0.w, r0.w, r3.w  // ::sx<0>
    mad r0.w, r2.w, c3.w, r0.w  // ::sx<0>
    add r0.w, r4.w, r0.w  // ::sx<0>

#line 91
    add r1.x, r4.w, r1.x  // ::sy<0>
    mul r1.x, r1.x, r1.x
    mad r0.w, r0.w, r0.w, r1.x
    rsq r0.w, r0.w
    rcp r0.w, r0.w  // ::dist<0>
    add r0.w, -r0.w, c1.x

#line 108
    cmp r1.xyz, r0.w, r0, c1.yzww  // ::main<0,1,2>
    mov r0.x, c2.x  // cbPerObject::OriginalColorAlpha<0>
    cmp r1.w, r0.w, r0.x, c4.x  // ::main<3>
    mov oC0, r1  // ::main<0,1,2,3>

// approximately 44 instruction slots used (9 texture, 35 arithmetic)
ps_4_0
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
//
// Initial variable locations:
//   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
//   v1.x <- input.tex.x; v1.y <- input.tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 36 "D:\Projects\GitHub\RolandKoenig\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Postprocessing\PostprocessEdgeDetect.hlsl"
sample r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- outputColor.x; r0.y <- outputColor.y; r0.z <- outputColor.z; r0.w <- outputColor.w
min r0.w, r0.w, cb2[0].x
add r0.w, r0.w, l(-0.010000)
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w

#line 49
div r1.xy, cb2[0].wwww, cb2[0].yzyy  // r1.x <- ox.x; r1.y <- oy.y
mov r1.z, l(0)

#line 56
add r2.xyzw, -r1.zyxz, v1.xyxy  // r2.x <- PP.x; r2.y <- PP.y

#line 52
add r3.xy, -r1.xzxx, r2.xyxx
sample r3.xyzw, r3.xyxx, t0.xyzw, s0  // r3.w <- CC.w
sample r4.xyzw, r2.xyxx, t0.xyzw, s0  // r4.w <- CC.w
add r2.xy, r1.xzxx, r2.xyxx
sample r5.xyzw, r2.xyxx, t0.xyzw, s0  // r5.w <- CC.w
sample r2.xyzw, r2.zwzz, t0.xyzw, s0  // r2.w <- CC.w

#line 59
add r6.xyzw, r1.xzzy, v1.xyxy  // r6.z <- PP.x; r6.w <- PP.y
sample r7.xyzw, r6.xyxx, t0.xyzw, s0  // r7.w <- CC.w
add r1.yw, -r1.xxxz, r6.zzzw
sample r8.xyzw, r1.ywyy, t0.xyzw, s0  // r8.w <- CC.w
sample r9.xyzw, r6.zwzz, t0.xyzw, s0  // r9.w <- CC.w
add r1.xy, r1.xzxx, r6.zwzz
sample r1.xyzw, r1.xyxx, t0.xyzw, s0  // r1.w <- CC.w

#line 75
mad r0.w, r4.w, l(-2.000000), -r3.w  // r0.w <- sx
add r0.w, -r5.w, r0.w

#line 80
add r0.w, r8.w, r0.w
mad r0.w, r9.w, l(2.000000), r0.w
add r0.w, r1.w, r0.w

#line 85
add r1.x, -r3.w, r5.w  // r1.x <- sy
mad r1.x, r2.w, l(-2.000000), r1.x
mad r1.x, r7.w, l(2.000000), r1.x
add r1.x, -r8.w, r1.x
add r1.x, r1.w, r1.x
mul r1.x, r1.x, r1.x
mad r0.w, r0.w, r0.w, r1.x
sqrt r0.w, r0.w  // r0.w <- dist
lt r0.w, cb2[1].x, r0.w
if_z r0.w

#line 100
  mov o0.xyz, r0.xyzx
  mov o0.w, cb2[2].x
  ret 
endif 

#line 108
mov o0.xyz, cb2[1].yzwy  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z
mov o0.w, l(1.000000)  // o0.w <- <main return value>.w
ret 
// Approximately 43 instruction slots used
