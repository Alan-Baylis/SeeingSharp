//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float BlurIntensity;               // Offset:    0 Size:     4
//   float BlurOpacity;                 // Offset:    4 Size:     4
//   float2 Dummy2;                     // Offset:    8 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SpriteTextureSampler              sampler      NA          NA    0        1
// SpriteTexture                     texture  float4          2d    0        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TexCoord                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
//   v1.x <- input.tex.x; v1.y <- input.tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 28 "D:\Projects\GitHub\RolandKoenig\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Postprocessing\PostprocessBlur.hlsl"
mad_sat r0.xyzw, cb2[0].yyyy, l(0.002000, 0.004000, 0.003000, 0.003000), v1.xxxy
mov r1.xz, r0.yyzy
mad_sat r2.xyzw, -cb2[0].yyyy, l(0.004000, 0.003000, 0.002000, 0.003000), v1.yyyx
mov r1.yw, r2.xxxy
mov r0.yz, r2.zzwz
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s0
mul r2.xyzw, r2.xyzw, l(0.200000, 0.200000, 0.200000, 0.200000)
mad r1.xyzw, r1.xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r2.xyzw  // r1.x <- outputColor.x; r1.y <- outputColor.y; r1.z <- outputColor.z; r1.w <- outputColor.w
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.zwzz, t0.xyzw, s0
mad r1.xyzw, r2.xyzw, l(0.400000, 0.400000, 0.400000, 0.400000), r1.xyzw
mad r0.xyzw, r0.xyzw, l(0.200000, 0.200000, 0.200000, 0.200000), r1.xyzw  // r0.x <- outputColor.x; r0.y <- outputColor.y; r0.z <- outputColor.z; r0.w <- outputColor.w
mad_sat r1.x, -cb2[0].y, l(0.004000), v1.x
mad_sat r1.y, cb2[0].y, l(0.004000), v1.y
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.xyzw, r1.xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw

#line 21
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0  // r1.x <- textureColor.x; r1.y <- textureColor.y; r1.z <- textureColor.z; r1.w <- textureColor.w

#line 32
add r2.x, -cb2[0].x, l(1.000000)
mul r1.xyzw, r1.xyzw, r2.xxxx
mad r0.xyzw, r0.xyzw, cb2[0].xxxx, r1.xyzw
min o0.w, r0.w, cb2[0].y

#line 36
mov o0.xyz, r0.xyzx
ret 
// Approximately 24 instruction slots used
