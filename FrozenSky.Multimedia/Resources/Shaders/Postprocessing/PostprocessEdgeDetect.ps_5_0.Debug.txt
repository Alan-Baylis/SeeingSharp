//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float Opacity;                     // Offset:    0 Size:     4
//   float2 ScreenPixelSize;            // Offset:    4 Size:     8
//   float Thickness;                   // Offset:   12 Size:     4
//   float Threshold;                   // Offset:   16 Size:     4
//   float3 BorderColor;                // Offset:   20 Size:    12
//   float OriginalColorAlpha;          // Offset:   32 Size:     4
//   float3 Dummy;                      // Offset:   36 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SpriteTextureSampler              sampler      NA          NA    0        1
// SpriteTexture                     texture  float4          2d    0        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TexCoord                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
//   v1.x <- input.tex.x; v1.y <- input.tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 36 "G:\GitHub\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Postprocessing\PostprocessEdgeDetect.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- outputColor.x; r0.y <- outputColor.y; r0.z <- outputColor.z; r0.w <- outputColor.w
min r0.w, r0.w, cb2[0].x
add r0.w, r0.w, l(-0.010000)
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w

#line 49
div r1.xy, cb2[0].wwww, cb2[0].yzyy  // r1.x <- ox.x; r1.y <- oy.y
mov r1.z, l(0)

#line 56
add r2.xyzw, -r1.zyxz, v1.xyxy  // r2.x <- PP.x; r2.y <- PP.y

#line 52
add r3.xy, -r1.xzxx, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xyzw, s0  // r0.w <- CC.w
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t0.xyzw, s0  // r1.w <- CC.w
add r2.xy, r1.xzxx, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t0.wxyz, s0  // r2.x <- CC.w
sample_indexable(texture2d)(float,float,float,float) r2.y, r2.zwzz, t0.xwyz, s0  // r2.y <- CC.w

#line 59
add r3.xyzw, r1.xzzy, v1.xyxy  // r3.z <- PP.x; r3.w <- PP.y
sample_indexable(texture2d)(float,float,float,float) r1.y, r3.xyxx, t0.xwyz, s0  // r1.y <- CC.w
add r2.zw, -r1.xxxz, r3.zzzw
sample_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t0.xywz, s0  // r2.z <- CC.w
sample_indexable(texture2d)(float,float,float,float) r2.w, r3.zwzz, t0.xyzw, s0  // r2.w <- CC.w
add r1.xz, r1.xxzx, r3.zzwz
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xzxx, t0.wxyz, s0  // r1.x <- CC.w

#line 75
mad r1.z, r1.w, l(-2.000000), -r0.w  // r1.z <- sx
add r1.z, -r2.x, r1.z

#line 80
add r1.z, r2.z, r1.z
mad r1.z, r2.w, l(2.000000), r1.z
add r1.z, r1.x, r1.z

#line 85
add r0.w, -r0.w, r2.x  // r0.w <- sy
mad r0.w, r2.y, l(-2.000000), r0.w
mad r0.w, r1.y, l(2.000000), r0.w
add r0.w, -r2.z, r0.w
add r0.w, r1.x, r0.w
mul r0.w, r0.w, r0.w
mad r0.w, r1.z, r1.z, r0.w
sqrt r0.w, r0.w  // r0.w <- dist
lt r0.w, cb2[1].x, r0.w
if_z r0.w

#line 100
  mov o0.xyz, r0.xyzx
  mov o0.w, cb2[2].x
  ret 
endif 

#line 108
mov o0.xyz, cb2[1].yzwy  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z
mov o0.w, l(1.000000)  // o0.w <- <main return value>.w
ret 
// Approximately 43 instruction slots used
