//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   int Time;                          // Offset:    0 Size:     4 [unused]
//   float3 Dummy1;                     // Offset:    4 Size:    12 [unused]
//
// }
//
// cbuffer cbPerView
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64 [unused]
//   float3 CameraPosition;             // Offset:   64 Size:    12 [unused]
//   float GradientFactor;              // Offset:   76 Size:     4 [unused]
//   float BorderFactor;                // Offset:   80 Size:     4 [unused]
//   float LightPower;                  // Offset:   84 Size:     4 [unused]
//   float StrongLightFactor;           // Offset:   88 Size:     4 [unused]
//   float Ambient;                     // Offset:   92 Size:     4 [unused]
//   float Accentuation;                // Offset:   96 Size:     4 [unused]
//   float2 ScreenPixelSize;            // Offset:  100 Size:     8
//   float Dummy;                       // Offset:  108 Size:     4 [unused]
//
// }
//
// cbuffer cbPerObject
// {
//
//   float4x4 World;                    // Offset:    0 Size:    64 [unused]
//   float4 ObjectColor;                // Offset:   64 Size:    16 [unused]
//   float BorderPart;                  // Offset:   80 Size:     4 [unused]
//   float BorderMultiplyer;            // Offset:   84 Size:     4 [unused]
//   float Opacity;                     // Offset:   88 Size:     4
//   float ObjectAccentuationFactor;    // Offset:   92 Size:     4 [unused]
//   float3 ObjectScaling;              // Offset:   96 Size:    12 [unused]
//   float SpriteScaling;               // Offset:  108 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ObjectTextureSampler              sampler      NA          NA    0        1
// ObjectTexture                     texture  float4          2d    0        1
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerView                         cbuffer      NA          NA    1        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 3     z         2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb1             6         1  ( FLT, FLT, FLT, FLT)
// c1         cb2             5         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
    def c2, 1, -0.00999999978, 0.5, -0
    def c3, 0.333330005, -2, 2, 0.200000003
    def c4, 1, 0, -0.100000001, 0.899999976
    dcl t1.xyz
    dcl_2d s0
    mov r0.x, c2.w
    rcp r0.z, c0.z
    mul r0.w, r0.z, c2.z
    mad r1.y, r0.z, c2.z, t1.y
    mov r0.y, -r0.w
    add r0.xy, r0, t1
    rcp r0.z, c0.y
    mul r2.x, r0.z, c2.z
    mov r2.y, -c2.w
    add r3.xy, r0, -r2
    add r4.xy, r0, r2
    add r5.xy, -r2, t1
    add r6.xy, r2, t1
    mov r1.x, t1.x
    add r7.xy, r1, -r2
    add r2.xy, r1, r2
    texld r8, t1, s0
    texld r3, r3, s0
    texld r0, r0, s0
    texld r4, r4, s0
    texld r5, r5, s0
    texld r6, r6, s0
    texld r1, r1, s0
    texld r2, r2, s0
    texld r7, r7, s0
    add r0.w, -r8.x, c2.x
    min r1.w, r0.w, c1.z
    add r8, r1.w, c2.y
    dp3 r0.w, r3, c3.x
    dp3 r1.w, r0, c3.x
    mad r1.w, r1.w, c3.y, -r0.w
    dp3 r2.w, r4, c3.x
    add r5.w, -r0.w, r2.w
    add r1.w, r1.w, -r2.w
    dp3 r2.w, r5, c3.x
    mad r2.w, r2.w, c3.y, r5.w
    dp3 r7.w, r6, c3.x
    mad r2.w, r7.w, c3.z, r2.w
    dp3 r7.w, r1, c3.x
    dp3 r0.x, r2, c3.x
    dp3 r0.y, r7, c3.x
    add r0.z, -r0.y, r2.w
    add r0.y, r0.y, r1.w
    mad r0.y, r7.w, c3.z, r0.y
    add r0.y, r0.x, r0.y
    add r0.x, r0.x, r0.z
    mul r0.x, r0.x, r0.x
    mad r0.x, r0.y, r0.y, r0.x
    rsq r0.x, r0.x
    rcp r0.x, r0.x
    add r0.x, -r0.x, c3.w
    cmp r1, r0.x, c4.z, c4.w
    texkill r8
    texkill r1
    cmp r1.xyz, r0.x, c4.x, c4.y
    cmp r1.w, r0.x, c4.y, c4.x
    mov oC0, r1

// approximately 57 instruction slots used (9 texture, 48 arithmetic)
ps_4_0
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 4
sample r0.xyzw, v2.xyxx, t0.xyzw, s0
add r0.x, -r0.x, l(1.000000)
min r0.x, r0.x, cb2[5].z
add r0.x, r0.x, l(-0.010000)
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
div r0.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb1[6].yzyy
mov r0.z, l(0)
add r1.xyzw, -r0.zyxz, v2.xyxy
add r2.xy, -r0.xzxx, r1.xyxx
sample r2.xyzw, r2.xyxx, t0.xyzw, s0
dp3 r0.w, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
add r2.xy, r0.xzxx, r1.xyxx
sample r2.xyzw, r2.xyxx, t0.xyzw, s0
dp3 r2.x, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
add r2.y, -r0.w, r2.x
sample r3.xyzw, r1.zwzz, t0.xyzw, s0
sample r1.xyzw, r1.xyxx, t0.xyzw, s0
dp3 r1.x, r1.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
mad r0.w, r1.x, l(-2.000000), -r0.w
add r0.w, -r2.x, r0.w
dp3 r1.x, r3.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
mad r1.x, r1.x, l(-2.000000), r2.y
add r2.xyzw, r0.xzzy, v2.xyxy
sample r3.xyzw, r2.xyxx, t0.xyzw, s0
dp3 r0.y, r3.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
mad r0.y, r0.y, l(2.000000), r1.x
add r1.xy, -r0.xzxx, r2.zwzz
add r0.xz, r0.xxzx, r2.zzwz
sample r2.xyzw, r2.zwzz, t0.xyzw, s0
dp3 r1.z, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
sample r2.xyzw, r0.xzxx, t0.xyzw, s0
dp3 r0.x, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
dp3 r0.z, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)
add r0.y, -r0.z, r0.y
add r0.z, r0.z, r0.w
mad r0.z, r1.z, l(2.000000), r0.z
add r0.z, r0.x, r0.z
add r0.x, r0.x, r0.y
mul r0.x, r0.x, r0.x
mad r0.x, r0.z, r0.z, r0.x
sqrt r0.x, r0.x
lt r0.x, l(0.200000), r0.x
discard_z r0.x
movc o0.xyz, r0.xxxx, l(0,0,0,0), l(1.000000,1.000000,1.000000,0)
and o0.w, r0.x, l(0x3f800000)
ret 
// Approximately 48 instruction slots used
