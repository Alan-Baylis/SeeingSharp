//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   int Time;                          // Offset:    0 Size:     4 [unused]
//   float3 Dummy1;                     // Offset:    4 Size:    12 [unused]
//
// }
//
// cbuffer cbPerMaterial
// {
//
//   float4 MaterialColor;              // Offset:    0 Size:    16 [unused]
//   float4 TextureReciprocal;          // Offset:   16 Size:    16
//   float Texture0Factor;              // Offset:   32 Size:     4 [unused]
//   float MaxClipDistance;             // Offset:   36 Size:     4 [unused]
//   float ClipFactor;                  // Offset:   40 Size:     4 [unused]
//   float AdjustTextureCoordinatesFactor;// Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ObjectTextureSampler              sampler      NA          NA    0        1
// ObjectTexture                     texture  float4          2d    0        1
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerMaterial                     cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- Input.Pos.x; v0.y <- Input.Pos.y; v0.z <- Input.Pos.z; v0.w <- Input.Pos.w; 
//   v1.x <- Input.Tex.x; v1.y <- Input.Tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 144 "D:\Projects\GitHub\RolandKoenig\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Sprite\SpriteFxaaShader.hlsl"
sample_l_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <FxaaTexOff return value>.x; r0.y <- <FxaaTexOff return value>.y; r0.z <- <FxaaTexOff return value>.z
sample_l_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r1.x <- <FxaaTexOff return value>.x; r1.y <- <FxaaTexOff return value>.y; r1.z <- <FxaaTexOff return value>.z
sample_l_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r2.x <- <FxaaTexOff return value>.x; r2.y <- <FxaaTexOff return value>.y; r2.z <- <FxaaTexOff return value>.z
sample_l_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r3.x <- <FxaaTexOff return value>.x; r3.y <- <FxaaTexOff return value>.y; r3.z <- <FxaaTexOff return value>.z
sample_l_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r4.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r4.x <- <FxaaTexOff return value>.x; r4.y <- <FxaaTexOff return value>.y; r4.z <- <FxaaTexOff return value>.z

#line 333
mad r0.w, r0.y, l(1.963211), r0.x  // r0.w <- <FxaaLuma return value>
mad r1.w, r1.y, l(1.963211), r1.x  // r1.w <- <FxaaLuma return value>
mad r2.w, r2.y, l(1.963211), r2.x  // r2.w <- <FxaaLuma return value>
mad r3.w, r3.y, l(1.963211), r3.x  // r3.w <- <FxaaLuma return value>
mad r4.w, r4.y, l(1.963211), r4.x  // r4.w <- <FxaaLuma return value>

#line 407
min r5.x, r0.w, r1.w
min r5.y, r3.w, r4.w
min r5.x, r5.y, r5.x
min r5.x, r2.w, r5.x  // r5.x <- rangeMin
max r5.y, r0.w, r1.w
max r5.z, r3.w, r4.w
max r5.y, r5.z, r5.y
max r5.y, r2.w, r5.y  // r5.y <- rangeMax
add r5.x, -r5.x, r5.y  // r5.x <- range

#line 413
mul r5.y, r5.y, l(0.125000)
max r5.y, r5.y, l(0.041667)

#line 423
ge r5.y, r5.x, r5.y
if_nz r5.y
  add r0.xyz, r0.xyzx, r1.xyzx
  add r0.xyz, r2.xyzx, r0.xyzx
  add r0.xyz, r3.xyzx, r0.xyzx
  add r0.xyz, r4.xyzx, r0.xyzx  // r0.x <- rgbL.x; r0.y <- rgbL.y; r0.z <- rgbL.z

#line 442
  add r1.x, r0.w, r1.w
  add r1.x, r3.w, r1.x
  add r1.x, r4.w, r1.x
  mad r1.x, r1.x, l(0.250000), -r2.w

#line 446
  div r1.x, |r1.x|, r5.x
  add r1.x, r1.x, l(-0.250000)
  max r1.x, r1.x, l(0.000000)
  mul r1.x, r1.x, l(1.333333)  // r1.x <- blendL
  min r1.x, r1.x, l(0.750000)

#line 144
  sample_l_aoffimmi_indexable(-1,-1,0)(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r3.x <- <FxaaTexOff return value>.x; r3.y <- <FxaaTexOff return value>.y; r3.z <- <FxaaTexOff return value>.z
  sample_l_aoffimmi_indexable(1,-1,0)(texture2d)(float,float,float,float) r4.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r4.x <- <FxaaTexOff return value>.x; r4.y <- <FxaaTexOff return value>.y; r4.z <- <FxaaTexOff return value>.z
  sample_l_aoffimmi_indexable(-1,1,0)(texture2d)(float,float,float,float) r5.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r5.x <- <FxaaTexOff return value>.x; r5.y <- <FxaaTexOff return value>.y; r5.z <- <FxaaTexOff return value>.z
  sample_l_aoffimmi_indexable(1,1,0)(texture2d)(float,float,float,float) r6.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r6.x <- <FxaaTexOff return value>.x; r6.y <- <FxaaTexOff return value>.y; r6.z <- <FxaaTexOff return value>.z

#line 487
  add r7.xyz, r3.xyzx, r4.xyzx
  add r7.xyz, r5.xyzx, r7.xyzx
  add r7.xyz, r6.xyzx, r7.xyzx
  add r0.xyz, r0.xyzx, r7.xyzx
  mul r0.xyz, r1.xxxx, r0.xyzx

#line 333
  mad r1.y, r3.y, l(1.963211), r3.x  // r1.y <- <FxaaLuma return value>
  mad r1.z, r4.y, l(1.963211), r4.x  // r1.z <- <FxaaLuma return value>
  mad r3.x, r5.y, l(1.963211), r5.x  // r3.x <- <FxaaLuma return value>
  mad r3.y, r6.y, l(1.963211), r6.x  // r3.y <- <FxaaLuma return value>

#line 498
  mul r3.z, r0.w, l(-0.500000)

#line 494
  mad r3.z, r1.y, l(0.250000), r3.z
  mad r3.z, r1.z, l(0.250000), r3.z

#line 498
  mul r4.x, r1.w, l(-0.500000)

#line 494
  mad r4.y, r1.w, l(0.500000), -r2.w

#line 498
  mul r4.z, r3.w, l(-0.500000)

#line 494
  mad r4.y, r3.w, l(0.500000), r4.y
  add r3.z, |r3.z|, |r4.y|

#line 498
  mul r4.y, r4.w, l(-0.500000)

#line 494
  mad r4.y, r3.x, l(0.250000), r4.y
  mad r4.y, r3.y, l(0.250000), r4.y
  add r3.z, r3.z, |r4.y|  // r3.z <- edgeVert

#line 498
  mad r1.y, r1.y, l(0.250000), r4.x
  mad r1.y, r3.x, l(0.250000), r1.y
  mad r3.x, r0.w, l(0.500000), -r2.w
  mad r3.x, r4.w, l(0.500000), r3.x
  add r1.y, |r1.y|, |r3.x|
  mad r1.z, r1.z, l(0.250000), r4.z
  mad r1.z, r3.y, l(0.250000), r1.z
  add r1.y, |r1.z|, r1.y  // r1.y <- edgeHorz

#line 502
  ge r1.y, r1.y, r3.z  // r1.y <- horzSpan

#line 507
  movc r1.z, r1.y, -cb3[1].y, -cb3[1].x  // r1.z <- lengthSign
  movc r0.w, r1.y, r0.w, r1.w  // r0.w <- lumaN
  movc r1.w, r1.y, r4.w, r3.w  // r1.w <- lumaS
  add r3.x, -r2.w, r0.w
  add r3.y, -r2.w, r1.w
  add r0.w, r2.w, r0.w
  mul r0.w, r0.w, l(0.500000)  // r0.w <- lumaN
  add r1.w, r2.w, r1.w
  mul r1.w, r1.w, l(0.500000)  // r1.w <- lumaS

#line 533
  ge r3.z, |r3.x|, |r3.y|  // r3.z <- pairN

#line 538
  movc r0.w, r3.z, r0.w, r1.w
  movc r1.w, r3.z, |r3.x|, |r3.y|  // r1.w <- gradientN
  movc r1.z, r3.z, r1.z, -r1.z
  mul r3.x, r1.z, l(0.500000)
  movc r3.y, r1.y, l(0), r3.x
  and r3.x, r1.y, r3.x
  add r4.xy, r3.yxyy, v1.xyxx  // r4.x <- posN.x; r4.y <- posN.y

#line 550
  mul r1.w, r1.w, l(0.250000)

#line 563
  mov r3.yz, l(0,0,0,0)
  mov r3.xw, cb3[1].xxxy
  movc r3.xy, r1.yyyy, r3.xyxx, r3.zwzz  // r3.x <- offNP.x; r3.y <- offNP.y

#line 571
  add r3.zw, -r3.xxxy, r4.xxxy  // r3.z <- posN.x; r3.w <- posN.y
  add r4.xy, r3.xyxx, r4.xyxx  // r4.x <- posP.x; r4.y <- posP.y

#line 589
  mov r4.zw, r3.zzzw  // r4.z <- posN.x; r4.w <- posN.y
  mov r5.xy, r4.xyxx  // r5.x <- posP.x; r5.y <- posP.y
  mov r5.zw, r0.wwww  // r5.z <- lumaEndN; r5.w <- lumaEndP
  mov r6.xyz, l(0,0,0,0)  // r6.x <- doneN; r6.y <- doneP; r6.z <- i
  loop 
    ige r6.w, r6.z, l(16)
    breakc_nz r6.w
    if_z r6.x

#line 114
      sample_l_indexable(texture2d)(float,float,float,float) r7.xy, r4.zwzz, t0.xyzw, s0, l(0.000000)  // r7.x <- <FxaaTexLod0 return value>.x; r7.y <- <FxaaTexLod0 return value>.y

#line 333
      mad r6.w, r7.y, l(1.963211), r7.x  // r6.w <- <FxaaLuma return value>

#line 592
    else 
      mov r6.w, r5.z
    endif 
    if_z r6.y

#line 114
      sample_l_indexable(texture2d)(float,float,float,float) r7.xy, r5.xyxx, t0.xyzw, s0, l(0.000000)  // r7.x <- <FxaaTexLod0 return value>.x; r7.y <- <FxaaTexLod0 return value>.y

#line 333
      mad r7.x, r7.y, l(1.963211), r7.x  // r7.x <- <FxaaLuma return value>

#line 594
    else 
      mov r7.x, r5.w
    endif 

#line 601
    add r7.y, -r0.w, r6.w
    ge r7.y, |r7.y|, r1.w
    or r6.x, r6.x, r7.y
    add r7.y, -r0.w, r7.x
    ge r7.y, |r7.y|, r1.w
    or r6.y, r6.y, r7.y
    and r7.y, r6.y, r6.x
    if_nz r7.y
      mov r5.z, r6.w  // r5.z <- lumaEndN
      mov r5.w, r7.x  // r5.w <- lumaEndP
      break 
    endif 
    add r7.yz, -r3.xxyx, r4.zzwz  // r7.y <- posN.x; r7.z <- posN.y
    movc r4.zw, r6.xxxx, r4.zzzw, r7.yyyz  // r4.z <- posN.x; r4.w <- posN.y
    add r7.yz, r3.xxyx, r5.xxyx  // r7.y <- posP.x; r7.z <- posP.y
    movc r5.xy, r6.yyyy, r5.xyxx, r7.yzyy  // r5.x <- posP.x; r5.y <- posP.y

#line 589
    iadd r6.z, r6.z, l(1)

#line 605
    mov r5.z, r6.w  // r5.z <- lumaEndN
    mov r5.w, r7.x  // r5.w <- lumaEndP
  endloop 

#line 625
  add r3.xy, -r4.zwzz, v1.xyxx
  movc r1.w, r1.y, r3.x, r3.y  // r1.w <- dstN
  add r3.xy, r5.xyxx, -v1.xyxx
  movc r3.x, r1.y, r3.x, r3.y  // r3.x <- dstP
  lt r3.y, r1.w, r3.x  // r3.y <- directionN

#line 632
  movc r3.z, r3.y, r5.z, r5.w  // r3.z <- lumaEndN

#line 702
  add r2.w, -r0.w, r2.w
  lt r2.w, r2.w, l(0.000000)
  add r0.w, -r0.w, r3.z
  lt r0.w, r0.w, l(0.000000)
  ieq r0.w, r0.w, r2.w
  movc r0.w, r0.w, l(0), r1.z  // r0.w <- lengthSign

#line 753
  add r1.z, r1.w, r3.x  // r1.z <- spanLength
  movc r1.w, r3.y, r1.w, r3.x
  div r1.z, l(-1.000000), r1.z
  mad r1.z, r1.w, r1.z, l(0.500000)
  mul r0.w, r0.w, r1.z  // r0.w <- subPixelOffset

#line 773
  movc r1.z, r1.y, l(0), r0.w
  add r3.x, r1.z, v1.x
  and r0.w, r0.w, r1.y
  add r3.y, r0.w, v1.y

#line 114
  sample_l_indexable(texture2d)(float,float,float,float) r1.yzw, r3.xyxx, t0.wxyz, s0, l(0.000000)  // r1.y <- <FxaaTexLod0 return value>.x; r1.z <- <FxaaTexLod0 return value>.y; r1.w <- <FxaaTexLod0 return value>.z

#line 336
  mad r0.xyz, r0.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000), r1.yzwy
  mad r2.xyz, -r1.xxxx, r1.yzwy, r0.xyzx  // r2.x <- <FxaaLerp3 return value>.x; r2.y <- <FxaaLerp3 return value>.y; r2.z <- <FxaaLerp3 return value>.z

#line 779
endif   // r2.x <- <FxaaPixelShader return value>.x; r2.y <- <FxaaPixelShader return value>.y; r2.z <- <FxaaPixelShader return value>.z

#line 804
mov o0.xyz, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 160 instruction slots used
