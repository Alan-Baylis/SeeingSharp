//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   int Time;                          // Offset:    0 Size:     4 [unused]
//   float3 Dummy1;                     // Offset:    4 Size:    12 [unused]
//
// }
//
// cbuffer cbPerView
// {
//
//   float4x4 ViewProj;                 // Offset:    0 Size:    64 [unused]
//   float3 CameraPosition;             // Offset:   64 Size:    12 [unused]
//   float GradientFactor;              // Offset:   76 Size:     4 [unused]
//   float BorderFactor;                // Offset:   80 Size:     4 [unused]
//   float LightPower;                  // Offset:   84 Size:     4 [unused]
//   float StrongLightFactor;           // Offset:   88 Size:     4 [unused]
//   float Ambient;                     // Offset:   92 Size:     4 [unused]
//   float Accentuation;                // Offset:   96 Size:     4 [unused]
//   float2 ScreenPixelSize;            // Offset:  100 Size:     8
//   float Dummy;                       // Offset:  108 Size:     4 [unused]
//
// }
//
// cbuffer cbPerObject
// {
//
//   float4x4 World;                    // Offset:    0 Size:    64 [unused]
//   float4 ObjectColor;                // Offset:   64 Size:    16 [unused]
//   float BorderPart;                  // Offset:   80 Size:     4 [unused]
//   float BorderMultiplyer;            // Offset:   84 Size:     4 [unused]
//   float Opacity;                     // Offset:   88 Size:     4
//   float ObjectAccentuationFactor;    // Offset:   92 Size:     4 [unused]
//   float3 ObjectScaling;              // Offset:   96 Size:    12 [unused]
//   float SpriteScaling;               // Offset:  108 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ObjectTextureSampler              sampler      NA          NA    0        1
// ObjectTexture                     texture  float4          2d    0        1
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerView                         cbuffer      NA          NA    1        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 3     z         2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float       
// TEXCOORD                 2   xyz         4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.pos.x; v0.y <- input.pos.y; v0.z <- input.pos.z; v0.w <- input.pos.w; 
//   v1.x <- input.col.x; v1.y <- input.col.y; v1.z <- input.col.z; v1.w <- input.col.w; 
//   v2.x <- input.tex.x; v2.y <- input.tex.y; 
//   v3.x <- input.normal.x; v3.y <- input.normal.y; v3.z <- input.normal.z; 
//   v4.x <- input.pos3D.x; v4.y <- input.pos3D.y; v4.z <- input.pos3D.z; 
//   v2.z <- input.texFact; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 20 "D:\Projects\GitHub\RolandKoenig\FrozenSky\FrozenSky.Multimedia\Resources\Shaders\Sprite\SpriteEdgeDetectPixelShader.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.x, v2.xyxx, t0.xyzw, s0  // r0.x <- outputColor.x
add r0.x, -r0.x, l(1.000000)
min r0.x, r0.x, cb2[5].z  // r0.x <- outputColor.w
add r0.x, r0.x, l(-0.010000)
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x

#line 30
div r0.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb1[6].yzyy  // r0.x <- ox.x; r0.y <- oy.y
mov r0.z, l(0)

#line 37
add r1.xyzw, -r0.zyxz, v2.xyxy  // r1.x <- PP.x; r1.y <- PP.y

#line 33
add r2.xy, -r0.xzxx, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t0.xyzw, s0  // r2.x <- CC.x; r2.y <- CC.y; r2.z <- CC.z

#line 7
dp3 r0.w, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r0.w <- <getGray return value>

#line 35
add r2.xy, r0.xzxx, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t0.xyzw, s0  // r2.x <- CC.x; r2.y <- CC.y

#line 7
dp3 r2.x, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r2.x <- <getGray return value>

#line 66
add r2.y, -r0.w, r2.x  // r2.y <- sy

#line 37
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r1.zwzz, t0.xyzw, s0  // r3.x <- CC.x; r3.y <- CC.y; r3.z <- CC.z

#line 34
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0  // r1.x <- CC.x; r1.y <- CC.y; r1.z <- CC.z

#line 7
dp3 r1.x, r1.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r1.x <- <getGray return value>

#line 56
mad r0.w, r1.x, l(-2.000000), -r0.w  // r0.w <- sx
add r0.w, -r2.x, r0.w

#line 7
dp3 r1.x, r3.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)

#line 67
mad r1.x, r1.x, l(-2.000000), r2.y  // r1.x <- sy

#line 40
add r2.xyzw, r0.xzzy, v2.xyxy  // r2.z <- PP.x; r2.w <- PP.y
sample_indexable(texture2d)(float,float,float,float) r1.yzw, r2.xyxx, t0.wxyz, s0  // r1.y <- CC.x; r1.z <- CC.y; r1.w <- CC.z

#line 7
dp3 r0.y, r1.yzwy, l(0.333330, 0.333330, 0.333330, 0.000000)  // r0.y <- <getGray return value>

#line 69
mad r0.y, r0.y, l(2.000000), r1.x  // r0.y <- sy

#line 41
add r1.xy, -r0.xzxx, r2.zwzz
add r0.xz, r0.xxzx, r2.zzwz
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t0.xyzw, s0  // r2.x <- CC.x; r2.y <- CC.y; r2.z <- CC.z

#line 7
dp3 r1.z, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r1.z <- <getGray return value>

#line 43
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xzxx, t0.xyzw, s0

#line 7
dp3 r0.x, r2.xyzx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r0.x <- <getGray return value>

#line 41
sample_indexable(texture2d)(float,float,float,float) r1.xyw, r1.xyxx, t0.xywz, s0  // r1.x <- CC.x; r1.y <- CC.y; r1.w <- CC.z

#line 7
dp3 r0.z, r1.xywx, l(0.333330, 0.333330, 0.333330, 0.000000)  // r0.z <- <getGray return value>

#line 70
add r0.y, -r0.z, r0.y

#line 61
add r0.z, r0.z, r0.w  // r0.z <- sx
mad r0.z, r1.z, l(2.000000), r0.z
add r0.z, r0.x, r0.z

#line 72
add r0.x, r0.x, r0.y  // r0.x <- sy
mul r0.x, r0.x, r0.x
mad r0.x, r0.z, r0.z, r0.x
sqrt r0.x, r0.x  // r0.x <- dist
lt r0.x, l(0.200000), r0.x

#line 80
discard_z r0.x

#line 75
movc o0.xyz, r0.xxxx, l(0,0,0,0), l(1.000000,1.000000,1.000000,0)

#line 79
and o0.w, r0.x, l(0x3f800000)

#line 82
ret 
// Approximately 48 instruction slots used
