//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float Opacity;                     // Offset:    0 Size:     4
//   float2 ScreenPixelSize;            // Offset:    4 Size:     8
//   float Thickness;                   // Offset:   12 Size:     4
//   float Threshold;                   // Offset:   16 Size:     4
//   float3 BorderColor;                // Offset:   20 Size:    12
//   float OriginalColorAlpha;          // Offset:   32 Size:     4
//   float3 Dummy;                      // Offset:   36 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SpriteTextureSampler              sampler      NA          NA    0        1
// SpriteTexture                     texture  float4          2d    0        1
// cbPerObject                       cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TexCoord                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb2[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
sample r0.xyzw, v1.xyxx, t0.xyzw, s0
min r0.w, r0.w, cb2[0].x
add r0.w, r0.w, l(-0.010000)
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w
div r1.xy, cb2[0].wwww, cb2[0].yzyy
mov r1.z, l(0)
add r2.xyzw, -r1.zyxz, v1.xyxy
add r3.xy, -r1.xzxx, r2.xyxx
sample r3.xyzw, r3.xyxx, t0.xyzw, s0
sample r4.xyzw, r2.xyxx, t0.xyzw, s0
add r2.xy, r1.xzxx, r2.xyxx
sample r5.xyzw, r2.xyxx, t0.xyzw, s0
sample r2.xyzw, r2.zwzz, t0.xyzw, s0
add r6.xyzw, r1.xzzy, v1.xyxy
sample r7.xyzw, r6.xyxx, t0.xyzw, s0
add r1.yw, -r1.xxxz, r6.zzzw
sample r8.xyzw, r1.ywyy, t0.xyzw, s0
sample r9.xyzw, r6.zwzz, t0.xyzw, s0
add r1.xy, r1.xzxx, r6.zwzz
sample r1.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.w, r4.w, l(-2.000000), -r3.w
add r0.w, -r5.w, r0.w
add r0.w, r8.w, r0.w
mad r0.w, r9.w, l(2.000000), r0.w
add r0.w, r1.w, r0.w
add r1.x, -r3.w, r5.w
mad r1.x, r2.w, l(-2.000000), r1.x
mad r1.x, r7.w, l(2.000000), r1.x
add r1.x, -r8.w, r1.x
add r1.x, r1.w, r1.x
mul r1.x, r1.x, r1.x
mad r0.w, r0.w, r0.w, r1.x
sqrt r0.w, r0.w
lt r0.w, cb2[1].x, r0.w
if_z r0.w
  mov o0.xyz, r0.xyzx
  mov o0.w, cb2[2].x
  ret 
endif 
mov o0.xyz, cb2[1].yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 43 instruction slots used
