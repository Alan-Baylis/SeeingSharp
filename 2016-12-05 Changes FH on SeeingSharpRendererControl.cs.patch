 .../Views/SeeingSharpRendererControl.cs            | 96 +++++++++++++---------
 1 file changed, 55 insertions(+), 41 deletions(-)

diff --git a/SeeingSharp.Multimedia_DESKTOP/Views/SeeingSharpRendererControl.cs b/SeeingSharp.Multimedia_DESKTOP/Views/SeeingSharpRendererControl.cs
index 3145097..1705562 100644
--- a/SeeingSharp.Multimedia_DESKTOP/Views/SeeingSharpRendererControl.cs
+++ b/SeeingSharp.Multimedia_DESKTOP/Views/SeeingSharpRendererControl.cs
@@ -89,6 +89,12 @@ namespace SeeingSharp.Multimedia.Views
         public event EventHandler<MouseEventArgs> MouseClickEx;
 
         /// <summary>
+        /// Is true if the basic infrastructure has been initialized successfully in the constructor.
+        /// If false, the design time image is displayed and no usefull methods may be called successfully.
+        /// </summary>
+        public bool IsOperational { get; private set; }
+
+        /// <summary>
         /// Initializes a new instance of the <see cref="SeeingSharpRendererControl"/> class.
         /// </summary>
         public SeeingSharpRendererControl()
@@ -102,50 +108,55 @@ namespace SeeingSharp.Multimedia.Views
             base.DoubleBuffered = false;
 
             //Create the render loop
-            GraphicsCore.Touch();
-            m_renderLoop = new RenderLoop(SynchronizationContext.Current, this, this.DesignMode);
-            m_renderLoop.ManipulateFilterList += OnRenderLoopManipulateFilterList;
-            m_renderLoop.ClearColor = new Color4(this.BackColor);
-            m_renderLoop.DiscardRendering = true;
-            this.Disposed += (sender, eArgs) =>
-            {
-                m_renderLoop.Dispose();
-            };
+            try {
+                GraphicsCore.Touch();
+                m_renderLoop = new RenderLoop(SynchronizationContext.Current, this, this.DesignMode);
+                m_renderLoop.ManipulateFilterList += OnRenderLoopManipulateFilterList;
+                m_renderLoop.ClearColor = new Color4(this.BackColor);
+                m_renderLoop.DiscardRendering = true;
+                this.Disposed += (sender, eArgs) =>
+                {
+                    m_renderLoop.Dispose();
+                };
 
-            // Perform default initialization logic (if not called before)
-            if (SeeingSharpApplication.IsInitialized)
-            {
-                m_renderLoop.SetScene(new Scene());
-                m_renderLoop.Camera = new PerspectiveCamera3D();
-
-                //Observe resize event and throttle them
-                this.HandleCreateDisposeOnControl(
-                    () => Observable.FromEventPattern(this, "Resize")
-                        .Merge(Observable.FromEventPattern(m_renderLoop.ViewConfiguration, "ConfigurationChanged"))
-                        .Throttle(TimeSpan.FromSeconds(0.5))
-                        .ObserveOn(SynchronizationContext.Current)
-                        .Subscribe((eArgs) => OnThrottledViewRecreation()));
-
-                //Initialize background brush
-                UpdateDrawingResourcesForFailoverRendering();
-
-                // Observe mouse click event
-                this.HandleCreateDisposeOnControl(() =>
+                // Perform default initialization logic (if not called before)
+                if (SeeingSharpApplication.IsInitialized)
                 {
-                    var mouseDownEvent = Observable.FromEventPattern<MouseEventArgs>(this, "MouseDown");
-                    var mouseUpEvent = Observable.FromEventPattern<MouseEventArgs>(this, "MouseUp");
-                    var mouseClick = from down in mouseDownEvent
-                                     let timeStampDown = DateTime.UtcNow
-                                     from up in mouseUpEvent
-                                     where up.EventArgs.Button == down.EventArgs.Button
-                                     let timeStampUp = DateTime.UtcNow
-                                     where timeStampUp - timeStampDown < TimeSpan.FromMilliseconds(200.0)
-                                     select new { Down = down, Up = up };
-                    return mouseClick.Subscribe((givenItem) =>
+                    m_renderLoop.SetScene(new Scene());
+                    m_renderLoop.Camera = new PerspectiveCamera3D();
+
+                    //Observe resize event and throttle them
+                    this.HandleCreateDisposeOnControl(
+                        () => Observable.FromEventPattern(this, "Resize")
+                            .Merge(Observable.FromEventPattern(m_renderLoop.ViewConfiguration, "ConfigurationChanged"))
+                            .Throttle(TimeSpan.FromSeconds(0.5))
+                            .ObserveOn(SynchronizationContext.Current)
+                            .Subscribe((eArgs) => OnThrottledViewRecreation()));
+
+                    //Initialize background brush
+                    UpdateDrawingResourcesForFailoverRendering();
+
+                    // Observe mouse click event
+                    this.HandleCreateDisposeOnControl(() =>
                     {
-                        MouseClickEx.Raise(this, givenItem.Up.EventArgs);
+                        var mouseDownEvent = Observable.FromEventPattern<MouseEventArgs>(this, "MouseDown");
+                        var mouseUpEvent = Observable.FromEventPattern<MouseEventArgs>(this, "MouseUp");
+                        var mouseClick = from down in mouseDownEvent
+                                         let timeStampDown = DateTime.UtcNow
+                                         from up in mouseUpEvent
+                                         where up.EventArgs.Button == down.EventArgs.Button
+                                         let timeStampUp = DateTime.UtcNow
+                                         where timeStampUp - timeStampDown < TimeSpan.FromMilliseconds(200.0)
+                                         select new { Down = down, Up = up };
+                        return mouseClick.Subscribe((givenItem) =>
+                        {
+                            MouseClickEx.Raise(this, givenItem.Up.EventArgs);
+                        });
                     });
-                });
+                }
+                this.IsOperational=true;
+            } catch {
+                this.IsOperational=false;
             }
 
             this.Disposed += OnDisposed;
@@ -216,7 +227,8 @@ namespace SeeingSharp.Multimedia.Views
             base.OnPaint(e);
 
             if ((!m_renderLoop.ViewResourcesLoaded) ||
-               (!m_renderLoop.IsRegisteredOnMainLoop))
+               (!m_renderLoop.IsRegisteredOnMainLoop) ||
+               (!this.IsOperational))
             {
                 // Paint using System.Drawing
                 e.Graphics.FillRectangle(m_backBrush, e.ClipRectangle);
@@ -250,6 +262,7 @@ namespace SeeingSharp.Multimedia.Views
         private void StartRendering()
         {
             if (this.DesignMode) { return; }
+            if (!this.IsOperational) { return; }
             if (!SeeingSharpApplication.IsInitialized) { return; }
 
             if (!m_renderLoop.IsRegisteredOnMainLoop)
@@ -266,6 +279,7 @@ namespace SeeingSharp.Multimedia.Views
         private void StopRendering()
         {
             if (this.DesignMode) { return; }
+            if (!this.IsOperational) { return; }
             if (!SeeingSharpApplication.IsInitialized) { return; }
 
             if (m_renderLoop.IsRegisteredOnMainLoop)
